{
  "annotation_type": "@NonNegative",
  "total_examples": 500,
  "positive_examples": 250,
  "negative_examples": 250,
  "balance_ratio": 0.5,
  "examples": [
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/test.json",
      "method_name": "test",
      "line_number": 12,
      "node_type": "",
      "node_label": "Try",
      "features": [
        3.0,
        12.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Try | Line: 12 | Prev: Exit... | Next: Return(Literal(postfix_operato..."
    },
    {
      "node_id": 23,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 24,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        24.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 24 | Prev: return i;... | Next: }..."
    },
    {
      "node_id": 9,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/__cfwr_temp661.json",
      "method_name": "__cfwr_temp661",
      "line_number": 52,
      "node_type": "",
      "node_label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=70.15))",
      "features": [
        101.0,
        52.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=70.15)) | Line: 52 | Prev: While(BinaryOperation(operandl... | Next: While(BinaryOperation(operandl..."
    },
    {
      "node_id": 27,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 28,
      "node_type": "",
      "node_label": "return 8.48;",
      "features": [
        12.0,
        28.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return 8.48; | Line: 28 | Prev: try {... | Next: } catch (Exception __cfwr_e85)..."
    },
    {
      "node_id": 34,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 35,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        35.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 35 | Prev: break; // Prevent infinite loo... | Next: while ((1.65 * 'B')) {..."
    },
    {
      "node_id": 17,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 18,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        18.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 18 | Prev: }... | Next: } catch (Exception __cfwr_e18)..."
    },
    {
      "node_id": 15,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 16,
      "node_type": "",
      "node_label": "for (int __cfwr_i81 = 0; __cfwr_i81 < 6; __cfwr_i81++) {",
      "features": [
        56.0,
        16.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: for (int __cfwr_i81 = 0; __cfwr_i81 < 6; __cfwr_i81++) { | Line: 16 | Prev: for (int i = end... | Next: if ((-75.81 * -79.30) && (-70...."
    },
    {
      "node_id": 42,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 43,
      "node_type": "",
      "node_label": "int abl2 = identity(abl);",
      "features": [
        25.0,
        43.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: int abl2 = identity(abl); | Line: 43 | Prev: @LTEqLengthOf({ \"a\", \"b\", \"c\" ... | Next: }..."
    },
    {
      "node_id": 27,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 28,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        28.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 28 | Prev: return null;... | Next: }..."
    },
    {
      "node_id": 8,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/__cfwr_aux198.json",
      "method_name": "__cfwr_aux198",
      "line_number": 66,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=39.92f), name=__cfwr_val19)], modifiers=set(), type=BasicType(dimensions=[], name=float))",
      "features": [
        276.0,
        66.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=39.92f), name=__cfwr_val19)], modifiers=set(), type=BasicType(dimensions=[], name=float)) | Line: 66 | Prev: Update(MemberReference(member=... | Next: If(BinaryOperation(operandl=Li..."
    },
    {
      "node_id": 10,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 23,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), operator=-), name=e)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        559.0,
        23.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), operator=-), name=e)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 23 | Prev: LocalVariableDeclaration(annot... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_compute793.json",
      "method_name": "__cfwr_compute793",
      "line_number": 30,
      "node_type": "",
      "node_label": "While(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false))",
      "features": [
        100.0,
        30.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: While(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false)) | Line: 30 | Prev: Exit... | Next: While(Literal(postfix_operator..."
    },
    {
      "node_id": 34,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 35,
      "node_type": "",
      "node_label": "ntity(al);",
      "features": [
        10.0,
        35.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: ntity(al); | Line: 35 | Prev: }... | Next: @LTLengthOf({ \"a\", \"b\" })..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/RefineLTE/RefineLTE.json",
      "method_name": "RefineLTE",
      "line_number": 5,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.LTLengthOf;",
      "features": [
        58.0,
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.LTLengthOf; | Line: 5 | Prev: import org.checkerframework.ch..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SizeVsLength/__cfwr_temp581.json",
      "method_name": "__cfwr_temp581",
      "line_number": 25,
      "node_type": "",
      "node_label": "While(BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=79.15), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=361L), operator=|), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=84.02f), operator=>>))",
      "features": [
        394.0,
        25.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: While(BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=79.15), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=361L), operator=|), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=84.02f), operator=>>)) | Line: 25 | Prev: Exit... | Next: If(BinaryOperation(operandl=Bi..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/RefineGT/testLTEL.json",
      "method_name": "testLTEL",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: Return(Literal(postfix_operato..."
    },
    {
      "node_id": 27,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 28,
      "node_type": "",
      "node_label": "if (((true >> -33L) / null) || false) {",
      "features": [
        39.0,
        28.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: if (((true >> -33L) / null) || false) { | Line: 28 | Prev: for (int __cfwr_i47 = 0; __cfw... | Next: for (int __cfwr_i32 = 0; __cfw..."
    },
    {
      "node_id": 52,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 53,
      "node_type": "",
      "node_label": "try {",
      "features": [
        5.0,
        53.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: try { | Line: 53 | Prev: while ((-322L * (null ^ -579))... | Next: String __cfwr_temp30 = \"test57..."
    },
    {
      "node_id": 33,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 34,
      "node_type": "",
      "node_label": "break; // Prevent infinite loops",
      "features": [
        32.0,
        34.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: break; // Prevent infinite loops | Line: 34 | Prev: }... | Next: }..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 8,
      "node_type": "",
      "node_label": "void gte_bad_check(int[] a) {",
      "features": [
        29.0,
        8.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: void gte_bad_check(int[] a) { | Line: 8 | Next: for (int __cfwr_i43 = 0; __cfw..."
    },
    {
      "node_id": 35,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 36,
      "node_type": "",
      "node_label": "} catch (Exception __cfwr_e67) {",
      "features": [
        32.0,
        36.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } catch (Exception __cfwr_e67) { | Line: 36 | Prev: }... | Next: // ignore..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/__cfwr_temp661.json",
      "method_name": "__cfwr_temp661",
      "line_number": 47,
      "node_type": "",
      "node_label": "If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=&&))",
      "features": [
        238.0,
        47.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=&&)) | Line: 47 | Prev: Try... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 36,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 37,
      "node_type": "",
      "node_label": "} catch (Exception __cfwr_e8) {",
      "features": [
        31.0,
        37.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } catch (Exception __cfwr_e8) { | Line: 37 | Prev: }... | Next: // ignore..."
    },
    {
      "node_id": 15,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Index176/test.json",
      "method_name": "test",
      "line_number": 33,
      "node_type": "",
      "node_label": "MethodInvocation(arguments=[MemberReference(member=pos, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), BinaryOperation(operandl=MemberReference(member=semi_pos, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=+)], member=substring, postfix_operators=[], prefix_operators=[], qualifier=arglist, selectors=[], type_arguments=None)",
      "features": [
        482.0,
        33.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: MethodInvocation(arguments=[MemberReference(member=pos, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), BinaryOperation(operandl=MemberReference(member=semi_pos, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=+)], member=substring, postfix_operators=[], prefix_operators=[], qualifier=arglist, selectors=[], type_arguments=None) | Line: 33 | Prev: MethodInvocation(arguments=[Me..."
    },
    {
      "node_id": 46,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 47,
      "node_type": "",
      "node_label": "return null;",
      "features": [
        12.0,
        47.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return null; | Line: 47 | Prev: }... | Next: return null;..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexForTestLBC/callTest1.json",
      "method_name": "callTest1",
      "line_number": 58,
      "node_type": "",
      "node_label": "If(BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>))",
      "features": [
        251.0,
        58.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: If(BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>)) | Line: 58 | Prev: MethodInvocation(arguments=[Bi... | Next: MethodInvocation(arguments=[Me..."
    },
    {
      "node_id": 8,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic2/testUpperBound2.json",
      "method_name": "testUpperBound2",
      "line_number": 27,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"array1\"), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=b, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=mergeUpperBound, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=zz)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        637.0,
        27.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"array1\"), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=b, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=mergeUpperBound, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=zz)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 27 | Prev: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanValue/__cfwr_func65.json",
      "method_name": "__cfwr_func65",
      "line_number": 60,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=23.06), name=__cfwr_item90)], modifiers=set(), type=BasicType(dimensions=[], name=double))",
      "features": [
        280.0,
        60.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=23.06), name=__cfwr_item90)], modifiers=set(), type=BasicType(dimensions=[], name=double)) | Line: 60 | Prev: If(BinaryOperation(operandl=Li... | Next: Return(Literal(postfix_operato..."
    },
    {
      "node_id": 45,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 46,
      "node_type": "",
      "node_label": "Object __cfwr_val3 = null;",
      "features": [
        26.0,
        46.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Object __cfwr_val3 = null; | Line: 46 | Prev: protected static Long __cfwr_h... | Next: try {..."
    },
    {
      "node_id": 12,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 13,
      "node_type": "",
      "node_label": "} catch (Exception __cfwr_e95) {",
      "features": [
        32.0,
        13.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } catch (Exception __cfwr_e95) { | Line: 13 | Prev: return null;... | Next: // ignore..."
    },
    {
      "node_id": 15,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 16,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        16.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 16 | Prev: // ignore..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/method3.json",
      "method_name": "method3",
      "line_number": 15,
      "node_type": "",
      "node_label": "If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operator=||))",
      "features": [
        240.0,
        15.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operator=||)) | Line: 15 | Prev: If(BinaryOperation(operandl=Bi... | Next: While(Literal(postfix_operator..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/__cfwr_temp661.json",
      "method_name": "__cfwr_temp661",
      "line_number": null,
      "node_type": "",
      "node_label": "Catch(__cfwr_e36)",
      "features": [
        17.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Catch(__cfwr_e36) | Prev: LocalVariableDeclaration(annot... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 20,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 21,
      "node_type": "",
      "node_label": "int i = b.nextSetBit(0);",
      "features": [
        24.0,
        21.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: int i = b.nextSetBit(0); | Line: 21 | Prev: @GTENegativeOne... | Next: @GTENegativeOne..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 1,
      "node_type": "",
      "node_label": "/*",
      "features": [
        2.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: /* | Line: 1 | Next: * CFWR augmentation: inserted ..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/method3.json",
      "method_name": "method3",
      "line_number": 13,
      "node_type": "",
      "node_label": "While(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true))",
      "features": [
        99.0,
        13.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: While(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true)) | Line: 13 | Prev: Exit... | Next: Try..."
    },
    {
      "node_id": 10,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 11,
      "node_type": "",
      "node_label": "import org.checkerframework.common.value.qual.MinLen;",
      "features": [
        53.0,
        11.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: import org.checkerframework.common.value.qual.MinLen; | Line: 11 | Prev: import org.checkerframework.ch..."
    },
    {
      "node_id": 50,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 51,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        51.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 51 | Prev: }..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexForTestLBC/callTest1.json",
      "method_name": "callTest1",
      "line_number": 57,
      "node_type": "",
      "node_label": "MethodInvocation(arguments=[BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)], member=test1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)",
      "features": [
        376.0,
        57.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: MethodInvocation(arguments=[BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)], member=test1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None) | Line: 57 | Prev: MethodInvocation(arguments=[Me... | Next: If(BinaryOperation(operandl=Me..."
    },
    {
      "node_id": 44,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 45,
      "node_type": "",
      "node_label": "// ignore",
      "features": [
        9.0,
        45.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: // ignore | Line: 45 | Prev: } catch (Exception __cfwr_e43)... | Next: }..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroAdd/test.json",
      "method_name": "test",
      "line_number": 19,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTEqLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+), name=c1)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        562.0,
        19.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTEqLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+), name=c1)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 19 | Prev: LocalVariableDeclaration(annot... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 46,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 47,
      "node_type": "",
      "node_label": "if (true && false) {",
      "features": [
        20.0,
        47.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: if (true && false) { | Line: 47 | Prev: try {... | Next: while (true) {..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LTLDivide/test2.json",
      "method_name": "test2",
      "line_number": 16,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[]), name=len)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        275.0,
        16.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[]), name=len)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 16 | Prev: Catch(__cfwr_e70)... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 56,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 57,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        57.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 57 | Prev: // ignore... | Next: break; // Prevent infinite loo..."
    },
    {
      "node_id": 21,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 22,
      "node_type": "",
      "node_label": "; __cfwr_i36 < 2; __cfwr_i36++) {",
      "features": [
        33.0,
        22.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: ; __cfwr_i36 < 2; __cfwr_i36++) { | Line: 22 | Prev: }... | Next: return (null << -2.62);..."
    },
    {
      "node_id": 10,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 11,
      "node_type": "",
      "node_label": "for (int __cfwr_i40 = 0; __cfwr_i40 < 8; __cfwr_i40++) {",
      "features": [
        56.0,
        11.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: for (int __cfwr_i40 = 0; __cfwr_i40 < 8; __cfwr_i40++) { | Line: 11 | Prev: if (true || true) {... | Next: if (false && (-71.25f / (true ..."
    },
    {
      "node_id": 11,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_util219.json",
      "method_name": "__cfwr_util219",
      "line_number": 53,
      "node_type": "",
      "node_label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null))",
      "features": [
        100.0,
        53.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null)) | Line: 53 | Prev: Update(MemberReference(member=..."
    },
    {
      "node_id": 9,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/method3.json",
      "method_name": "method3",
      "line_number": null,
      "node_type": "",
      "node_label": "Catch(__cfwr_e21)",
      "features": [
        17.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Catch(__cfwr_e21) | Prev: Break... | Next: Catch(__cfwr_e61)..."
    },
    {
      "node_id": 22,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 23,
      "node_type": "",
      "node_label": "return i;",
      "features": [
        9.0,
        23.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: return i; | Line: 23 | Prev: if (array[i] == target) {... | Next: }..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 11,
      "node_type": "",
      "node_label": "For(BinaryOperation(operandl=MemberReference(member=__cfwr_i54, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6), operator=<))",
      "features": [
        246.0,
        11.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: For(BinaryOperation(operandl=MemberReference(member=__cfwr_i54, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6), operator=<)) | Line: 11 | Prev: For(BinaryOperation(operandl=M... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 13,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 14,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        14.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Line: 14 | Prev: public class StringLength {... | Next: void testNewArraySameLen(Strin..."
    },
    {
      "node_id": 30,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 31,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        31.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 31 | Prev: return null;... | Next: }..."
    },
    {
      "node_id": 44,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 45,
      "node_type": "",
      "node_label": "// ignore",
      "features": [
        9.0,
        45.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: // ignore | Line: 45 | Prev: } catch (Exception __cfwr_e34)... | Next: }..."
    },
    {
      "node_id": 23,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 24,
      "node_type": "",
      "node_label": "Object __cfwr_temp98 = null;",
      "features": [
        28.0,
        24.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Object __cfwr_temp98 = null; | Line: 24 | Prev: private Integer __cfwr_compute... | Next: if (true && ((-424L + 705L) * ..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_compute793.json",
      "method_name": "__cfwr_compute793",
      "line_number": 35,
      "node_type": "",
      "node_label": "Break",
      "features": [
        5.0,
        35.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Break | Line: 35 | Prev: LocalVariableDeclaration(annot... | Next: Return(Literal(postfix_operato..."
    },
    {
      "node_id": 66,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 67,
      "node_type": "",
      "node_label": "try {",
      "features": [
        5.0,
        67.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: try { | Line: 67 | Prev: while (true) {... | Next: return null;..."
    },
    {
      "node_id": 14,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 15,
      "node_type": "",
      "node_label": "// ignore",
      "features": [
        9.0,
        15.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: // ignore | Line: 15 | Prev: } catch (Exception __cfwr_e60)... | Next: }..."
    },
    {
      "node_id": 18,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 19,
      "node_type": "",
      "node_label": "return 141;",
      "features": [
        11.0,
        19.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return 141; | Line: 19 | Prev: for (int __cfwr_i90 = 0; __cfw... | Next: }..."
    },
    {
      "node_id": 65,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 66,
      "node_type": "",
      "node_label": "while (true) {",
      "features": [
        14.0,
        66.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: while (true) { | Line: 66 | Prev: for (int __cfwr_i31 = 0; __cfw... | Next: try {..."
    },
    {
      "node_id": 42,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 43,
      "node_type": "",
      "node_label": "public static Boolean __cfwr_helper521(short __cfwr_p0, byte __cfwr_p1, Object __cfwr_p2) {",
      "features": [
        91.0,
        43.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: public static Boolean __cfwr_helper521(short __cfwr_p0, byte __cfwr_p1, Object __cfwr_p2) { | Line: 43 | Prev: }... | Next: for (int __cfwr_i30 = 0; __cfw..."
    },
    {
      "node_id": 41,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 42,
      "node_type": "",
      "node_label": "try {",
      "features": [
        5.0,
        42.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: try { | Line: 42 | Prev: while (true) {... | Next: return true;..."
    },
    {
      "node_id": 39,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 40,
      "node_type": "",
      "node_label": "return (('F' & 24.74) % true);",
      "features": [
        30.0,
        40.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return (('F' & 24.74) % true); | Line: 40 | Prev: }... | Next: }..."
    },
    {
      "node_id": 72,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 73,
      "node_type": "",
      "node_label": "return 'I';",
      "features": [
        11.0,
        73.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: return 'I'; | Line: 73 | Prev: if (true || (-70.69 << -96.74f... | Next: }..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexForTestLBC/callTest1.json",
      "method_name": "callTest1",
      "line_number": 56,
      "node_type": "",
      "node_label": "MethodInvocation(arguments=[MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[])], member=test1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)",
      "features": [
        238.0,
        56.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: MethodInvocation(arguments=[MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[])], member=test1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None) | Line: 56 | Prev: MethodInvocation(arguments=[Li... | Next: MethodInvocation(arguments=[Bi..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Index167/Index167.json",
      "method_name": "Index167",
      "line_number": 5,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.LTOMLengthOf;",
      "features": [
        60.0,
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.LTOMLengthOf; | Line: 5 | Prev: import org.checkerframework.ch... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 39,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 40,
      "node_type": "",
      "node_label": "// ignore",
      "features": [
        9.0,
        40.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: // ignore | Line: 40 | Prev: } catch (Exception __cfwr_e16)... | Next: }..."
    },
    {
      "node_id": 38,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 39,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        39.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 39 | Prev: // ignore... | Next: }..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/RefineSubtrahend/withVariable.json",
      "method_name": "withVariable",
      "line_number": null,
      "node_type": "",
      "node_label": "Entry",
      "features": [
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Entry | Next: Exit..."
    },
    {
      "node_id": 17,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 18,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        18.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Line: 18 | Prev: }... | Next: if (a.length >= 1) {..."
    },
    {
      "node_id": 53,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 54,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        54.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 54 | Prev: }... | Next: break; // Prevent infinite loo..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 2,
      "node_type": "",
      "node_label": "* CFWR augmentation: inserted irrelevant code for data augmentation.",
      "features": [
        68.0,
        2.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: * CFWR augmentation: inserted irrelevant code for data augmentation. | Line: 2 | Prev: /*... | Next: */..."
    },
    {
      "node_id": 54,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 55,
      "node_type": "",
      "node_label": "break; // Prevent infinite loops",
      "features": [
        32.0,
        55.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: break; // Prevent infinite loops | Line: 55 | Prev: }... | Next: }..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 11,
      "node_type": "",
      "node_label": "Update(MemberReference(member=__cfwr_i54, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[]))",
      "features": [
        115.0,
        11.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Update(MemberReference(member=__cfwr_i54, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])) | Line: 11 | Prev: LocalVariableDeclaration(annot... | Next: Update(MemberReference(member=..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 8,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        8.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Line: 8 | Prev: public class BitSetLowerBound ... | Next: private void m(BitSet b) {..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 3,
      "node_type": "",
      "node_label": "*/",
      "features": [
        2.0,
        3.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: */ | Line: 3 | Prev: * CFWR augmentation: inserted ... | Next: import java.io.BufferedReader;..."
    },
    {
      "node_id": 39,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 40,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        40.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 40 | Prev: }... | Next: while (true) {..."
    },
    {
      "node_id": 8,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/main.json",
      "method_name": "main",
      "line_number": 20,
      "node_type": "",
      "node_label": "MethodInvocation(arguments=[MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6)], member=read, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)",
      "features": [
        409.0,
        20.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: MethodInvocation(arguments=[MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6)], member=read, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None) | Line: 20 | Prev: MethodInvocation(arguments=[Me... | Next: MethodInvocation(arguments=[Me..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 2,
      "node_type": "",
      "node_label": "* CFWR augmentation: inserted irrelevant code for data augmentation.",
      "features": [
        68.0,
        2.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: * CFWR augmentation: inserted irrelevant code for data augmentation. | Line: 2 | Prev: /*... | Next: */..."
    },
    {
      "node_id": 23,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 24,
      "node_type": "",
      "node_label": "@LTLengthOf(\"a\")",
      "features": [
        16.0,
        24.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: @LTLengthOf(\"a\") | Line: 24 | Prev: int[] c;... | Next: int ai1 = identity(ai);..."
    },
    {
      "node_id": 10,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 11,
      "node_type": "",
      "node_label": "@LessThan(\"#4\")",
      "features": [
        15.0,
        11.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: @LessThan(\"#4\") | Line: 11 | Prev: @IndexOrLow(\"#1\")... | Next: private static int lastIndexOf..."
    },
    {
      "node_id": 9,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_util219.json",
      "method_name": "__cfwr_util219",
      "line_number": 49,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"temp21\"), name=__cfwr_data87)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))",
      "features": [
        315.0,
        49.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"temp21\"), name=__cfwr_data87)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)) | Line: 49 | Prev: For(BinaryOperation(operandl=M... | Next: Update(MemberReference(member=..."
    },
    {
      "node_id": 29,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 30,
      "node_type": "",
      "node_label": "// ignore",
      "features": [
        9.0,
        30.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: // ignore | Line: 30 | Prev: } catch (Exception __cfwr_e85)... | Next: }..."
    },
    {
      "node_id": 19,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 20,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        20.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 20 | Prev: int @SameLen(\"s\") [] array1 = ... | Next: static double __cfwr_compute51..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LTLengthOfPostcondition/LTLengthOfPostcondition.json",
      "method_name": "LTLengthOfPostcondition",
      "line_number": 5,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.EnsuresLTLengthOf;",
      "features": [
        65.0,
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.EnsuresLTLengthOf; | Line: 5 | Prev: import java.util.Arrays;... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SizeVsLength/__cfwr_temp581.json",
      "method_name": "__cfwr_temp581",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: While(BinaryOperation(operandl..."
    },
    {
      "node_id": 8,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 19,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTEqLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-), name=c1)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        562.0,
        19.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTEqLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-), name=c1)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 19 | Prev: LocalVariableDeclaration(annot... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/__cfwr_aux198.json",
      "method_name": "__cfwr_aux198",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: For(BinaryOperation(operandl=M..."
    },
    {
      "node_id": 10,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LengthOfArrayMinusOne/test.json",
      "method_name": "test",
      "line_number": 20,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=arr, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-))]), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        526.0,
        20.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 1.0,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=arr, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-))]), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 20 | Prev: Update(MemberReference(member=... | Next: If(BinaryOperation(operandl=Me..."
    },
    {
      "node_id": 10,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LTLDivide/test2.json",
      "method_name": "test2",
      "line_number": 24,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"array\"), name=LTEqLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=len, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=/), name=z)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        537.0,
        24.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"array\"), name=LTEqLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=len, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=/), name=z)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 24 | Prev: LocalVariableDeclaration(annot... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 15,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 16,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        16.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 16 | Prev: }... | Next: }..."
    },
    {
      "node_id": 8,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_util219.json",
      "method_name": "__cfwr_util219",
      "line_number": 48,
      "node_type": "",
      "node_label": "For(BinaryOperation(operandl=MemberReference(member=__cfwr_i73, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), operator=<))",
      "features": [
        246.0,
        48.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: For(BinaryOperation(operandl=MemberReference(member=__cfwr_i73, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), operator=<)) | Line: 48 | Prev: Update(MemberReference(member=... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 74,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 75,
      "node_type": "",
      "node_label": "return null;",
      "features": [
        12.0,
        75.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return null; | Line: 75 | Prev: }... | Next: }..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanValue/__cfwr_handle768.json",
      "method_name": "__cfwr_handle768",
      "line_number": 49,
      "node_type": "",
      "node_label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false))",
      "features": [
        101.0,
        49.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false)) | Line: 49 | Prev: While(BinaryOperation(operandl... | Next: Return(Literal(postfix_operato..."
    },
    {
      "node_id": 10,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/__cfwr_temp661.json",
      "method_name": "__cfwr_temp661",
      "line_number": 56,
      "node_type": "",
      "node_label": "While(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5.30f), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=+), operator=*))",
      "features": [
        382.0,
        56.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: While(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5.30f), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=+), operator=*)) | Line: 56 | Prev: Return(Literal(postfix_operato... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanValue/foo.json",
      "method_name": "foo",
      "line_number": 16,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='1'), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='n'), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=53.29), operator=|), operator=*), name=__cfwr_val91)], modifiers=set(), type=BasicType(dimensions=[], name=short))",
      "features": [
        555.0,
        16.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='1'), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='n'), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=53.29), operator=|), operator=*), name=__cfwr_val91)], modifiers=set(), type=BasicType(dimensions=[], name=short)) | Line: 16 | Prev: Exit... | Next: Throw(ClassCreator(arguments=[..."
    },
    {
      "node_id": 8,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LTLDivide/test2.json",
      "method_name": "test2",
      "line_number": 20,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"array\"), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=len, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=/), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        535.0,
        20.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"array\"), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=len, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=/), name=x)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 20 | Prev: LocalVariableDeclaration(annot... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 45,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 46,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        46.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 46 | Prev: // ignore... | Next: break; // Prevent infinite loo..."
    },
    {
      "node_id": 25,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 26,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        26.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 26 | Prev: Object __cfwr_temp24 = null;... | Next: int j = b.previousClearBit(-1)..."
    },
    {
      "node_id": 28,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 29,
      "node_type": "",
      "node_label": "int k = b.previousSetBit(-1);",
      "features": [
        29.0,
        29.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: int k = b.previousSetBit(-1); | Line: 29 | Prev: @GTENegativeOne... | Next: }..."
    },
    {
      "node_id": 29,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 30,
      "node_type": "",
      "node_label": "@LTLengthOf(\"a\")",
      "features": [
        16.0,
        30.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: @LTLengthOf(\"a\") | Line: 30 | Prev: int al1 = identity(al);... | Next: int al2 = ide..."
    },
    {
      "node_id": 11,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/__cfwr_aux198.json",
      "method_name": "__cfwr_aux198",
      "line_number": 70,
      "node_type": "",
      "node_label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='2'))",
      "features": [
        99.0,
        70.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='2')) | Line: 70 | Prev: Return(Literal(postfix_operato..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 7,
      "node_type": "",
      "node_label": "public class BitSetLowerBound {",
      "features": [
        31.0,
        7.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: public class BitSetLowerBound { | Line: 7"
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/RefineSubtrahend/__cfwr_calc848.json",
      "method_name": "__cfwr_calc848",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 22,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 23,
      "node_type": "",
      "node_label": "return (null << -2.62);",
      "features": [
        23.0,
        23.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return (null << -2.62); | Line: 23 | Prev: ; __cfwr_i36 < 2; __cfwr_i36++... | Next: }..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 7,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        7.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Line: 7 | Prev: import java.io.InputStreamRead... | Next: public class SkipBufferedReade..."
    },
    {
      "node_id": 69,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 70,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        70.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 70 | Prev: break; // Prevent infinite loo... | Next: }..."
    },
    {
      "node_id": 32,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 33,
      "node_type": "",
      "node_label": "float __cfwr_val15 = (true & null);",
      "features": [
        35.0,
        33.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: float __cfwr_val15 = (true & null); | Line: 33 | Prev: if (false || true) {... | Next: }..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/__cfwr_aux198.json",
      "method_name": "__cfwr_aux198",
      "line_number": 58,
      "node_type": "",
      "node_label": "If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operator=&&))",
      "features": [
        240.0,
        58.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operator=&&)) | Line: 58 | Prev: For(BinaryOperation(operandl=M... | Next: While(BinaryOperation(operandl..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 1,
      "node_type": "",
      "node_label": "/*",
      "features": [
        2.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: /* | Line: 1 | Next: * CFWR augmentation: inserted ..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanValue/__cfwr_handle768.json",
      "method_name": "__cfwr_handle768",
      "line_number": 52,
      "node_type": "",
      "node_label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null))",
      "features": [
        100.0,
        52.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null)) | Line: 52 | Prev: Return(Literal(postfix_operato..."
    },
    {
      "node_id": 37,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 38,
      "node_type": "",
      "node_label": "@LTLengthOf({ \"a\", \"b\", \"c\" })",
      "features": [
        30.0,
        38.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: @LTLengthOf({ \"a\", \"b\", \"c\" }) | Line: 38 | Prev: int abi1 = identity(abi);... | Next: int abi2 = identity(abi);..."
    },
    {
      "node_id": 64,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 65,
      "node_type": "",
      "node_label": "for (int __cfwr_i31 = 0; __cfwr_i31 < 6; __cfwr_i31++) {",
      "features": [
        56.0,
        65.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: for (int __cfwr_i31 = 0; __cfwr_i31 < 6; __cfwr_i31++) { | Line: 65 | Prev: }... | Next: while (true) {..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/PlusPlusBug/PlusPlusBug.json",
      "method_name": "PlusPlusBug",
      "line_number": 8,
      "node_type": "",
      "node_label": "void test(@LTLengthOf(\"array\") int x) {",
      "features": [
        39.0,
        8.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: void test(@LTLengthOf(\"array\") int x) { | Line: 8 | Next: return (-75.64f % -833);..."
    },
    {
      "node_id": 18,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 19,
      "node_type": "",
      "node_label": "int @SameLen(\"s\") [] array1 = new int[s.length() + 1];",
      "features": [
        54.0,
        19.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: int @SameLen(\"s\") [] array1 = new int[s.length() + 1]; | Line: 19 | Prev: int @SameLen(\"s\") [] array = n... | Next: }..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 1,
      "node_type": "",
      "node_label": "/*",
      "features": [
        2.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: /* | Line: 1 | Next: * CFWR augmentation: inserted ..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/main.json",
      "method_name": "main",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: If(BinaryOperation(operandl=Bi..."
    },
    {
      "node_id": 32,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 33,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        33.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 33 | Prev: }... | Next: break; // Prevent infinite loo..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/__cfwr_aux157.json",
      "method_name": "__cfwr_aux157",
      "line_number": 30,
      "node_type": "",
      "node_label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=672L))",
      "features": [
        100.0,
        30.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=672L)) | Line: 30 | Prev: Exit..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 1,
      "node_type": "",
      "node_label": "/*",
      "features": [
        2.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: /* | Line: 1 | Next: * CFWR augmentation: inserted ..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LTLDivide/test2.json",
      "method_name": "test2",
      "line_number": 17,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-), name=lenM1)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        415.0,
        17.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-), name=lenM1)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 17 | Prev: LocalVariableDeclaration(annot... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 3,
      "node_type": "",
      "node_label": "*/",
      "features": [
        2.0,
        3.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: */ | Line: 3 | Prev: * CFWR augmentation: inserted ... | Next: import java.util.BitSet;..."
    },
    {
      "node_id": 11,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/__cfwr_temp661.json",
      "method_name": "__cfwr_temp661",
      "line_number": 57,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_node35)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))",
      "features": [
        312.0,
        57.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_node35)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None)) | Line: 57 | Prev: While(BinaryOperation(operandl... | Next: Break..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/RefineGT/testLTEL.json",
      "method_name": "testLTEL",
      "line_number": null,
      "node_type": "",
      "node_label": "Entry",
      "features": [
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Entry | Next: Exit..."
    },
    {
      "node_id": 20,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 21,
      "node_type": "",
      "node_label": "- 1; i >= start; i--) {",
      "features": [
        23.0,
        21.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: - 1; i >= start; i--) { | Line: 21 | Prev: }... | Next: if (array[i] == target) {..."
    },
    {
      "node_id": 63,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 64,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        64.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 64 | Prev: short __cfwr_item27 = null;... | Next: for (int __cfwr_i31 = 0; __cfw..."
    },
    {
      "node_id": 29,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 30,
      "node_type": "",
      "node_label": "return null;",
      "features": [
        12.0,
        30.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return null; | Line: 30 | Prev: if ((-647 << (-4.43 << true)) ... | Next: }..."
    },
    {
      "node_id": 8,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/__cfwr_temp661.json",
      "method_name": "__cfwr_temp661",
      "line_number": 51,
      "node_type": "",
      "node_label": "While(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='c'), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operator=^), operator=/))",
      "features": [
        381.0,
        51.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: While(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='c'), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operator=^), operator=/)) | Line: 51 | Prev: If(BinaryOperation(operandl=Li... | Next: Return(Literal(postfix_operato..."
    },
    {
      "node_id": 22,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 23,
      "node_type": "",
      "node_label": "private Integer __cfwr_compute529() {",
      "features": [
        37.0,
        23.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: private Integer __cfwr_compute529() { | Line: 23 | Prev: }... | Next: Object __cfwr_temp98 = null;..."
    },
    {
      "node_id": 37,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 38,
      "node_type": "",
      "node_label": "break; // Prevent infinite loops",
      "features": [
        32.0,
        38.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: break; // Prevent infinite loops | Line: 38 | Prev: Character __cfwr_item74 = null... | Next: }..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/method3.json",
      "method_name": "method3",
      "line_number": null,
      "node_type": "",
      "node_label": "Entry",
      "features": [
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Entry | Next: Exit..."
    },
    {
      "node_id": 19,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 20,
      "node_type": "",
      "node_label": "// ignore",
      "features": [
        9.0,
        20.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: // ignore | Line: 20 | Prev: } catch (Exception __cfwr_e18)... | Next: }..."
    },
    {
      "node_id": 23,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 24,
      "node_type": "",
      "node_label": "if ((78L % -8) && false) {",
      "features": [
        26.0,
        24.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: if ((78L % -8) && false) { | Line: 24 | Next: Object __cfwr_temp24 = null;..."
    },
    {
      "node_id": 45,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 46,
      "node_type": "",
      "node_label": "try {",
      "features": [
        5.0,
        46.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: try { | Line: 46 | Prev: while (true) {... | Next: if (true && false) {..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": null,
      "node_type": "",
      "node_label": "Entry",
      "features": [
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Entry | Next: Exit..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 2,
      "node_type": "",
      "node_label": "* CFWR augmentation: inserted irrelevant code for data augmentation.",
      "features": [
        68.0,
        2.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: * CFWR augmentation: inserted irrelevant code for data augmentation. | Line: 2 | Prev: /*... | Next: */..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanValue/foo.json",
      "method_name": "foo",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Issue2494/Issue2494.json",
      "method_name": "Issue2494",
      "line_number": 5,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.LTLengthOf;",
      "features": [
        58.0,
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.LTLengthOf; | Line: 5 | Prev: import org.checkerframework.ch... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 11,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 12,
      "node_type": "",
      "node_label": "bufferedReader.skip(-1);",
      "features": [
        24.0,
        12.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: bufferedReader.skip(-1); | Line: 12 | Prev: BufferedReader bufferedReader ... | Next: bufferedReader.skip(1);..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanValue/__cfwr_func65.json",
      "method_name": "__cfwr_func65",
      "line_number": 62,
      "node_type": "",
      "node_label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null))",
      "features": [
        100.0,
        62.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null)) | Line: 62 | Prev: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/__cfwr_aux157.json",
      "method_name": "__cfwr_aux157",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: Return(Literal(postfix_operato..."
    },
    {
      "node_id": 47,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 48,
      "node_type": "",
      "node_label": "try {",
      "features": [
        5.0,
        48.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: try { | Line: 48 | Prev: try {... | Next: if ((11.03f * -96.97) || false..."
    },
    {
      "node_id": 8,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 9,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        9.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Line: 9 | Prev: public class SkipBufferedReade... | Next: public static void method() th..."
    },
    {
      "node_id": 50,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 51,
      "node_type": "",
      "node_label": "return false;",
      "features": [
        13.0,
        51.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return false; | Line: 51 | Prev: while (false) {... | Next: break; // Prevent infinite loo..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: For(BinaryOperation(operandl=M..."
    },
    {
      "node_id": 12,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/method3.json",
      "method_name": "method3",
      "line_number": 36,
      "node_type": "",
      "node_label": "Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=vDown, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ArrayCreator(dimensions=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=size, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)))",
      "features": [
        570.0,
        36.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=vDown, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ArrayCreator(dimensions=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=size, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int))) | Line: 36 | Prev: Assignment(expressionl=This(po... | Next: Assignment(expressionl=MemberR..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic2/testUpperBound2.json",
      "method_name": "testUpperBound2",
      "line_number": 25,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"array\n        while (false) {\n            return 'W';\n            break; // Prevent infinite loops\n        }\n1\"), name=LTEqLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=b, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=mergeUpperBound, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=z)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        742.0,
        25.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        1.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"array\n        while (false) {\n            return 'W';\n            break; // Prevent infinite loops\n        }\n1\"), name=LTEqLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=b, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=mergeUpperBound, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=z)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 25 | Prev: Update(MemberReference(member=... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 61,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 62,
      "node_type": "",
      "node_label": "if (((-17.80f ^ 4.27f) * null) || (false * 746)) {",
      "features": [
        50.0,
        62.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: if (((-17.80f ^ 4.27f) * null) || (false * 746)) { | Line: 62 | Prev: }... | Next: short __cfwr_item27 = null;..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 6,
      "node_type": "",
      "node_label": "import java.io.InputStreamReader;",
      "features": [
        33.0,
        6.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: import java.io.InputStreamReader; | Line: 6 | Prev: import java.io.IOException;..."
    },
    {
      "node_id": 21,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 22,
      "node_type": "",
      "node_label": "@GTENegativeOne",
      "features": [
        15.0,
        22.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: @GTENegativeOne | Line: 22 | Prev: int i = b.nextSetBit(0);..."
    },
    {
      "node_id": 28,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 29,
      "node_type": "",
      "node_label": "int al1 = identity(al);",
      "features": [
        23.0,
        29.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: int al1 = identity(al); | Line: 29 | Prev: @LTEqLengthOf(\"a\")... | Next: @LTLengthOf(\"a\")..."
    },
    {
      "node_id": 26,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 27,
      "node_type": "",
      "node_label": "int j = b.previousClearBit(-1);",
      "features": [
        31.0,
        27.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: int j = b.previousClearBit(-1); | Line: 27 | Prev: }... | Next: @GTENegativeOne..."
    },
    {
      "node_id": 19,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 20,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        20.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 20 | Prev: return 141;... | Next: }..."
    },
    {
      "node_id": 22,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 23,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        23.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Line: 23 | Prev: @GTENegativeOne... | Next: if ((78L % -8) && false) {..."
    },
    {
      "node_id": 9,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/__cfwr_aux198.json",
      "method_name": "__cfwr_aux198",
      "line_number": 67,
      "node_type": "",
      "node_label": "If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operator=||))",
      "features": [
        239.0,
        67.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operator=||)) | Line: 67 | Prev: LocalVariableDeclaration(annot... | Next: Return(Literal(postfix_operato..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 2,
      "node_type": "",
      "node_label": "* CFWR augmentation: inserted irrelevant code for data augmentation.",
      "features": [
        68.0,
        2.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: * CFWR augmentation: inserted irrelevant code for data augmentation. | Line: 2 | Prev: /*... | Next: */..."
    },
    {
      "node_id": 9,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 10,
      "node_type": "",
      "node_label": "if (false || (null * -182)) {",
      "features": [
        29.0,
        10.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: if (false || (null * -182)) { | Line: 10 | Prev: for (int __cfwr_i43 = 0; __cfw... | Next: try {..."
    },
    {
      "node_id": 8,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/RefineNeqLength/refineNeqLengthMTwoNonLiteral.json",
      "method_name": "refineNeqLengthMTwoNonLiteral",
      "line_number": 28,
      "node_type": "",
      "node_label": "MethodInvocation(arguments=[MemberReference(member=array, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=refineNeqLengthMThree, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)",
      "features": [
        344.0,
        28.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: MethodInvocation(arguments=[MemberReference(member=array, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=refineNeqLengthMThree, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None) | Line: 28 | Prev: If(BinaryOperation(operandl=Me... | Next: If(BinaryOperation(operandl=Me..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 7,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        7.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Line: 7 | Prev: import org.checkerframework.ch... | Next: public class LessThanDec {..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 10,
      "node_type": "",
      "node_label": "Update(MemberReference(member=__cfwr_i87, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[]))",
      "features": [
        115.0,
        10.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Update(MemberReference(member=__cfwr_i87, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])) | Line: 10 | Prev: Update(MemberReference(member=... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LTLengthOfPostcondition/LTLengthOfPostcondition.json",
      "method_name": "LTLengthOfPostcondition",
      "line_number": 7,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.LTEqLengthOf;",
      "features": [
        60.0,
        7.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.LTEqLengthOf; | Line: 7 | Prev: import org.checkerframework.ch... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 5,
      "node_type": "",
      "node_label": "import java.io.IOException;",
      "features": [
        27.0,
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: import java.io.IOException; | Line: 5 | Prev: import java.io.BufferedReader;... | Next: import java.io.InputStreamRead..."
    },
    {
      "node_id": 36,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 37,
      "node_type": "",
      "node_label": "// ignore",
      "features": [
        9.0,
        37.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: // ignore | Line: 37 | Prev: } catch (Exception __cfwr_e67)... | Next: }..."
    },
    {
      "node_id": 75,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 76,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        76.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 76 | Prev: return null;... | Next: }..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/RefineSubtrahend/__cfwr_calc848.json",
      "method_name": "__cfwr_calc848",
      "line_number": 30,
      "node_type": "",
      "node_label": "Return(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operator=&))",
      "features": [
        242.0,
        30.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Return(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operator=&)) | Line: 30 | Prev: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 24,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 25,
      "node_type": "",
      "node_label": "int ai1 = identity(ai);",
      "features": [
        23.0,
        25.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: int ai1 = identity(ai); | Line: 25 | Prev: @LTLengthOf(\"a\")... | Next: @LTLengthOf(\"b\")..."
    },
    {
      "node_id": 29,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 30,
      "node_type": "",
      "node_label": "return null;",
      "features": [
        12.0,
        30.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return null; | Line: 30 | Prev: for (int __cfwr_i32 = 0; __cfw... | Next: }..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanValue/__cfwr_func65.json",
      "method_name": "__cfwr_func65",
      "line_number": 59,
      "node_type": "",
      "node_label": "If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=||))",
      "features": [
        238.0,
        59.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=||)) | Line: 59 | Prev: Exit... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 35,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 36,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        36.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 36 | Prev: return -29.39f;... | Next: } catch (Exception __cfwr_e8) ..."
    },
    {
      "node_id": 33,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 34,
      "node_type": "",
      "node_label": "break; // Prevent infinite loops",
      "features": [
        32.0,
        34.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: break; // Prevent infinite loops | Line: 34 | Prev: }... | Next: }..."
    },
    {
      "node_id": 48,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 49,
      "node_type": "",
      "node_label": "if (false && true) {",
      "features": [
        20.0,
        49.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: if (false && true) { | Line: 49 | Prev: while (true) {... | Next: while (false) {..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 3,
      "node_type": "",
      "node_label": "*/",
      "features": [
        2.0,
        3.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: */ | Line: 3 | Prev: * CFWR augmentation: inserted ... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/__cfwr_temp213.json",
      "method_name": "__cfwr_temp213",
      "line_number": 24,
      "node_type": "",
      "node_label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null))",
      "features": [
        100.0,
        24.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null)) | Line: 24 | Prev: Exit..."
    },
    {
      "node_id": 71,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 72,
      "node_type": "",
      "node_label": "break; // Prevent infinite loops",
      "features": [
        32.0,
        72.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: break; // Prevent infinite loops | Line: 72 | Prev: }... | Next: }..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanValue/__cfwr_func65.json",
      "method_name": "__cfwr_func65",
      "line_number": null,
      "node_type": "",
      "node_label": "Entry",
      "features": [
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Entry | Next: Exit..."
    },
    {
      "node_id": 58,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 59,
      "node_type": "",
      "node_label": "// ignore",
      "features": [
        9.0,
        59.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: // ignore | Line: 59 | Prev: } catch (Exception __cfwr_e80)... | Next: }..."
    },
    {
      "node_id": 8,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 9,
      "node_type": "",
      "node_label": "try {",
      "features": [
        5.0,
        9.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: try { | Line: 9 | Prev: void ubc_id(int[] a, int[] b, ... | Next: if (true || true) {..."
    },
    {
      "node_id": 35,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 36,
      "node_type": "",
      "node_label": "@LTLengthOf({ \"a\", \"b\" })",
      "features": [
        25.0,
        36.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: @LTLengthOf({ \"a\", \"b\" }) | Line: 36 | Prev: ntity(al);... | Next: int abi1 = identity(abi);..."
    },
    {
      "node_id": 76,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 77,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        77.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 77 | Prev: }..."
    },
    {
      "node_id": 43,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 44,
      "node_type": "",
      "node_label": "} catch (Exception __cfwr_e34) {",
      "features": [
        32.0,
        44.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } catch (Exception __cfwr_e34) { | Line: 44 | Prev: return true;... | Next: // ignore..."
    },
    {
      "node_id": 11,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 12,
      "node_type": "",
      "node_label": "return null;",
      "features": [
        12.0,
        12.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return null; | Line: 12 | Prev: try {... | Next: } catch (Exception __cfwr_e95)..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_util219.json",
      "method_name": "__cfwr_util219",
      "line_number": 41,
      "node_type": "",
      "node_label": "For(BinaryOperation(operandl=MemberReference(member=__cfwr_i25, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), operator=<))",
      "features": [
        246.0,
        41.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: For(BinaryOperation(operandl=MemberReference(member=__cfwr_i25, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), operator=<)) | Line: 41 | Prev: LocalVariableDeclaration(annot... | Next: While(Literal(postfix_operator..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/RefineNeqLength/refineNeqLengthMTwoNonLiteral.json",
      "method_name": "refineNeqLengthMTwoNonLiteral",
      "line_number": 24,
      "node_type": "",
      "node_label": "If(BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[]), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), operandr=MemberReference(member=c3, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=-), operator=!=))",
      "features": [
        534.0,
        24.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: If(BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[]), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), operandr=MemberReference(member=c3, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=-), operator=!=)) | Line: 24 | Prev: Catch(__cfwr_e34)... | Next: MethodInvocation(arguments=[Me..."
    },
    {
      "node_id": 62,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 63,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        63.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 63 | Prev: }... | Next: for (int __cfwr_i14 = 0; __cfw..."
    },
    {
      "node_id": 13,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 14,
      "node_type": "",
      "node_label": "// ignore",
      "features": [
        9.0,
        14.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: // ignore | Line: 14 | Prev: } catch (Exception __cfwr_e95)... | Next: }..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanValue/foo.json",
      "method_name": "foo",
      "line_number": null,
      "node_type": "",
      "node_label": "Entry",
      "features": [
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Entry | Next: Exit..."
    },
    {
      "node_id": 75,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 76,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        76.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 76 | Prev: return null;... | Next: }..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/main.json",
      "method_name": "main",
      "line_number": 13,
      "node_type": "",
      "node_label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null))",
      "features": [
        100.0,
        13.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null)) | Line: 13 | Prev: If(BinaryOperation(operandl=Li... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 24,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 25,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        25.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 25 | Prev: }... | Next: return -1;..."
    },
    {
      "node_id": 61,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 62,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        62.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 62 | Prev: break; // Prevent infinite loo... | Next: }..."
    },
    {
      "node_id": 22,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 23,
      "node_type": "",
      "node_label": "try {",
      "features": [
        5.0,
        23.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: try { | Line: 23 | Prev: try {... | Next: while (true) {..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanValue/__cfwr_aux173.json",
      "method_name": "__cfwr_aux173",
      "line_number": 65,
      "node_type": "",
      "node_label": "Return(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=40.89f), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=&))",
      "features": [
        243.0,
        65.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Return(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=40.89f), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=&)) | Line: 65 | Prev: Exit..."
    },
    {
      "node_id": 35,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 36,
      "node_type": "",
      "node_label": "while ((1.65 * 'B')) {",
      "features": [
        22.0,
        36.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: while ((1.65 * 'B')) { | Line: 36 | Prev: }... | Next: byte __cfwr_data20 = ((-436L /..."
    },
    {
      "node_id": 57,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 58,
      "node_type": "",
      "node_label": "} catch (Exception __cfwr_e80) {",
      "features": [
        32.0,
        58.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } catch (Exception __cfwr_e80) { | Line: 58 | Prev: }... | Next: // ignore..."
    },
    {
      "node_id": 13,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 14,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        14.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Line: 14 | Prev: return false;... | Next: for (int i = end..."
    },
    {
      "node_id": 10,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 11,
      "node_type": "",
      "node_label": "try {",
      "features": [
        5.0,
        11.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: try { | Line: 11 | Prev: if (false || (null * -182)) {... | Next: return null;..."
    },
    {
      "node_id": 19,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 20,
      "node_type": "",
      "node_label": "@GTENegativeOne",
      "features": [
        15.0,
        20.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: @GTENegativeOne | Line: 20 | Prev: b.clear(b.nextSetBit(0));... | Next: int i = b.nextSetBit(0);..."
    },
    {
      "node_id": 9,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 21,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=-), name=d)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        559.0,
        21.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=-), name=d)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 21 | Prev: LocalVariableDeclaration(annot... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/__cfwr_aux198.json",
      "method_name": "__cfwr_aux198",
      "line_number": 56,
      "node_type": "",
      "node_label": "Update(MemberReference(member=__cfwr_i1, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[]))",
      "features": [
        114.0,
        56.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Update(MemberReference(member=__cfwr_i1, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])) | Line: 56 | Prev: Break... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 9,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/main.json",
      "method_name": "main",
      "line_number": 21,
      "node_type": "",
      "node_label": "MethodInvocation(arguments=[MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7)], member=read, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)",
      "features": [
        409.0,
        21.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: MethodInvocation(arguments=[MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7)], member=read, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None) | Line: 21 | Prev: MethodInvocation(arguments=[Me..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 8,
      "node_type": "",
      "node_label": "public class SkipBufferedReader {",
      "features": [
        33.0,
        8.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: public class SkipBufferedReader { | Line: 8"
    },
    {
      "node_id": 33,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 34,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        34.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 34 | Prev: float __cfwr_val15 = (true & n... | Next: ntity(al);..."
    },
    {
      "node_id": 17,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 18,
      "node_type": "",
      "node_label": "byte __cfwr_node68 = null;",
      "features": [
        26.0,
        18.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: byte __cfwr_node68 = null; | Line: 18 | Prev: if ((-75.81 * -79.30) && (-70.... | Next: }..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 12,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_item38)], modifiers=set(), type=BasicType(dimensions=[], name=byte))",
      "features": [
        274.0,
        12.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_item38)], modifiers=set(), type=BasicType(dimensions=[], name=byte)) | Line: 12 | Prev: For(BinaryOperation(operandl=M... | Next: Update(MemberReference(member=..."
    },
    {
      "node_id": 31,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 32,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        32.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 32 | Prev: }... | Next: }..."
    },
    {
      "node_id": 58,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 59,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        59.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 59 | Prev: break; // Prevent infinite loo... | Next: return \"temp25\";..."
    },
    {
      "node_id": 36,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 37,
      "node_type": "",
      "node_label": "byte __cfwr_data20 = ((-436L / true) >> false);",
      "features": [
        47.0,
        37.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: byte __cfwr_data20 = ((-436L / true) >> false); | Line: 37 | Prev: while ((1.65 * 'B')) {... | Next: break; // Prevent infinite loo..."
    },
    {
      "node_id": 9,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroAdd/test.json",
      "method_name": "test",
      "line_number": 23,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), operator=+), name=e)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        559.0,
        23.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), operator=+), name=e)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 23 | Prev: LocalVariableDeclaration(annot... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/test.json",
      "method_name": "test",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: Try..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_compute793.json",
      "method_name": "__cfwr_compute793",
      "line_number": 31,
      "node_type": "",
      "node_label": "While(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true))",
      "features": [
        99.0,
        31.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: While(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true)) | Line: 31 | Prev: While(Literal(postfix_operator... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 28,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 29,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        29.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 29 | Prev: }... | Next: return null;..."
    },
    {
      "node_id": 26,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 27,
      "node_type": "",
      "node_label": "int ai2 = identity(ai);",
      "features": [
        23.0,
        27.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: int ai2 = identity(ai); | Line: 27 | Prev: @LTLengthOf(\"b\")... | Next: @LTEqLengthOf(\"a\")..."
    },
    {
      "node_id": 43,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 44,
      "node_type": "",
      "node_label": "} catch (Exception __cfwr_e43) {",
      "features": [
        32.0,
        44.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } catch (Exception __cfwr_e43) { | Line: 44 | Prev: float __cfwr_data97 = -45.13f;... | Next: // ignore..."
    },
    {
      "node_id": 31,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 32,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        32.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 32 | Prev: }..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/RefineSubtrahend/__cfwr_calc848.json",
      "method_name": "__cfwr_calc848",
      "line_number": 29,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_item65)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Character, sub_type=None))",
      "features": [
        314.0,
        29.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_item65)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Character, sub_type=None)) | Line: 29 | Prev: Exit... | Next: Return(BinaryOperation(operand..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/__cfwr_aux198.json",
      "method_name": "__cfwr_aux198",
      "line_number": 56,
      "node_type": "",
      "node_label": "For(BinaryOperation(operandl=MemberReference(member=__cfwr_i1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), operator=<))",
      "features": [
        245.0,
        56.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: For(BinaryOperation(operandl=MemberReference(member=__cfwr_i1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), operator=<)) | Line: 56 | Prev: Exit... | Next: If(BinaryOperation(operandl=Li..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_util219.json",
      "method_name": "__cfwr_util219",
      "line_number": 40,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=>>), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=^), name=__cfwr_var35)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        556.0,
        40.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=>>), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=^), name=__cfwr_var35)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 40 | Prev: Exit... | Next: For(BinaryOperation(operandl=M..."
    },
    {
      "node_id": 9,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 10,
      "node_type": "",
      "node_label": "public static void method() throws IOException {",
      "features": [
        48.0,
        10.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: public static void method() throws IOException { | Line: 10 | Next: BufferedReader bufferedReader ..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/AndExample/getYearInfo.json",
      "method_name": "getYearInfo",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: Return(MemberReference(member=..."
    },
    {
      "node_id": 8,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/method3.json",
      "method_name": "method3",
      "line_number": 32,
      "node_type": "",
      "node_label": "Break",
      "features": [
        5.0,
        32.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Break | Line: 32 | Prev: LocalVariableDeclaration(annot... | Next: Catch(__cfwr_e21)..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SizeVsLength/__cfwr_temp581.json",
      "method_name": "__cfwr_temp581",
      "line_number": 27,
      "node_type": "",
      "node_label": "While(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true))",
      "features": [
        99.0,
        27.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: While(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true)) | Line: 27 | Prev: If(BinaryOperation(operandl=Bi... | Next: While(Literal(postfix_operator..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ArrayConstructionPositiveLength/ArrayConstructionPositiveLength.json",
      "method_name": "ArrayConstructionPositiveLength",
      "line_number": 4,
      "node_type": "",
      "node_label": "public class ArrayConstructionPositiveLength {",
      "features": [
        46.0,
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: public class ArrayConstructionPositiveLength { | Line: 4"
    },
    {
      "node_id": 34,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 35,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        35.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 35 | Prev: break; // Prevent infinite loo... | Next: } catch (Exception __cfwr_e67)..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanValue/__cfwr_func65.json",
      "method_name": "__cfwr_func65",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: If(BinaryOperation(operandl=Li..."
    },
    {
      "node_id": 30,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 31,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        31.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 31 | Prev: return null;... | Next: for (int __cfwr_i23 = 0; __cfw..."
    },
    {
      "node_id": 26,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 27,
      "node_type": "",
      "node_label": "return null;",
      "features": [
        12.0,
        27.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return null; | Line: 27 | Prev: for (int __cfwr_i32 = 0; __cfw... | Next: }..."
    },
    {
      "node_id": 57,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 58,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        58.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 58 | Prev: // ignore... | Next: } catch (Exception __cfwr_e98)..."
    },
    {
      "node_id": 62,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 63,
      "node_type": "",
      "node_label": "short __cfwr_item27 = null;",
      "features": [
        27.0,
        63.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: short __cfwr_item27 = null; | Line: 63 | Prev: if (((-17.80f ^ 4.27f) * null)... | Next: }..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LTLengthOfPostcondition/LTLengthOfPostcondition.json",
      "method_name": "LTLengthOfPostcondition",
      "line_number": 6,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.EnsuresLTLengthOfIf;",
      "features": [
        67.0,
        6.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.EnsuresLTLengthOfIf; | Line: 6 | Prev: import org.checkerframework.ch... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 60,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 61,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        61.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 61 | Prev: // ignore... | Next: if (((-17.80f ^ 4.27f) * null)..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroAdd/test.json",
      "method_name": "test",
      "line_number": 17,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+), name=c)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        559.0,
        17.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+), name=c)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 17 | Prev: Update(MemberReference(member=... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 49,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 50,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        50.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 50 | Prev: return null;... | Next: }..."
    },
    {
      "node_id": 10,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_util219.json",
      "method_name": "__cfwr_util219",
      "line_number": 48,
      "node_type": "",
      "node_label": "Update(MemberReference(member=__cfwr_i73, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[]))",
      "features": [
        115.0,
        48.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Update(MemberReference(member=__cfwr_i73, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])) | Line: 48 | Prev: LocalVariableDeclaration(annot... | Next: Return(Literal(postfix_operato..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_util409.json",
      "method_name": "__cfwr_util409",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: Return(Literal(postfix_operato..."
    },
    {
      "node_id": 31,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 32,
      "node_type": "",
      "node_label": "for (int __cfwr_i23 = 0; __cfwr_i23 < 5; __cfwr_i23++) {",
      "features": [
        56.0,
        32.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: for (int __cfwr_i23 = 0; __cfwr_i23 < 5; __cfwr_i23++) { | Line: 32 | Prev: }... | Next: return null;..."
    },
    {
      "node_id": 38,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 39,
      "node_type": "",
      "node_label": "} catch (Exception __cfwr_e16) {",
      "features": [
        32.0,
        39.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } catch (Exception __cfwr_e16) { | Line: 39 | Prev: }... | Next: // ignore..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/RefineGT/__cfwr_temp874.json",
      "method_name": "__cfwr_temp874",
      "line_number": null,
      "node_type": "",
      "node_label": "Entry",
      "features": [
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Entry | Next: Exit..."
    },
    {
      "node_id": 13,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 14,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        14.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 14 | Prev: bufferedReader.skip(1);... | Next: protected static float __cfwr_..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 6,
      "node_type": "",
      "node_label": "public class Polymorphic3 {",
      "features": [
        27.0,
        6.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: public class Polymorphic3 { | Line: 6"
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/__cfwr_temp661.json",
      "method_name": "__cfwr_temp661",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: Try..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/method3.json",
      "method_name": "method3",
      "line_number": 17,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), name=__cfwr_item28)], modifiers=set(), type=BasicType(dimensions=[], name=boolean))",
      "features": [
        278.0,
        17.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), name=__cfwr_item28)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)) | Line: 17 | Prev: While(Literal(postfix_operator... | Next: Break..."
    },
    {
      "node_id": 26,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 27,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        27.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 27 | Prev: return -1;... | Next: private Character __cfwr_handl..."
    },
    {
      "node_id": 14,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 15,
      "node_type": "",
      "node_label": "protected static float __cfwr_handle945(Float __cfwr_p0) {",
      "features": [
        58.0,
        15.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: protected static float __cfwr_handle945(Float __cfwr_p0) { | Line: 15 | Prev: }... | Next: for (int __cfwr_i36 = 0..."
    },
    {
      "node_id": 16,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 17,
      "node_type": "",
      "node_label": "if ((-75.81 * -79.30) && (-70.10f & (-46.42f * false))) {",
      "features": [
        57.0,
        17.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: if ((-75.81 * -79.30) && (-70.10f & (-46.42f * false))) { | Line: 17 | Prev: for (int __cfwr_i81 = 0; __cfw... | Next: byte __cfwr_node68 = null;..."
    },
    {
      "node_id": 10,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 11,
      "node_type": "",
      "node_label": "for (int __cfwr_i89 = 0; __cfwr_i89 < 8; __cfwr_i89++) {",
      "features": [
        56.0,
        11.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: for (int __cfwr_i89 = 0; __cfwr_i89 < 8; __cfwr_i89++) { | Line: 11 | Prev: try {... | Next: return null;..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 1,
      "node_type": "",
      "node_label": "/*",
      "features": [
        2.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: /* | Line: 1 | Next: * CFWR augmentation: inserted ..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SizeVsLength/__cfwr_temp581.json",
      "method_name": "__cfwr_temp581",
      "line_number": 26,
      "node_type": "",
      "node_label": "If(BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=96.80), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=%), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operator=||))",
      "features": [
        384.0,
        26.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: If(BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=96.80), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=%), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operator=||)) | Line: 26 | Prev: While(BinaryOperation(operandl... | Next: While(Literal(postfix_operator..."
    },
    {
      "node_id": 10,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 11,
      "node_type": "",
      "node_label": "BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));",
      "features": [
        85.0,
        11.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in)); | Line: 11 | Prev: public static void method() th... | Next: bufferedReader.skip(-1);..."
    },
    {
      "node_id": 52,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 53,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        53.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 53 | Prev: Boolean __cfwr_item31 = null;... | Next: }..."
    },
    {
      "node_id": 8,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroAdd/test.json",
      "method_name": "test",
      "line_number": 21,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=+), name=d)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        559.0,
        21.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=+), name=d)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 21 | Prev: LocalVariableDeclaration(annot... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 36,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 37,
      "node_type": "",
      "node_label": "int abi1 = identity(abi);",
      "features": [
        25.0,
        37.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: int abi1 = identity(abi); | Line: 37 | Prev: @LTLengthOf({ \"a\", \"b\" })... | Next: @LTLengthOf({ \"a\", \"b\", \"c\" })..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 5,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Line: 5 | Prev: import org.checkerframework.ch... | Next: public class Polymorphic3 {..."
    },
    {
      "node_id": 12,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 13,
      "node_type": "",
      "node_label": "for (int __cfwr_i31 = 0; __cfwr_i31 < 10; __cfwr_i31++) {",
      "features": [
        57.0,
        13.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: for (int __cfwr_i31 = 0; __cfwr_i31 < 10; __cfwr_i31++) { | Line: 13 | Prev: if (false && (-71.25f / (true ... | Next: return -58.79f;..."
    },
    {
      "node_id": 9,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 10,
      "node_type": "",
      "node_label": "try {",
      "features": [
        5.0,
        10.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: try { | Line: 10 | Prev: private void m(BitSet b) {... | Next: for (int __cfwr_i89 = 0; __cfw..."
    },
    {
      "node_id": 20,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 21,
      "node_type": "",
      "node_label": "static double __cfwr_compute51(String __cfwr_p0, Long __cfwr_p1, Boolean __cfwr_p2) {",
      "features": [
        85.0,
        21.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: static double __cfwr_compute51(String __cfwr_p0, Long __cfwr_p1, Boolean __cfwr_p2) { | Line: 21 | Prev: }... | Next: try {..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/__cfwr_temp213.json",
      "method_name": "__cfwr_temp213",
      "line_number": null,
      "node_type": "",
      "node_label": "Entry",
      "features": [
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Entry | Next: Exit..."
    },
    {
      "node_id": 64,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 65,
      "node_type": "",
      "node_label": "while (false) {",
      "features": [
        15.0,
        65.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: while (false) { | Line: 65 | Prev: for (int __cfwr_i14 = 0; __cfw... | Next: for (int __cfwr_i59 = 0; __cfw..."
    },
    {
      "node_id": 41,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 42,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        42.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 42 | Prev: return null;... | Next: public static Boolean __cfwr_h..."
    },
    {
      "node_id": 13,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/__cfwr_temp661.json",
      "method_name": "__cfwr_temp661",
      "line_number": 60,
      "node_type": "",
      "node_label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null))",
      "features": [
        100.0,
        60.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null)) | Line: 60 | Prev: Break..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 17,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-), name=c)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        559.0,
        17.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-), name=c)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 17 | Prev: Update(MemberReference(member=... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 12,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 27,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTEqLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), name=j)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        418.0,
        27.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTEqLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), name=j)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 27 | Prev: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_util219.json",
      "method_name": "__cfwr_util219",
      "line_number": 51,
      "node_type": "",
      "node_label": "Break",
      "features": [
        5.0,
        51.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Break | Line: 51 | Prev: LocalVariableDeclaration(annot... | Next: Update(MemberReference(member=..."
    },
    {
      "node_id": 70,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 71,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        71.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 71 | Prev: }... | Next: if (true || (-70.69 << -96.74f..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanValue/__cfwr_handle768.json",
      "method_name": "__cfwr_handle768",
      "line_number": null,
      "node_type": "",
      "node_label": "Entry",
      "features": [
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Entry | Next: Exit..."
    },
    {
      "node_id": 22,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/MinLenIndexFor/MinLenIndexFor.json",
      "method_name": "MinLenIndexFor",
      "line_number": 23,
      "node_type": "",
      "node_label": "test(arrayLen2.length - 1);",
      "features": [
        27.0,
        23.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: test(arrayLen2.length - 1); | Line: 23 | Prev: test(3);... | Next: }..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/UBLiteralFlow/UBLiteralFlow.json",
      "method_name": "UBLiteralFlow",
      "line_number": 6,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.LTLengthOf;",
      "features": [
        58.0,
        6.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.LTLengthOf; | Line: 6 | Prev: import org.checkerframework.ch..."
    },
    {
      "node_id": 45,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 46,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        46.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 46 | Prev: // ignore... | Next: return null;..."
    },
    {
      "node_id": 30,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 31,
      "node_type": "",
      "node_label": "int al2 = ide",
      "features": [
        13.0,
        31.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: int al2 = ide | Line: 31 | Prev: @LTLengthOf(\"a\")... | Next: if (false || true) {..."
    },
    {
      "node_id": 20,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 21,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        21.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 21 | Prev: // ignore..."
    },
    {
      "node_id": 68,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 69,
      "node_type": "",
      "node_label": "break; // Prevent infinite loops",
      "features": [
        32.0,
        69.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: break; // Prevent infinite loops | Line: 69 | Prev: }... | Next: }..."
    },
    {
      "node_id": 46,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 47,
      "node_type": "",
      "node_label": "try {",
      "features": [
        5.0,
        47.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: try { | Line: 47 | Prev: Object __cfwr_val3 = null;... | Next: try {..."
    },
    {
      "node_id": 31,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 32,
      "node_type": "",
      "node_label": "if (false || true) {",
      "features": [
        20.0,
        32.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: if (false || true) { | Line: 32 | Prev: int al2 = ide... | Next: float __cfwr_val15 = (true & n..."
    },
    {
      "node_id": 28,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 29,
      "node_type": "",
      "node_label": "if ((-647 << (-4.43 << true)) || (null * 'A')) {",
      "features": [
        48.0,
        29.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: if ((-647 << (-4.43 << true)) || (null * 'A')) { | Line: 29 | Prev: private Character __cfwr_handl... | Next: return null;..."
    },
    {
      "node_id": 47,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 48,
      "node_type": "",
      "node_label": "while (true) {",
      "features": [
        14.0,
        48.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: while (true) { | Line: 48 | Prev: if (true && false) {... | Next: if (false && true) {..."
    },
    {
      "node_id": 30,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 31,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        31.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 31 | Prev: // ignore... | Next: }..."
    },
    {
      "node_id": 56,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 57,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        57.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 57 | Prev: }... | Next: } catch (Exception __cfwr_e80)..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/test.json",
      "method_name": "test",
      "line_number": 13,
      "node_type": "",
      "node_label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null))",
      "features": [
        100.0,
        13.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null)) | Line: 13 | Prev: Try... | Next: Catch(__cfwr_e59)..."
    },
    {
      "node_id": 60,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 61,
      "node_type": "",
      "node_label": "break; // Prevent infinite loops",
      "features": [
        32.0,
        61.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: break; // Prevent infinite loops | Line: 61 | Prev: }... | Next: }..."
    },
    {
      "node_id": 27,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 28,
      "node_type": "",
      "node_label": "@LTEqLengthOf(\"a\")",
      "features": [
        18.0,
        28.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: @LTEqLengthOf(\"a\") | Line: 28 | Prev: int ai2 = identity(ai);... | Next: int al1 = identity(al);..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_compute793.json",
      "method_name": "__cfwr_compute793",
      "line_number": 32,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_val81)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Boolean, sub_type=None))",
      "features": [
        311.0,
        32.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_val81)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Boolean, sub_type=None)) | Line: 32 | Prev: While(Literal(postfix_operator... | Next: Break..."
    },
    {
      "node_id": 25,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 26,
      "node_type": "",
      "node_label": "return -1;",
      "features": [
        10.0,
        26.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return -1; | Line: 26 | Prev: }... | Next: }..."
    },
    {
      "node_id": 37,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 38,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        38.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 38 | Prev: // ignore... | Next: } catch (Exception __cfwr_e16)..."
    },
    {
      "node_id": 32,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 33,
      "node_type": "",
      "node_label": "try {",
      "features": [
        5.0,
        33.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: try { | Line: 33 | Prev: if (true || (false << 87.40)) ... | Next: for (int __cfwr_i65 = 0; __cfw..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_compute793.json",
      "method_name": "__cfwr_compute793",
      "line_number": null,
      "node_type": "",
      "node_label": "Entry",
      "features": [
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Entry | Next: Exit..."
    },
    {
      "node_id": 13,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Index176/test.json",
      "method_name": "test",
      "line_number": 30,
      "node_type": "",
      "node_label": "Throw(ClassCreator(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Malformed arglist: \"), operandr=MemberReference(member=arglist, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Error, sub_type=None)))",
      "features": [
        488.0,
        30.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: Throw(ClassCreator(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Malformed arglist: \"), operandr=MemberReference(member=arglist, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Error, sub_type=None))) | Line: 30 | Prev: If(BinaryOperation(operandl=Me... | Next: MethodInvocation(arguments=[Me..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/main.json",
      "method_name": "main",
      "line_number": 19,
      "node_type": "",
      "node_label": "MethodInvocation(arguments=[MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5)], member=read, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)",
      "features": [
        409.0,
        19.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: MethodInvocation(arguments=[MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5)], member=read, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None) | Line: 19 | Prev: MethodInvocation(arguments=[Me... | Next: MethodInvocation(arguments=[Me..."
    },
    {
      "node_id": 32,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 33,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        33.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 33 | Prev: }... | Next: break; // Prevent infinite loo..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic/Polymorphic.json",
      "method_name": "Polymorphic",
      "line_number": 5,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.LTEqLengthOf;",
      "features": [
        60.0,
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.LTEqLengthOf; | Line: 5 | Prev: import org.checkerframework.ch... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 27,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 28,
      "node_type": "",
      "node_label": "@GTENegativeOne",
      "features": [
        15.0,
        28.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: @GTENegativeOne | Line: 28 | Prev: int j = b.previousClearBit(-1)... | Next: int k = b.previousSetBit(-1);..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/method3.json",
      "method_name": "method3",
      "line_number": 16,
      "node_type": "",
      "node_label": "While(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false))",
      "features": [
        100.0,
        16.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: While(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false)) | Line: 16 | Prev: If(BinaryOperation(operandl=Li... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 42,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 43,
      "node_type": "",
      "node_label": "float __cfwr_data97 = -45.13f;",
      "features": [
        30.0,
        43.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: float __cfwr_data97 = -45.13f; | Line: 43 | Prev: try {... | Next: } catch (Exception __cfwr_e43)..."
    },
    {
      "node_id": 8,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 9,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        9.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Line: 9 | Prev: public class LessThanDec {... | Next: @IndexOrLow(\"#1\")..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/__cfwr_temp661.json",
      "method_name": "__cfwr_temp661",
      "line_number": 50,
      "node_type": "",
      "node_label": "If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operandr=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=95.56f), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=>>), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=%), operator=&&))",
      "features": [
        527.0,
        50.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operandr=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=95.56f), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=>>), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=%), operator=&&)) | Line: 50 | Prev: LocalVariableDeclaration(annot... | Next: While(BinaryOperation(operandl..."
    },
    {
      "node_id": 21,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 22,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        22.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 22 | Prev: }... | Next: private Integer __cfwr_compute..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/main.json",
      "method_name": "main",
      "line_number": 18,
      "node_type": "",
      "node_label": "MethodInvocation(arguments=[MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4)], member=read, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)",
      "features": [
        409.0,
        18.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: MethodInvocation(arguments=[MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4)], member=read, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None) | Line: 18 | Prev: LocalVariableDeclaration(annot... | Next: MethodInvocation(arguments=[Me..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic/Polymorphic.json",
      "method_name": "Polymorphic",
      "line_number": 6,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.LTLengthOf;",
      "features": [
        58.0,
        6.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.LTLengthOf; | Line: 6 | Prev: import org.checkerframework.ch... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 51,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 52,
      "node_type": "",
      "node_label": "Boolean __cfwr_item31 = null;",
      "features": [
        29.0,
        52.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Boolean __cfwr_item31 = null; | Line: 52 | Prev: for (int __cfwr_i99 = 0; __cfw... | Next: }..."
    },
    {
      "node_id": 28,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 29,
      "node_type": "",
      "node_label": "} catch (Exception __cfwr_e85) {",
      "features": [
        32.0,
        29.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } catch (Exception __cfwr_e85) { | Line: 29 | Prev: return 8.48;... | Next: // ignore..."
    },
    {
      "node_id": 38,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 39,
      "node_type": "",
      "node_label": "int abi2 = identity(abi);",
      "features": [
        25.0,
        39.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: int abi2 = identity(abi); | Line: 39 | Prev: @LTLengthOf({ \"a\", \"b\", \"c\" })... | Next: @LTEqLengthOf({ \"a\", \"b\" })..."
    },
    {
      "node_id": 44,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 45,
      "node_type": "",
      "node_label": "while (true) {",
      "features": [
        14.0,
        45.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: while (true) { | Line: 45 | Prev: for (int __cfwr_i30 = 0; __cfw... | Next: try {..."
    },
    {
      "node_id": 60,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 61,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        61.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 61 | Prev: return \"temp25\";... | Next: }..."
    },
    {
      "node_id": 57,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 58,
      "node_type": "",
      "node_label": "break; // Prevent infinite loops",
      "features": [
        32.0,
        58.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: break; // Prevent infinite loops | Line: 58 | Prev: }... | Next: }..."
    },
    {
      "node_id": 37,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 38,
      "node_type": "",
      "node_label": "// ignore",
      "features": [
        9.0,
        38.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: // ignore | Line: 38 | Prev: } catch (Exception __cfwr_e8) ... | Next: }..."
    },
    {
      "node_id": 12,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 13,
      "node_type": "",
      "node_label": "public class StringLength {",
      "features": [
        27.0,
        13.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: public class StringLength { | Line: 13"
    },
    {
      "node_id": 10,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/method3.json",
      "method_name": "method3",
      "line_number": null,
      "node_type": "",
      "node_label": "Catch(__cfwr_e61)",
      "features": [
        17.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Catch(__cfwr_e61) | Prev: Catch(__cfwr_e21)... | Next: Assignment(expressionl=This(po..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/main.json",
      "method_name": "main",
      "line_number": 11,
      "node_type": "",
      "node_label": "If(BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=367L), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=404L), operator=>>), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=||))",
      "features": [
        380.0,
        11.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: If(BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=367L), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=404L), operator=>>), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=||)) | Line: 11 | Prev: Exit... | Next: If(BinaryOperation(operandl=Li..."
    },
    {
      "node_id": 70,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 71,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        71.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 71 | Prev: // ignore... | Next: break; // Prevent infinite loo..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanValue/__cfwr_aux173.json",
      "method_name": "__cfwr_aux173",
      "line_number": null,
      "node_type": "",
      "node_label": "Entry",
      "features": [
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Entry | Next: Exit..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 7,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.LTLengthOf;",
      "features": [
        58.0,
        7.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.LTLengthOf; | Line: 7 | Prev: import org.checkerframework.ch... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 49,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 50,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        50.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 50 | Prev: return -85.75;... | Next: protected static String __cfwr..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/method3.json",
      "method_name": "method3",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: While(Literal(postfix_operator..."
    },
    {
      "node_id": 24,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 25,
      "node_type": "",
      "node_label": "if (true && ((-424L + 705L) * -829L)) {",
      "features": [
        39.0,
        25.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: if (true && ((-424L + 705L) * -829L)) { | Line: 25 | Prev: Object __cfwr_temp98 = null;... | Next: for (int __cfwr_i32 = 0; __cfw..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/RefineLTE/RefineLTE.json",
      "method_name": "RefineLTE",
      "line_number": 4,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.LTEqLengthOf;",
      "features": [
        60.0,
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.LTEqLengthOf; | Line: 4 | Prev: */... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 43,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 44,
      "node_type": "",
      "node_label": "for (int __cfwr_i30 = 0; __cfwr_i30 < 10; __cfwr_i30++) {",
      "features": [
        57.0,
        44.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: for (int __cfwr_i30 = 0; __cfwr_i30 < 10; __cfwr_i30++) { | Line: 44 | Prev: public static Boolean __cfwr_h... | Next: while (true) {..."
    },
    {
      "node_id": 30,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 31,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        31.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 31 | Prev: return null;... | Next: }..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/method3.json",
      "method_name": "method3",
      "line_number": 12,
      "node_type": "",
      "node_label": "If(BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=177), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=100L), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=694), operator=|), operator=<<), operandr=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='W'), operator=-), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=-), operator=||))",
      "features": [
        803.0,
        12.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: If(BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=177), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=100L), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=694), operator=|), operator=<<), operandr=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='W'), operator=-), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=-), operator=||)) | Line: 12 | Prev: Try... | Next: If(BinaryOperation(operandl=Li..."
    },
    {
      "node_id": 52,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 53,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        53.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 53 | Prev: break; // Prevent infinite loo... | Next: }..."
    },
    {
      "node_id": 10,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroAdd/test.json",
      "method_name": "test",
      "line_number": 25,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), operator=+), name=f)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        559.0,
        25.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), operator=+), name=f)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 25 | Prev: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 25,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 26,
      "node_type": "",
      "node_label": "for (int __cfwr_i32 = 0; __cfwr_i32 < 8; __cfwr_i32++) {",
      "features": [
        56.0,
        26.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: for (int __cfwr_i32 = 0; __cfwr_i32 < 8; __cfwr_i32++) { | Line: 26 | Prev: if (true && ((-424L + 705L) * ... | Next: return null;..."
    },
    {
      "node_id": 17,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 18,
      "node_type": "",
      "node_label": "for (int __cfwr_i90 = 0; __cfwr_i90 < 1; __cfwr_i90++) {",
      "features": [
        56.0,
        18.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: for (int __cfwr_i90 = 0; __cfwr_i90 < 1; __cfwr_i90++) { | Line: 18 | Prev: if (false || (-13.19 - 757L)) ... | Next: return 141;..."
    },
    {
      "node_id": 33,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 34,
      "node_type": "",
      "node_label": "for (int __cfwr_i65 = 0; __cfwr_i65 < 9; __cfwr_i65++) {",
      "features": [
        56.0,
        34.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: for (int __cfwr_i65 = 0; __cfwr_i65 < 9; __cfwr_i65++) { | Line: 34 | Prev: try {... | Next: return -29.39f;..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_util219.json",
      "method_name": "__cfwr_util219",
      "line_number": 47,
      "node_type": "",
      "node_label": "While(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false))",
      "features": [
        100.0,
        47.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: While(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false)) | Line: 47 | Prev: For(BinaryOperation(operandl=M... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/__cfwr_temp661.json",
      "method_name": "__cfwr_temp661",
      "line_number": null,
      "node_type": "",
      "node_label": "Entry",
      "features": [
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Entry | Next: Exit..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanValue/__cfwr_handle768.json",
      "method_name": "__cfwr_handle768",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: While(BinaryOperation(operandl..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanLen/m5.json",
      "method_name": "m5",
      "line_number": 15,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=shorter, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=1), operator=*)], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)), name=longer)], modifiers=set(), type=BasicType(dimensions=[None], name=int))",
      "features": [
        586.0,
        15.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=shorter, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=1), operator=*)], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)), name=longer)], modifiers=set(), type=BasicType(dimensions=[None], name=int)) | Line: 15 | Prev: Return(Literal(postfix_operato... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 12,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 13,
      "node_type": "",
      "node_label": "bufferedReader.skip(1);",
      "features": [
        23.0,
        13.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: bufferedReader.skip(1); | Line: 13 | Prev: bufferedReader.skip(-1);... | Next: }..."
    },
    {
      "node_id": 48,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 49,
      "node_type": "",
      "node_label": "return null;",
      "features": [
        12.0,
        49.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return null; | Line: 49 | Prev: }... | Next: }..."
    },
    {
      "node_id": 12,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/__cfwr_temp661.json",
      "method_name": "__cfwr_temp661",
      "line_number": 58,
      "node_type": "",
      "node_label": "Break",
      "features": [
        5.0,
        58.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Break | Line: 58 | Prev: LocalVariableDeclaration(annot... | Next: Return(Literal(postfix_operato..."
    },
    {
      "node_id": 76,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 77,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        77.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 77 | Prev: }..."
    },
    {
      "node_id": 47,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 48,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        48.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 48 | Prev: break; // Prevent infinite loo... | Next: return null;..."
    },
    {
      "node_id": 34,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 35,
      "node_type": "",
      "node_label": "return -29.39f;",
      "features": [
        15.0,
        35.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return -29.39f; | Line: 35 | Prev: for (int __cfwr_i65 = 0; __cfw... | Next: }..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetExample/OffsetExample.json",
      "method_name": "OffsetExample",
      "line_number": 4,
      "node_type": "",
      "node_label": "import java.util.List;",
      "features": [
        22.0,
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: import java.util.List; | Line: 4 | Prev: */... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 31,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 32,
      "node_type": "",
      "node_label": "if (true || (false << 87.40)) {",
      "features": [
        31.0,
        32.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: if (true || (false << 87.40)) { | Line: 32 | Prev: private Double __cfwr_process3... | Next: try {..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 5,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Line: 5 | Prev: import org.checkerframework.co... | Next: public class GreaterThanOrEqua..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/RefineGT/testLTEL.json",
      "method_name": "testLTEL",
      "line_number": 10,
      "node_type": "",
      "node_label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null))",
      "features": [
        100.0,
        10.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null)) | Line: 10 | Prev: Exit..."
    },
    {
      "node_id": 39,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 40,
      "node_type": "",
      "node_label": "@LTEqLengthOf({ \"a\", \"b\" })",
      "features": [
        27.0,
        40.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: @LTEqLengthOf({ \"a\", \"b\" }) | Line: 40 | Prev: int abi2 = identity(abi);... | Next: int abl1 = identity(abl);..."
    },
    {
      "node_id": 28,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 29,
      "node_type": "",
      "node_label": "for (int __cfwr_i32 = 0; __cfwr_i32 < 8; __cfwr_i32++) {",
      "features": [
        56.0,
        29.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: for (int __cfwr_i32 = 0; __cfwr_i32 < 8; __cfwr_i32++) { | Line: 29 | Prev: if (((true >> -33L) / null) ||... | Next: return null;..."
    },
    {
      "node_id": 37,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 38,
      "node_type": "",
      "node_label": "break; // Prevent infinite loops",
      "features": [
        32.0,
        38.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: break; // Prevent infinite loops | Line: 38 | Prev: byte __cfwr_data20 = ((-436L /... | Next: }..."
    },
    {
      "node_id": 11,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LTLDivide/test2.json",
      "method_name": "test2",
      "line_number": 26,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"array\"), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=lenP1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=/), name=w)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        537.0,
        26.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"array\"), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=lenP1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=/), name=w)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 26 | Prev: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 15,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 16,
      "node_type": "",
      "node_label": "Long __cfwr_entry83 = null;",
      "features": [
        27.0,
        16.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Long __cfwr_entry83 = null; | Line: 16 | Prev: void testNewArraySameLen(Strin..."
    },
    {
      "node_id": 41,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 42,
      "node_type": "",
      "node_label": "@LTEqLengthOf({ \"a\", \"b\", \"c\" })",
      "features": [
        32.0,
        42.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: @LTEqLengthOf({ \"a\", \"b\", \"c\" }) | Line: 42 | Prev: int abl1 = identity(abl);... | Next: int abl2 = identity(abl);..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 7,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        7.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Line: 7 | Prev: public class Polymorphic3 {... | Next: void ubc_id(int[] a, int[] b, ..."
    },
    {
      "node_id": 9,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 10,
      "node_type": "",
      "node_label": "if (true || true) {",
      "features": [
        19.0,
        10.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: if (true || true) { | Line: 10 | Prev: try {... | Next: for (int __cfwr_i40 = 0; __cfw..."
    },
    {
      "node_id": 59,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 60,
      "node_type": "",
      "node_label": "return \"temp25\";",
      "features": [
        16.0,
        60.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return \"temp25\"; | Line: 60 | Prev: }... | Next: }..."
    },
    {
      "node_id": 24,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 25,
      "node_type": "",
      "node_label": "if (false && true) {",
      "features": [
        20.0,
        25.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: if (false && true) { | Line: 25 | Prev: while (true) {... | Next: for (int __cfwr_i82 = 0; __cfw..."
    },
    {
      "node_id": 43,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 44,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        44.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 44 | Prev: int abl2 = identity(abl);... | Next: protected static Long __cfwr_h..."
    },
    {
      "node_id": 22,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 23,
      "node_type": "",
      "node_label": "int[] c;",
      "features": [
        8.0,
        23.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: int[] c; | Line: 23 | Next: @LTLengthOf(\"a\")..."
    },
    {
      "node_id": 15,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 16,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        16.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 16 | Prev: }... | Next: }..."
    },
    {
      "node_id": 25,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 26,
      "node_type": "",
      "node_label": "@LTLengthOf(\"b\")",
      "features": [
        16.0,
        26.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: @LTLengthOf(\"b\") | Line: 26 | Prev: int ai1 = identity(ai);... | Next: int ai2 = identity(ai);..."
    },
    {
      "node_id": 26,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 27,
      "node_type": "",
      "node_label": "try {",
      "features": [
        5.0,
        27.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: try { | Line: 27 | Prev: for (int __cfwr_i82 = 0; __cfw... | Next: return 8.48;..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanValue/__cfwr_aux173.json",
      "method_name": "__cfwr_aux173",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: Return(BinaryOperation(operand..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 1,
      "node_type": "",
      "node_label": "/*",
      "features": [
        2.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: /* | Line: 1 | Next: * CFWR augmentation: inserted ..."
    },
    {
      "node_id": 21,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 22,
      "node_type": "",
      "node_label": "try {",
      "features": [
        5.0,
        22.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: try { | Line: 22 | Prev: static double __cfwr_compute51... | Next: try {..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/__cfwr_temp661.json",
      "method_name": "__cfwr_temp661",
      "line_number": 48,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_var21)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Boolean, sub_type=None))",
      "features": [
        311.0,
        48.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_var21)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Boolean, sub_type=None)) | Line: 48 | Prev: Catch(__cfwr_e36)... | Next: If(BinaryOperation(operandl=Li..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_util409.json",
      "method_name": "__cfwr_util409",
      "line_number": null,
      "node_type": "",
      "node_label": "Entry",
      "features": [
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Entry | Next: Exit..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 2,
      "node_type": "",
      "node_label": "* CFWR augmentation: inserted irrelevant code for data augmentation.",
      "features": [
        68.0,
        2.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: * CFWR augmentation: inserted irrelevant code for data augmentation. | Line: 2 | Prev: /*... | Next: */..."
    },
    {
      "node_id": 66,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 67,
      "node_type": "",
      "node_label": "Long __cfwr_obj63 = null;",
      "features": [
        25.0,
        67.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Long __cfwr_obj63 = null; | Line: 67 | Prev: for (int __cfwr_i59 = 0; __cfw... | Next: }..."
    },
    {
      "node_id": 15,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 16,
      "node_type": "",
      "node_label": "for (int __cfwr_i36 = 0",
      "features": [
        23.0,
        16.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: for (int __cfwr_i36 = 0 | Line: 16 | Prev: protected static float __cfwr_... | Next: if (false || (-13.19 - 757L)) ..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 3,
      "node_type": "",
      "node_label": "*/",
      "features": [
        2.0,
        3.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: */ | Line: 3 | Prev: * CFWR augmentation: inserted ... | Next: import org.checkerframework.co..."
    },
    {
      "node_id": 49,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 50,
      "node_type": "",
      "node_label": "while (false) {",
      "features": [
        15.0,
        50.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: while (false) { | Line: 50 | Prev: if (false && true) {... | Next: return false;..."
    },
    {
      "node_id": 14,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 15,
      "node_type": "",
      "node_label": "for (int i = end",
      "features": [
        16.0,
        15.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: for (int i = end | Line: 15 | Next: for (int __cfwr_i81 = 0; __cfw..."
    },
    {
      "node_id": 24,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 25,
      "node_type": "",
      "node_label": "Object __cfwr_temp24 = null;",
      "features": [
        28.0,
        25.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Object __cfwr_temp24 = null; | Line: 25 | Prev: if ((78L % -8) && false) {... | Next: }..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_util409.json",
      "method_name": "__cfwr_util409",
      "line_number": 56,
      "node_type": "",
      "node_label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false))",
      "features": [
        101.0,
        56.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false)) | Line: 56 | Prev: Exit..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/__cfwr_aux198.json",
      "method_name": "__cfwr_aux198",
      "line_number": 61,
      "node_type": "",
      "node_label": "Break",
      "features": [
        5.0,
        61.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Break | Line: 61 | Prev: LocalVariableDeclaration(annot... | Next: Update(MemberReference(member=..."
    },
    {
      "node_id": 29,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 30,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        30.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 30 | Prev: int k = b.previousSetBit(-1);... | Next: private Double __cfwr_process3..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanValue/__cfwr_handle768.json",
      "method_name": "__cfwr_handle768",
      "line_number": 48,
      "node_type": "",
      "node_label": "While(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=852), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=46.63), operator=^))",
      "features": [
        243.0,
        48.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: While(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=852), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=46.63), operator=^)) | Line: 48 | Prev: Exit... | Next: Return(Literal(postfix_operato..."
    },
    {
      "node_id": 11,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 12,
      "node_type": "",
      "node_label": "return null;",
      "features": [
        12.0,
        12.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return null; | Line: 12 | Prev: for (int __cfwr_i89 = 0; __cfw... | Next: }..."
    },
    {
      "node_id": 16,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 17,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        17.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 17 | Prev: }... | Next: }..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 8,
      "node_type": "",
      "node_label": "public class LessThanDec {",
      "features": [
        26.0,
        8.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: public class LessThanDec { | Line: 8"
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SizeVsLength/getArray.json",
      "method_name": "getArray",
      "line_number": 18,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)), name=values)], modifiers=set(), type=BasicType(dimensions=[None], name=int))",
      "features": [
        436.0,
        18.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)), name=values)], modifiers=set(), type=BasicType(dimensions=[None], name=int)) | Line: 18 | Prev: Return(Literal(postfix_operato... | Next: For(BinaryOperation(operandl=M..."
    },
    {
      "node_id": 40,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 41,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        41.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 41 | Prev: // ignore... | Next: try {..."
    },
    {
      "node_id": 17,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 18,
      "node_type": "",
      "node_label": "b.set(b.nextClearBit(0));",
      "features": [
        25.0,
        18.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: b.set(b.nextClearBit(0)); | Line: 18 | Next: b.clear(b.nextSetBit(0));..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/RefineGT/__cfwr_temp874.json",
      "method_name": "__cfwr_temp874",
      "line_number": 59,
      "node_type": "",
      "node_label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='O'))",
      "features": [
        99.0,
        59.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='O')) | Line: 59 | Prev: Exit..."
    },
    {
      "node_id": 19,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 20,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        20.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 20 | Prev: }... | Next: - 1; i >= start; i--) {..."
    },
    {
      "node_id": 67,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 68,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        68.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 68 | Prev: Long __cfwr_obj63 = null;... | Next: break; // Prevent infinite loo..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/test.json",
      "method_name": "test",
      "line_number": null,
      "node_type": "",
      "node_label": "Catch(__cfwr_e59)",
      "features": [
        17.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Catch(__cfwr_e59) | Prev: Return(Literal(postfix_operato... | Next: If(BinaryOperation(operandl=Me..."
    },
    {
      "node_id": 9,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexForTestLBC/callTest1.json",
      "method_name": "callTest1",
      "line_number": 61,
      "node_type": "",
      "node_label": "If(BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===))",
      "features": [
        252.0,
        61.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: If(BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[]), operandr=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)) | Line: 61 | Prev: MethodInvocation(arguments=[Me..."
    },
    {
      "node_id": 12,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LengthOfArrayMinusOne/test.json",
      "method_name": "test",
      "line_number": 22,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=arr, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-))]), name=j)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        526.0,
        22.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 1.0,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=arr, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-))]), name=j)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 22 | Prev: If(BinaryOperation(operandl=Me..."
    },
    {
      "node_id": 69,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 70,
      "node_type": "",
      "node_label": "// ignore",
      "features": [
        9.0,
        70.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: // ignore | Line: 70 | Prev: } catch (Exception __cfwr_e44)... | Next: }..."
    },
    {
      "node_id": 25,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 26,
      "node_type": "",
      "node_label": "while ((null >> 269)) {",
      "features": [
        23.0,
        26.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: while ((null >> 269)) { | Line: 26 | Next: for (int __cfwr_i47 = 0; __cfw..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanValue/foo.json",
      "method_name": "foo",
      "line_number": 18,
      "node_type": "",
      "node_label": "Throw(ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=RuntimeException, sub_type=None)))",
      "features": [
        241.0,
        18.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Throw(ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=RuntimeException, sub_type=None))) | Line: 18 | Prev: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 13,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 14,
      "node_type": "",
      "node_label": "return -58.79f;",
      "features": [
        15.0,
        14.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return -58.79f; | Line: 14 | Prev: for (int __cfwr_i31 = 0; __cfw... | Next: }..."
    },
    {
      "node_id": 38,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 39,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        39.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 39 | Prev: break; // Prevent infinite loo... | Next: return (('F' & 24.74) % true);..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 10,
      "node_type": "",
      "node_label": "For(BinaryOperation(operandl=MemberReference(member=__cfwr_i87, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), operator=<))",
      "features": [
        246.0,
        10.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: For(BinaryOperation(operandl=MemberReference(member=__cfwr_i87, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), operator=<)) | Line: 10 | Prev: Exit... | Next: For(BinaryOperation(operandl=M..."
    },
    {
      "node_id": 23,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 24,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        24.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 24 | Prev: return (null << -2.62);..."
    },
    {
      "node_id": 11,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/method3.json",
      "method_name": "method3",
      "line_number": 35,
      "node_type": "",
      "node_label": "Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=size, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))",
      "features": [
        321.0,
        35.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=size, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])) | Line: 35 | Prev: Catch(__cfwr_e61)... | Next: Assignment(expressionl=This(po..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/__cfwr_aux198.json",
      "method_name": "__cfwr_aux198",
      "line_number": 59,
      "node_type": "",
      "node_label": "While(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='W'), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=589), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=55.73f), operator=>>), operator=+))",
      "features": [
        385.0,
        59.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: While(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='W'), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=589), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=55.73f), operator=>>), operator=+)) | Line: 59 | Prev: If(BinaryOperation(operandl=Li... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 38,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 39,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        39.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 39 | Prev: break; // Prevent infinite loo... | Next: }..."
    },
    {
      "node_id": 34,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 35,
      "node_type": "",
      "node_label": "if (true || false) {",
      "features": [
        20.0,
        35.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: if (true || false) { | Line: 35 | Prev: }... | Next: while (true) {..."
    },
    {
      "node_id": 11,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 12,
      "node_type": "",
      "node_label": "if (false && (-71.25f / (true & null))) {",
      "features": [
        41.0,
        12.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: if (false && (-71.25f / (true & null))) { | Line: 12 | Prev: for (int __cfwr_i40 = 0; __cfw... | Next: for (int __cfwr_i31 = 0; __cfw..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/method3.json",
      "method_name": "method3",
      "line_number": 14,
      "node_type": "",
      "node_label": "Try",
      "features": [
        3.0,
        14.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Try | Line: 14 | Prev: While(Literal(postfix_operator... | Next: If(BinaryOperation(operandl=Bi..."
    },
    {
      "node_id": 31,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 32,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        32.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 32 | Prev: }... | Next: }..."
    },
    {
      "node_id": 9,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LTLDivide/test2.json",
      "method_name": "test2",
      "line_number": 22,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"array\"), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=lenM1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), operator=/), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        537.0,
        22.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"array\"), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=lenM1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), operator=/), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 22 | Prev: LocalVariableDeclaration(annot... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 65,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 66,
      "node_type": "",
      "node_label": "for (int __cfwr_i59 = 0; __cfwr_i59 < 6; __cfwr_i59++) {",
      "features": [
        56.0,
        66.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: for (int __cfwr_i59 = 0; __cfwr_i59 < 6; __cfwr_i59++) { | Line: 66 | Prev: while (false) {... | Next: Long __cfwr_obj63 = null;..."
    },
    {
      "node_id": 48,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 49,
      "node_type": "",
      "node_label": "return -85.75;",
      "features": [
        14.0,
        49.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return -85.75; | Line: 49 | Prev: return null;... | Next: }..."
    },
    {
      "node_id": 14,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 15,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        15.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 15 | Prev: return -58.79f;... | Next: }..."
    },
    {
      "node_id": 17,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 18,
      "node_type": "",
      "node_label": "int @SameLen(\"s\") [] array = new int[s.length()];",
      "features": [
        49.0,
        18.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: int @SameLen(\"s\") [] array = new int[s.length()]; | Line: 18 | Next: int @SameLen(\"s\") [] array1 = ..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/UBPoly/UBPoly.json",
      "method_name": "UBPoly",
      "line_number": 4,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.LTLengthOf;",
      "features": [
        58.0,
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.LTLengthOf; | Line: 4 | Prev: */... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 42,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 43,
      "node_type": "",
      "node_label": "return true;",
      "features": [
        12.0,
        43.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return true; | Line: 43 | Prev: try {... | Next: } catch (Exception __cfwr_e34)..."
    },
    {
      "node_id": 40,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 41,
      "node_type": "",
      "node_label": "return null;",
      "features": [
        12.0,
        41.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return null; | Line: 41 | Prev: }... | Next: }..."
    },
    {
      "node_id": 73,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 74,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        74.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 74 | Prev: return 'I';... | Next: return null;..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_compute793.json",
      "method_name": "__cfwr_compute793",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: While(Literal(postfix_operator..."
    },
    {
      "node_id": 56,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 57,
      "node_type": "",
      "node_label": "// ignore",
      "features": [
        9.0,
        57.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: // ignore | Line: 57 | Prev: } catch (Exception __cfwr_e14)... | Next: }..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 3,
      "node_type": "",
      "node_label": "*/",
      "features": [
        2.0,
        3.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: */ | Line: 3 | Prev: * CFWR augmentation: inserted ... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 19,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 20,
      "node_type": "",
      "node_label": "int @MinLen(2) [] b = a;",
      "features": [
        24.0,
        20.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: int @MinLen(2) [] b = a; | Line: 20 | Prev: if (a.length >= 1) {... | Next: }..."
    },
    {
      "node_id": 9,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/RefineNeqLength/refineNeqLengthMTwoNonLiteral.json",
      "method_name": "refineNeqLengthMTwoNonLiteral",
      "line_number": 27,
      "node_type": "",
      "node_label": "If(BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[]), operandr=MemberReference(member=c23, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=!=))",
      "features": [
        397.0,
        27.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: If(BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[]), operandr=MemberReference(member=c23, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), operator=!=)) | Line: 27 | Prev: MethodInvocation(arguments=[Me..."
    },
    {
      "node_id": 20,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 21,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        21.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 21 | Prev: int @MinLen(2) [] b = a;... | Next: }..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 2,
      "node_type": "",
      "node_label": "* CFWR augmentation: inserted irrelevant code for data augmentation.",
      "features": [
        68.0,
        2.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: * CFWR augmentation: inserted irrelevant code for data augmentation. | Line: 2 | Prev: /*... | Next: */..."
    },
    {
      "node_id": 18,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 19,
      "node_type": "",
      "node_label": "} catch (Exception __cfwr_e18) {",
      "features": [
        32.0,
        19.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } catch (Exception __cfwr_e18) { | Line: 19 | Prev: }... | Next: // ignore..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_util219.json",
      "method_name": "__cfwr_util219",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 13,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 14,
      "node_type": "",
      "node_label": "} catch (Exception __cfwr_e60) {",
      "features": [
        32.0,
        14.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } catch (Exception __cfwr_e60) { | Line: 14 | Prev: }... | Next: // ignore..."
    },
    {
      "node_id": 53,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 54,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        54.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 54 | Prev: }... | Next: }..."
    },
    {
      "node_id": 14,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Index176/test.json",
      "method_name": "test",
      "line_number": 32,
      "node_type": "",
      "node_label": "MethodInvocation(arguments=[MemberReference(member=pos, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), BinaryOperation(operandl=MemberReference(member=semi_pos, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)], member=substring, postfix_operators=[], prefix_operators=[], qualifier=arglist, selectors=[], type_arguments=None)",
      "features": [
        482.0,
        32.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: MethodInvocation(arguments=[MemberReference(member=pos, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), BinaryOperation(operandl=MemberReference(member=semi_pos, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)], member=substring, postfix_operators=[], prefix_operators=[], qualifier=arglist, selectors=[], type_arguments=None) | Line: 32 | Prev: Throw(ClassCreator(arguments=[... | Next: MethodInvocation(arguments=[Me..."
    },
    {
      "node_id": 44,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 45,
      "node_type": "",
      "node_label": "protected static Long __cfwr_helper253(double __cfwr_p0, byte __cfwr_p1) {",
      "features": [
        74.0,
        45.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: protected static Long __cfwr_helper253(double __cfwr_p0, byte __cfwr_p1) { | Line: 45 | Prev: }... | Next: Object __cfwr_val3 = null;..."
    },
    {
      "node_id": 12,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 13,
      "node_type": "",
      "node_label": "return false;",
      "features": [
        13.0,
        13.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return false; | Line: 13 | Prev: private static int lastIndexOf..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 4,
      "node_type": "",
      "node_label": "import org.checkerframework.common.value.qual.MinLen;",
      "features": [
        53.0,
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: import org.checkerframework.common.value.qual.MinLen; | Line: 4 | Prev: */..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/RefineSubtrahend/withVariable.json",
      "method_name": "withVariable",
      "line_number": 9,
      "node_type": "",
      "node_label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null))",
      "features": [
        100.0,
        9.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null)) | Line: 9 | Prev: Exit..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/RefineSubtrahend/withVariable.json",
      "method_name": "withVariable",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: Return(Literal(postfix_operato..."
    },
    {
      "node_id": 47,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 48,
      "node_type": "",
      "node_label": "return null;",
      "features": [
        12.0,
        48.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return null; | Line: 48 | Prev: return null;... | Next: return -85.75;..."
    },
    {
      "node_id": 50,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 51,
      "node_type": "",
      "node_label": "protected static String __cfwr_handle409() {",
      "features": [
        44.0,
        51.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: protected static String __cfwr_handle409() { | Line: 51 | Prev: }... | Next: while ((-322L * (null ^ -579))..."
    },
    {
      "node_id": 59,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 60,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        60.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 60 | Prev: // ignore... | Next: break; // Prevent infinite loo..."
    },
    {
      "node_id": 58,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 59,
      "node_type": "",
      "node_label": "} catch (Exception __cfwr_e98) {",
      "features": [
        32.0,
        59.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } catch (Exception __cfwr_e98) { | Line: 59 | Prev: }... | Next: // ignore..."
    },
    {
      "node_id": 16,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 17,
      "node_type": "",
      "node_label": "if (false || (-13.19 - 757L)) {",
      "features": [
        31.0,
        17.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: if (false || (-13.19 - 757L)) { | Line: 17 | Prev: for (int __cfwr_i36 = 0... | Next: for (int __cfwr_i90 = 0; __cfw..."
    },
    {
      "node_id": 16,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 17,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        17.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Line: 17 | Prev: Long __cfwr_entry83 = null;... | Next: int @SameLen(\"s\") [] array = n..."
    },
    {
      "node_id": 41,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 42,
      "node_type": "",
      "node_label": "try {",
      "features": [
        5.0,
        42.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: try { | Line: 42 | Prev: }... | Next: float __cfwr_data97 = -45.13f;..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 7,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        7.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Line: 7 | Prev: public class GreaterThanOrEqua... | Next: void gte_bad_check(int[] a) {..."
    },
    {
      "node_id": 40,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 41,
      "node_type": "",
      "node_label": "int abl1 = identity(abl);",
      "features": [
        25.0,
        41.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: int abl1 = identity(abl); | Line: 41 | Prev: @LTEqLengthOf({ \"a\", \"b\" })... | Next: @LTEqLengthOf({ \"a\", \"b\", \"c\" ..."
    },
    {
      "node_id": 51,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 52,
      "node_type": "",
      "node_label": "while ((-322L * (null ^ -579))) {",
      "features": [
        33.0,
        52.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: while ((-322L * (null ^ -579))) { | Line: 52 | Prev: protected static String __cfwr... | Next: try {..."
    },
    {
      "node_id": 36,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 37,
      "node_type": "",
      "node_label": "Character __cfwr_item74 = null;",
      "features": [
        31.0,
        37.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Character __cfwr_item74 = null; | Line: 37 | Prev: while (true) {... | Next: break; // Prevent infinite loo..."
    },
    {
      "node_id": 55,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 56,
      "node_type": "",
      "node_label": "// ignore",
      "features": [
        9.0,
        56.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: // ignore | Line: 56 | Prev: } catch (Exception __cfwr_e59)... | Next: }..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_util219.json",
      "method_name": "__cfwr_util219",
      "line_number": 41,
      "node_type": "",
      "node_label": "Update(MemberReference(member=__cfwr_i25, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[]))",
      "features": [
        115.0,
        41.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Update(MemberReference(member=__cfwr_i25, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])) | Line: 41 | Prev: Break... | Next: For(BinaryOperation(operandl=M..."
    },
    {
      "node_id": 55,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 56,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        56.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 56 | Prev: break; // Prevent infinite loo... | Next: }..."
    },
    {
      "node_id": 54,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 55,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        55.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 55 | Prev: }... | Next: } catch (Exception __cfwr_e14)..."
    },
    {
      "node_id": 74,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 75,
      "node_type": "",
      "node_label": "return null;",
      "features": [
        12.0,
        75.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return null; | Line: 75 | Prev: }... | Next: }..."
    },
    {
      "node_id": 25,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 26,
      "node_type": "",
      "node_label": "for (int __cfwr_i82 = 0; __cfwr_i82 < 5; __cfwr_i82++) {",
      "features": [
        56.0,
        26.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: for (int __cfwr_i82 = 0; __cfwr_i82 < 5; __cfwr_i82++) { | Line: 26 | Prev: if (false && true) {... | Next: try {..."
    },
    {
      "node_id": 26,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 27,
      "node_type": "",
      "node_label": "for (int __cfwr_i47 = 0; __cfwr_i47 < 2; __cfwr_i47++) {",
      "features": [
        56.0,
        27.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: for (int __cfwr_i47 = 0; __cfwr_i47 < 2; __cfwr_i47++) { | Line: 27 | Prev: while ((null >> 269)) {... | Next: if (((true >> -33L) / null) ||..."
    },
    {
      "node_id": 40,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 41,
      "node_type": "",
      "node_label": "while (true) {",
      "features": [
        14.0,
        41.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: while (true) { | Line: 41 | Prev: }... | Next: try {..."
    },
    {
      "node_id": 41,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 42,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        42.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 42 | Prev: }..."
    },
    {
      "node_id": 73,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 74,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        74.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 74 | Prev: }... | Next: return null;..."
    },
    {
      "node_id": 27,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 28,
      "node_type": "",
      "node_label": "private Character __cfwr_handle447() {",
      "features": [
        38.0,
        28.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: private Character __cfwr_handle447() { | Line: 28 | Prev: }... | Next: if ((-647 << (-4.43 << true)) ..."
    },
    {
      "node_id": 71,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 72,
      "node_type": "",
      "node_label": "if (true || (-70.69 << -96.74f)) {",
      "features": [
        34.0,
        72.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: if (true || (-70.69 << -96.74f)) { | Line: 72 | Prev: }... | Next: return 'I';..."
    },
    {
      "node_id": 18,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 19,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        19.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 19 | Prev: byte __cfwr_node68 = null;... | Next: }..."
    },
    {
      "node_id": 18,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 19,
      "node_type": "",
      "node_label": "if (a.length >= 1) {",
      "features": [
        20.0,
        19.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: if (a.length >= 1) { | Line: 19 | Next: int @MinLen(2) [] b = a;..."
    },
    {
      "node_id": 59,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 60,
      "node_type": "",
      "node_label": "// ignore",
      "features": [
        9.0,
        60.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: // ignore | Line: 60 | Prev: } catch (Exception __cfwr_e98)... | Next: }..."
    },
    {
      "node_id": 20,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 21,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        21.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 21 | Prev: }... | Next: ; __cfwr_i36 < 2; __cfwr_i36++..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_util219.json",
      "method_name": "__cfwr_util219",
      "line_number": 43,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='5'), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7.50f), operator=&), name=__cfwr_var2)], modifiers=set(), type=BasicType(dimensions=[], name=double))",
      "features": [
        415.0,
        43.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='5'), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7.50f), operator=&), name=__cfwr_var2)], modifiers=set(), type=BasicType(dimensions=[], name=double)) | Line: 43 | Prev: While(Literal(postfix_operator... | Next: Break..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/test.json",
      "method_name": "test",
      "line_number": null,
      "node_type": "",
      "node_label": "Entry",
      "features": [
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Entry | Next: Exit..."
    },
    {
      "node_id": 33,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 34,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        34.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 34 | Prev: return null;... | Next: if (true || false) {..."
    },
    {
      "node_id": 16,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 17,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        17.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Line: 17 | Prev: }... | Next: b.set(b.nextClearBit(0));..."
    },
    {
      "node_id": 46,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 47,
      "node_type": "",
      "node_label": "break; // Prevent infinite loops",
      "features": [
        32.0,
        47.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: break; // Prevent infinite loops | Line: 47 | Prev: }... | Next: }..."
    },
    {
      "node_id": 67,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 68,
      "node_type": "",
      "node_label": "return null;",
      "features": [
        12.0,
        68.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return null; | Line: 68 | Prev: try {... | Next: } catch (Exception __cfwr_e44)..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/main.json",
      "method_name": "main",
      "line_number": 12,
      "node_type": "",
      "node_label": "If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=&&))",
      "features": [
        238.0,
        12.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=&&)) | Line: 12 | Prev: If(BinaryOperation(operandl=Bi... | Next: Return(Literal(postfix_operato..."
    },
    {
      "node_id": 40,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 41,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        41.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 41 | Prev: return (('F' & 24.74) % true);... | Next: }..."
    },
    {
      "node_id": 14,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 15,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        15.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 15 | Prev: // ignore... | Next: }..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/__cfwr_temp661.json",
      "method_name": "__cfwr_temp661",
      "line_number": 40,
      "node_type": "",
      "node_label": "Try",
      "features": [
        3.0,
        40.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Try | Line: 40 | Prev: Exit... | Next: If(BinaryOperation(operandl=Li..."
    },
    {
      "node_id": 50,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 51,
      "node_type": "",
      "node_label": "for (int __cfwr_i99 = 0; __cfwr_i99 < 9; __cfwr_i99++) {",
      "features": [
        56.0,
        51.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: for (int __cfwr_i99 = 0; __cfwr_i99 < 9; __cfwr_i99++) { | Line: 51 | Prev: for (int __cfwr_i22 = 0; __cfw... | Next: Boolean __cfwr_item31 = null;..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/main.json",
      "method_name": "main",
      "line_number": null,
      "node_type": "",
      "node_label": "Entry",
      "features": [
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Entry | Next: Exit..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 4,
      "node_type": "",
      "node_label": "import java.util.BitSet;",
      "features": [
        24.0,
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: import java.util.BitSet; | Line: 4 | Prev: */... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 72,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 73,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        73.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 73 | Prev: break; // Prevent infinite loo... | Next: }..."
    },
    {
      "node_id": 23,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 24,
      "node_type": "",
      "node_label": "while (true) {",
      "features": [
        14.0,
        24.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: while (true) { | Line: 24 | Prev: try {... | Next: if (false && true) {..."
    },
    {
      "node_id": 12,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 13,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        13.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 13 | Prev: return null;... | Next: } catch (Exception __cfwr_e60)..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/__cfwr_temp661.json",
      "method_name": "__cfwr_temp661",
      "line_number": 42,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_data82)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Character, sub_type=None))",
      "features": [
        314.0,
        42.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_data82)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Character, sub_type=None)) | Line: 42 | Prev: If(BinaryOperation(operandl=Li... | Next: Catch(__cfwr_e36)..."
    },
    {
      "node_id": 48,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 49,
      "node_type": "",
      "node_label": "if ((11.03f * -96.97) || false) {",
      "features": [
        33.0,
        49.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: if ((11.03f * -96.97) || false) { | Line: 49 | Prev: try {... | Next: for (int __cfwr_i22 = 0; __cfw..."
    },
    {
      "node_id": 54,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 55,
      "node_type": "",
      "node_label": "} catch (Exception __cfwr_e59) {",
      "features": [
        32.0,
        55.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } catch (Exception __cfwr_e59) { | Line: 55 | Prev: String __cfwr_temp30 = \"test57... | Next: // ignore..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 8,
      "node_type": "",
      "node_label": "void ubc_id(int[] a, int[] b, @LTLengthOf(\"#1\") int ai, @LTEqLengthOf(\"#1\") int al, @LTLengthOf({ \"#1\", \"#2\" }) int abi, @LTEqLengthOf({ \"#1\", \"#2\" }) int abl) {",
      "features": [
        161.0,
        8.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: void ubc_id(int[] a, int[] b, @LTLengthOf(\"#1\") int ai, @LTEqLengthOf(\"#1\") int al, @LTLengthOf({ \"#1\", \"#2\" }) int abi, @LTEqLengthOf({ \"#1\", \"#2\" }) int abl) { | Line: 8 | Next: try {..."
    },
    {
      "node_id": 16,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 17,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        17.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 17 | Prev: }..."
    },
    {
      "node_id": 49,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 50,
      "node_type": "",
      "node_label": "for (int __cfwr_i22 = 0; __cfwr_i22 < 5; __cfwr_i22++) {",
      "features": [
        56.0,
        50.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: for (int __cfwr_i22 = 0; __cfwr_i22 < 5; __cfwr_i22++) { | Line: 50 | Prev: if ((11.03f * -96.97) || false... | Next: for (int __cfwr_i99 = 0; __cfw..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LTLDivide/test2.json",
      "method_name": "test2",
      "line_number": 18,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+), name=lenP1)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        415.0,
        18.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+), name=lenP1)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 18 | Prev: LocalVariableDeclaration(annot... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_util219.json",
      "method_name": "__cfwr_util219",
      "line_number": null,
      "node_type": "",
      "node_label": "Entry",
      "features": [
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Entry | Next: Exit..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/RefineSubtrahend/__cfwr_calc848.json",
      "method_name": "__cfwr_calc848",
      "line_number": null,
      "node_type": "",
      "node_label": "Entry",
      "features": [
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Entry | Next: Exit..."
    },
    {
      "node_id": 39,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 40,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        40.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 40 | Prev: }... | Next: return null;..."
    },
    {
      "node_id": 55,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 56,
      "node_type": "",
      "node_label": "} catch (Exception __cfwr_e14) {",
      "features": [
        32.0,
        56.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } catch (Exception __cfwr_e14) { | Line: 56 | Prev: }... | Next: // ignore..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 6,
      "node_type": "",
      "node_label": "public class GreaterThanOrEqualTransfer {",
      "features": [
        41.0,
        6.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: public class GreaterThanOrEqualTransfer { | Line: 6"
    },
    {
      "node_id": 8,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 9,
      "node_type": "",
      "node_label": "for (int __cfwr_i43 = 0; __cfwr_i43 < 10; __cfwr_i43++) {",
      "features": [
        57.0,
        9.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: for (int __cfwr_i43 = 0; __cfwr_i43 < 10; __cfwr_i43++) { | Line: 9 | Prev: void gte_bad_check(int[] a) {... | Next: if (false || (null * -182)) {..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/__cfwr_aux198.json",
      "method_name": "__cfwr_aux198",
      "line_number": 60,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_entry27)], modifiers=set(), type=BasicType(dimensions=[], name=short))",
      "features": [
        276.0,
        60.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_entry27)], modifiers=set(), type=BasicType(dimensions=[], name=short)) | Line: 60 | Prev: While(BinaryOperation(operandl... | Next: Break..."
    },
    {
      "node_id": 68,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 69,
      "node_type": "",
      "node_label": "} catch (Exception __cfwr_e44) {",
      "features": [
        32.0,
        69.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } catch (Exception __cfwr_e44) { | Line: 69 | Prev: return null;... | Next: // ignore..."
    },
    {
      "node_id": 30,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 31,
      "node_type": "",
      "node_label": "private Double __cfwr_process321(Object __cfwr_p0, Object __cfwr_p1, double __cfwr_p2) {",
      "features": [
        88.0,
        31.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: private Double __cfwr_process321(Object __cfwr_p0, Object __cfwr_p1, double __cfwr_p2) { | Line: 31 | Prev: }... | Next: if (true || (false << 87.40)) ..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 4,
      "node_type": "",
      "node_label": "import java.io.BufferedReader;",
      "features": [
        30.0,
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: import java.io.BufferedReader; | Line: 4 | Prev: */... | Next: import java.io.IOException;..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 4,
      "node_type": "",
      "node_label": "import java.util.Random;",
      "features": [
        24.0,
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: import java.util.Random; | Line: 4 | Prev: */... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 18,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 19,
      "node_type": "",
      "node_label": "b.clear(b.nextSetBit(0));",
      "features": [
        25.0,
        19.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: b.clear(b.nextSetBit(0)); | Line: 19 | Prev: b.set(b.nextClearBit(0));... | Next: @GTENegativeOne..."
    },
    {
      "node_id": 10,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/test.json",
      "method_name": "test",
      "line_number": 27,
      "node_type": "",
      "node_label": "Assignment(expressionl=MemberReference(member=index, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[]))",
      "features": [
        242.0,
        27.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 1.0,
      "code_context": "Label: Assignment(expressionl=MemberReference(member=index, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[])) | Line: 27 | Prev: If(BinaryOperation(operandl=Me..."
    },
    {
      "node_id": 53,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 54,
      "node_type": "",
      "node_label": "String __cfwr_temp30 = \"test57\";",
      "features": [
        32.0,
        54.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: String __cfwr_temp30 = \"test57\"; | Line: 54 | Prev: try {... | Next: } catch (Exception __cfwr_e59)..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/__cfwr_temp213.json",
      "method_name": "__cfwr_temp213",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: Return(Literal(postfix_operato..."
    },
    {
      "node_id": 9,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/test.json",
      "method_name": "test",
      "line_number": 24,
      "node_type": "",
      "node_label": "If(BinaryOperation(operandl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[]), operator=<))",
      "features": [
        251.0,
        24.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: If(BinaryOperation(operandl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[]), operator=<)) | Line: 24 | Prev: Assignment(expressionl=MemberR... | Next: Assignment(expressionl=MemberR..."
    },
    {
      "node_id": 21,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic3/Polymorphic3.json",
      "method_name": "Polymorphic3",
      "line_number": 22,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        22.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Line: 22 | Prev: }... | Next: int[] c;..."
    },
    {
      "node_id": 32,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 33,
      "node_type": "",
      "node_label": "return null;",
      "features": [
        12.0,
        33.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return null; | Line: 33 | Prev: for (int __cfwr_i23 = 0; __cfw... | Next: }..."
    },
    {
      "node_id": 35,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 36,
      "node_type": "",
      "node_label": "while (true) {",
      "features": [
        14.0,
        36.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: while (true) { | Line: 36 | Prev: if (true || false) {... | Next: Character __cfwr_item74 = null..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_compute793.json",
      "method_name": "__cfwr_compute793",
      "line_number": 37,
      "node_type": "",
      "node_label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=538L))",
      "features": [
        100.0,
        37.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=538L)) | Line: 37 | Prev: Break..."
    },
    {
      "node_id": 24,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SkipBufferedReader/SkipBufferedReader.json",
      "method_name": "SkipBufferedReader",
      "line_number": 25,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        25.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Line: 25 | Prev: }... | Next: while ((null >> 269)) {..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 6,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        6.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Line: 6 | Prev: import org.checkerframework.ch... | Next: public class BitSetLowerBound ..."
    },
    {
      "node_id": 8,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 9,
      "node_type": "",
      "node_label": "private void m(BitSet b) {",
      "features": [
        26.0,
        9.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: private void m(BitSet b) { | Line: 9 | Next: try {..."
    },
    {
      "node_id": 63,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 64,
      "node_type": "",
      "node_label": "for (int __cfwr_i14 = 0; __cfwr_i14 < 5; __cfwr_i14++) {",
      "features": [
        56.0,
        64.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: for (int __cfwr_i14 = 0; __cfwr_i14 < 5; __cfwr_i14++) { | Line: 64 | Prev: }... | Next: while (false) {..."
    },
    {
      "node_id": 11,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 12,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        12.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Line: 12 | Prev: import org.checkerframework.co... | Next: public class StringLength {..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/__cfwr_aux198.json",
      "method_name": "__cfwr_aux198",
      "line_number": null,
      "node_type": "",
      "node_label": "Entry",
      "features": [
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Entry | Next: Exit..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/RefineGT/__cfwr_temp874.json",
      "method_name": "__cfwr_temp874",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: Return(Literal(postfix_operato..."
    },
    {
      "node_id": 10,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/__cfwr_aux198.json",
      "method_name": "__cfwr_aux198",
      "line_number": 68,
      "node_type": "",
      "node_label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false))",
      "features": [
        101.0,
        68.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false)) | Line: 68 | Prev: If(BinaryOperation(operandl=Li... | Next: Return(Literal(postfix_operato..."
    },
    {
      "node_id": 29,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 30,
      "node_type": "",
      "node_label": "return null;",
      "features": [
        12.0,
        30.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: return null; | Line: 30 | Prev: }... | Next: }..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 3,
      "node_type": "",
      "node_label": "*/",
      "features": [
        2.0,
        3.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: */ | Line: 3 | Prev: * CFWR augmentation: inserted ... | Next: import java.util.Random;..."
    },
    {
      "node_id": 51,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 52,
      "node_type": "",
      "node_label": "break; // Prevent infinite loops",
      "features": [
        32.0,
        52.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: break; // Prevent infinite loops | Line: 52 | Prev: return false;... | Next: }..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/__cfwr_aux157.json",
      "method_name": "__cfwr_aux157",
      "line_number": null,
      "node_type": "",
      "node_label": "Entry",
      "features": [
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.5,
      "code_context": "Label: Entry | Next: Exit..."
    },
    {
      "node_id": 11,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 25,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), operator=-), name=f)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        559.0,
        25.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), operator=-), name=f)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 25 | Prev: LocalVariableDeclaration(annot... | Next: LocalVariableDeclaration(annot..."
    }
  ]
}