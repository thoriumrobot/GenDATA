{
  "method_name": "expandedCapacity",
  "nodes": [
    {"id": 12, "label": "  void subtyping(int x, int y, @LessThan({\"#1\", \"#2\"}) int a, @LessThan(\"#1\") int b) {", "line": 12, "node_type": "stmt"},
    {"id": 13, "label": "    @LessThan(\"x\") int q = a;", "line": 13, "node_type": "stmt"},
    {"id": 14, "label": "    @LessThan({\"x\", \"y\"})", "line": 14, "node_type": "stmt"},
    {"id": 15, "label": "    // :: error: (assignment)", "line": 15, "node_type": "stmt"},
    {"id": 16, "label": "    int r = b;", "line": 16, "node_type": "stmt"},
    {"id": 17, "label": "  }", "line": 17, "node_type": "stmt"},
    {"id": 18, "label": "", "line": 18, "node_type": "stmt"},
    {"id": 19, "label": "  public static boolean flag;", "line": 19, "node_type": "stmt"},
    {"id": 20, "label": "", "line": 20, "node_type": "stmt"},
    {"id": 21, "label": "  void lub(int x, int y, @LessThan({\"#1\", \"#2\"}) int a, @LessThan(\"#1\") int b) {", "line": 21, "node_type": "stmt"},
    {"id": 22, "label": "    @LessThan(\"x\") int r = flag ? a : b;", "line": 22, "node_type": "stmt"},
    {"id": 23, "label": "    @LessThan({\"x\", \"y\"})", "line": 23, "node_type": "stmt"},
    {"id": 24, "label": "    // :: error: (assignment)", "line": 24, "node_type": "stmt"},
    {"id": 25, "label": "    int s = flag ? a : b;", "line": 25, "node_type": "stmt"},
    {"id": 26, "label": "  }", "line": 26, "node_type": "stmt"},
    {"id": 27, "label": "", "line": 27, "node_type": "stmt"},
    {"id": 28, "label": "  void transitive(int a, int b, int c) {", "line": 28, "node_type": "stmt"},
    {"id": 29, "label": "    if (a < b) {", "line": 29, "node_type": "stmt"},
    {"id": 30, "label": "      if (b < c) {", "line": 30, "node_type": "stmt"},
    {"id": 31, "label": "        // :: error: (assignment)", "line": 31, "node_type": "stmt"},
    {"id": 32, "label": "        @LessThan(\"c\") int x = a;", "line": 32, "node_type": "stmt"},
    {"id": 33, "label": "      }", "line": 33, "node_type": "stmt"},
    {"id": 34, "label": "    }", "line": 34, "node_type": "stmt"},
    {"id": 35, "label": "  }", "line": 35, "node_type": "stmt"},
    {"id": 36, "label": "", "line": 36, "node_type": "stmt"},
    {"id": 37, "label": "  void calls() {", "line": 37, "node_type": "stmt"},
    {"id": 38, "label": "    isLessThan(0, 1);", "line": 38, "node_type": "stmt"},
    {"id": 39, "label": "    isLessThanOrEqual(0, 0);", "line": 39, "node_type": "stmt"},
    {"id": 40, "label": "  }", "line": 40, "node_type": "stmt"},
    {"id": 41, "label": "", "line": 41, "node_type": "stmt"},
    {"id": 42, "label": "  void isLessThan(@LessThan(\"#2\") @NonNegative int start, int end) {", "line": 42, "node_type": "stmt"},
    {"id": 43, "label": "    @NonNegative int x = end - start - 1;", "line": 43, "node_type": "stmt"},
    {"id": 44, "label": "    @Positive int y = end - start;", "line": 44, "node_type": "stmt"},
    {"id": 45, "label": "  }", "line": 45, "node_type": "stmt"},
    {"id": 46, "label": "", "line": 46, "node_type": "stmt"},
    {"id": 47, "label": "  @NonNegative int isLessThanOrEqual(@LessThan(\"#2 + 1\") @NonNegative int start, int end) {", "line": 47, "node_type": "stmt"},
    {"id": 48, "label": "    return end - start;", "line": 48, "node_type": "stmt"},
    {"id": 49, "label": "  }", "line": 49, "node_type": "stmt"},
    {"id": 50, "label": "", "line": 50, "node_type": "stmt"},
    {"id": 51, "label": "  public void setMaximumItemCount(int maximum) {", "line": 51, "node_type": "stmt"},
    {"id": 52, "label": "    if (maximum < 0) {", "line": 52, "node_type": "stmt"},
    {"id": 53, "label": "      throw new IllegalArgumentException(\"Negative 'maximum' argument.\");", "line": 53, "node_type": "stmt"},
    {"id": 54, "label": "    }", "line": 54, "node_type": "stmt"},
    {"id": 55, "label": "    int count = getCount();", "line": 55, "node_type": "stmt"},
    {"id": 56, "label": "    if (count > maximum) {", "line": 56, "node_type": "stmt"},
    {"id": 57, "label": "      @Positive int y = count - maximum;", "line": 57, "node_type": "stmt"},
    {"id": 58, "label": "      @NonNegative int deleteIndex = count - maximum - 1;", "line": 58, "node_type": "stmt"},
    {"id": 59, "label": "    }", "line": 59, "node_type": "stmt"},
    {"id": 60, "label": "  }", "line": 60, "node_type": "stmt"},
    {"id": 61, "label": "", "line": 61, "node_type": "stmt"},
    {"id": 62, "label": "  int getCount() {", "line": 62, "node_type": "stmt"},
    {"id": 63, "label": "    throw new RuntimeException();", "line": 63, "node_type": "stmt"},
    {"id": 64, "label": "  }", "line": 64, "node_type": "stmt"},
    {"id": 65, "label": "", "line": 65, "node_type": "stmt"},
    {"id": 66, "label": "  void method(@NonNegative int m) {", "line": 66, "node_type": "stmt"},
    {"id": 67, "label": "    boolean[] has_modulus = new boolean[m];", "line": 67, "node_type": "stmt"},
    {"id": 68, "label": "    @LessThan(\"m\") int x = foo(m);", "line": 68, "node_type": "stmt"},
    {"id": 69, "label": "    @IndexFor(\"has_modulus\") int rem = foo(m);", "line": 69, "node_type": "stmt"},
    {"id": 70, "label": "  }", "line": 70, "node_type": "stmt"},
    {"id": 71, "label": "", "line": 71, "node_type": "stmt"},
    {"id": 72, "label": "  @LessThan(\"#1\") @NonNegative int foo(int in) {", "line": 72, "node_type": "stmt"},
    {"id": 73, "label": "    throw new RuntimeException();", "line": 73, "node_type": "stmt"},
    {"id": 74, "label": "  }", "line": 74, "node_type": "stmt"},
    {"id": 75, "label": "", "line": 75, "node_type": "stmt"},
    {"id": 76, "label": "  void test(int maximum, int count) {", "line": 76, "node_type": "stmt"},
    {"id": 77, "label": "    if (maximum < 0) {", "line": 77, "node_type": "stmt"},
    {"id": 78, "label": "      throw new IllegalArgumentException(\"Negative 'maximum' argument.\");", "line": 78, "node_type": "stmt"},
    {"id": 79, "label": "    }", "line": 79, "node_type": "stmt"},
    {"id": 80, "label": "    if (count > maximum) {", "line": 80, "node_type": "stmt"},
    {"id": 81, "label": "      int deleteIndex = count - maximum - 1;", "line": 81, "node_type": "stmt"},
    {"id": 82, "label": "      // TODO: shouldn't error", "line": 82, "node_type": "stmt"},
    {"id": 83, "label": "      // :: error: (argument)", "line": 83, "node_type": "stmt"},
    {"id": 84, "label": "      isLessThanOrEqual(0, deleteIndex);", "line": 84, "node_type": "stmt"},
    {"id": 85, "label": "    }", "line": 85, "node_type": "stmt"},
    {"id": 86, "label": "  }", "line": 86, "node_type": "stmt"},
    {"id": 87, "label": "", "line": 87, "node_type": "stmt"},
    {"id": 88, "label": "  void count(int count) {", "line": 88, "node_type": "stmt"},
    {"id": 89, "label": "    if (count > 0) {", "line": 89, "node_type": "stmt"},
    {"id": 90, "label": "      if (count % 2 == 1) {", "line": 90, "node_type": "stmt"},
    {"id": 91, "label": "", "line": 91, "node_type": "stmt"},
    {"id": 92, "label": "      } else {", "line": 92, "node_type": "stmt"},
    {"id": 93, "label": "        // TODO: improve value checker", "line": 93, "node_type": "stmt"},
    {"id": 94, "label": "        // :: error: (assignment)", "line": 94, "node_type": "stmt"},
    {"id": 95, "label": "        @IntRange(from = 0) int countDivMinus = count / 2 - 1;", "line": 95, "node_type": "stmt"},
    {"id": 96, "label": "        // Reasign to update the value in the store.", "line": 96, "node_type": "stmt"},
    {"id": 97, "label": "        countDivMinus = countDivMinus;", "line": 97, "node_type": "stmt"},
    {"id": 98, "label": "        // :: error: (argument)", "line": 98, "node_type": "stmt"},
    {"id": 99, "label": "        isLessThan(0, countDivMinus);", "line": 99, "node_type": "stmt"},
    {"id": 100, "label": "        isLessThanOrEqual(0, countDivMinus);", "line": 100, "node_type": "stmt"},
    {"id": 101, "label": "      }", "line": 101, "node_type": "stmt"},
    {"id": 102, "label": "    }", "line": 102, "node_type": "stmt"},
    {"id": 103, "label": "  }", "line": 103, "node_type": "stmt"},
    {"id": 104, "label": "", "line": 104, "node_type": "stmt"},
    {"id": 105, "label": "  static @NonNegative @LessThan(\"#2 + 1\") int expandedCapacity(", "line": 105, "node_type": "stmt"},
    {"id": 106, "label": "      @NonNegative int oldCapacity, @NonNegative int minCapacity) {", "line": 106, "node_type": "stmt"},
    {"id": 107, "label": "    if (minCapacity < 0) {", "line": 107, "node_type": "stmt"},
    {"id": 108, "label": "      throw new AssertionError(\"cannot store more than MAX_VALUE elements\");", "line": 108, "node_type": "stmt"},
    {"id": 109, "label": "    }", "line": 109, "node_type": "stmt"},
    {"id": 110, "label": "    // careful of overflow!", "line": 110, "node_type": "stmt"},
    {"id": 111, "label": "    int newCapacity = oldCapacity + (oldCapacity >> 1) + 1; // expand by %50", "line": 111, "node_type": "stmt"},
    {"id": 112, "label": "    if (newCapacity < minCapacity) {", "line": 112, "node_type": "stmt"},
    {"id": 113, "label": "      newCapacity = Integer.highestOneBit(minCapacity - 1) << 1;", "line": 113, "node_type": "stmt"},
    {"id": 114, "label": "    }", "line": 114, "node_type": "stmt"},
    {"id": 115, "label": "    if (newCapacity < 0) {", "line": 115, "node_type": "stmt"},
    {"id": 116, "label": "      newCapacity = Integer.MAX_VALUE;", "line": 116, "node_type": "stmt"},
    {"id": 117, "label": "      // guaranteed to be >= newCapacity", "line": 117, "node_type": "stmt"},
    {"id": 118, "label": "    }", "line": 118, "node_type": "stmt"},
    {"id": 119, "label": "    // :: error: (return)", "line": 119, "node_type": "stmt"},
    {"id": 120, "label": "    return newCapacity;", "line": 120, "node_type": "stmt"},
    {"id": 121, "label": "  }", "line": 121, "node_type": "stmt"}
  ],
  "control_edges": [
    {"source": 12, "target": 13, "type": "control"},
    {"source": 13, "target": 14, "type": "control"},
    {"source": 14, "target": 15, "type": "control"},
    {"source": 15, "target": 16, "type": "control"},
    {"source": 16, "target": 17, "type": "control"},
    {"source": 17, "target": 18, "type": "control"},
    {"source": 18, "target": 19, "type": "control"},
    {"source": 19, "target": 20, "type": "control"},
    {"source": 20, "target": 21, "type": "control"},
    {"source": 21, "target": 22, "type": "control"},
    {"source": 22, "target": 23, "type": "control"},
    {"source": 23, "target": 24, "type": "control"},
    {"source": 24, "target": 25, "type": "control"},
    {"source": 25, "target": 26, "type": "control"},
    {"source": 26, "target": 27, "type": "control"},
    {"source": 27, "target": 28, "type": "control"},
    {"source": 28, "target": 29, "type": "control"},
    {"source": 29, "target": 30, "type": "control"},
    {"source": 30, "target": 31, "type": "control"},
    {"source": 31, "target": 32, "type": "control"},
    {"source": 32, "target": 33, "type": "control"},
    {"source": 33, "target": 34, "type": "control"},
    {"source": 34, "target": 35, "type": "control"},
    {"source": 35, "target": 36, "type": "control"},
    {"source": 36, "target": 37, "type": "control"},
    {"source": 37, "target": 38, "type": "control"},
    {"source": 38, "target": 39, "type": "control"},
    {"source": 39, "target": 40, "type": "control"},
    {"source": 40, "target": 41, "type": "control"},
    {"source": 41, "target": 42, "type": "control"},
    {"source": 42, "target": 43, "type": "control"},
    {"source": 43, "target": 44, "type": "control"},
    {"source": 44, "target": 45, "type": "control"},
    {"source": 45, "target": 46, "type": "control"},
    {"source": 46, "target": 47, "type": "control"},
    {"source": 47, "target": 48, "type": "control"},
    {"source": 48, "target": 49, "type": "control"},
    {"source": 49, "target": 50, "type": "control"},
    {"source": 50, "target": 51, "type": "control"},
    {"source": 51, "target": 52, "type": "control"},
    {"source": 52, "target": 53, "type": "control"},
    {"source": 53, "target": 54, "type": "control"},
    {"source": 54, "target": 55, "type": "control"},
    {"source": 55, "target": 56, "type": "control"},
    {"source": 56, "target": 57, "type": "control"},
    {"source": 57, "target": 58, "type": "control"},
    {"source": 58, "target": 59, "type": "control"},
    {"source": 59, "target": 60, "type": "control"},
    {"source": 60, "target": 61, "type": "control"},
    {"source": 61, "target": 62, "type": "control"},
    {"source": 62, "target": 63, "type": "control"},
    {"source": 63, "target": 64, "type": "control"},
    {"source": 64, "target": 65, "type": "control"},
    {"source": 65, "target": 66, "type": "control"},
    {"source": 66, "target": 67, "type": "control"},
    {"source": 67, "target": 68, "type": "control"},
    {"source": 68, "target": 69, "type": "control"},
    {"source": 69, "target": 70, "type": "control"},
    {"source": 70, "target": 71, "type": "control"},
    {"source": 71, "target": 72, "type": "control"},
    {"source": 72, "target": 73, "type": "control"},
    {"source": 73, "target": 74, "type": "control"},
    {"source": 74, "target": 75, "type": "control"},
    {"source": 75, "target": 76, "type": "control"},
    {"source": 76, "target": 77, "type": "control"},
    {"source": 77, "target": 78, "type": "control"},
    {"source": 78, "target": 79, "type": "control"},
    {"source": 79, "target": 80, "type": "control"},
    {"source": 80, "target": 81, "type": "control"},
    {"source": 81, "target": 82, "type": "control"},
    {"source": 82, "target": 83, "type": "control"},
    {"source": 83, "target": 84, "type": "control"},
    {"source": 84, "target": 85, "type": "control"},
    {"source": 85, "target": 86, "type": "control"},
    {"source": 86, "target": 87, "type": "control"},
    {"source": 87, "target": 88, "type": "control"},
    {"source": 88, "target": 89, "type": "control"},
    {"source": 89, "target": 90, "type": "control"},
    {"source": 90, "target": 91, "type": "control"},
    {"source": 91, "target": 92, "type": "control"},
    {"source": 92, "target": 93, "type": "control"},
    {"source": 93, "target": 94, "type": "control"},
    {"source": 94, "target": 95, "type": "control"},
    {"source": 95, "target": 96, "type": "control"},
    {"source": 96, "target": 97, "type": "control"},
    {"source": 97, "target": 98, "type": "control"},
    {"source": 98, "target": 99, "type": "control"},
    {"source": 99, "target": 100, "type": "control"},
    {"source": 100, "target": 101, "type": "control"},
    {"source": 101, "target": 102, "type": "control"},
    {"source": 102, "target": 103, "type": "control"},
    {"source": 103, "target": 104, "type": "control"},
    {"source": 104, "target": 105, "type": "control"},
    {"source": 105, "target": 106, "type": "control"},
    {"source": 106, "target": 107, "type": "control"},
    {"source": 107, "target": 108, "type": "control"},
    {"source": 108, "target": 109, "type": "control"},
    {"source": 109, "target": 110, "type": "control"},
    {"source": 110, "target": 111, "type": "control"},
    {"source": 111, "target": 112, "type": "control"},
    {"source": 112, "target": 113, "type": "control"},
    {"source": 113, "target": 114, "type": "control"},
    {"source": 114, "target": 115, "type": "control"},
    {"source": 115, "target": 116, "type": "control"},
    {"source": 116, "target": 117, "type": "control"},
    {"source": 117, "target": 118, "type": "control"},
    {"source": 118, "target": 119, "type": "control"},
    {"source": 119, "target": 120, "type": "control"},
    {"source": 120, "target": 121, "type": "control"}
  ],
  "dataflow_edges": [
    {"source": 12, "target": 13, "type": "dataflow", "var": "LessThan"},
    {"source": 12, "target": 13, "type": "dataflow", "var": "x"},
    {"source": 12, "target": 13, "type": "dataflow", "var": "a"},
    {"source": 13, "target": 14, "type": "dataflow", "var": "LessThan"},
    {"source": 13, "target": 14, "type": "dataflow", "var": "x"},
    {"source": 12, "target": 14, "type": "dataflow", "var": "y"},
    {"source": 12, "target": 16, "type": "dataflow", "var": "b"},
    {"source": 14, "target": 21, "type": "dataflow", "var": "x"},
    {"source": 14, "target": 21, "type": "dataflow", "var": "y"},
    {"source": 14, "target": 21, "type": "dataflow", "var": "LessThan"},
    {"source": 13, "target": 21, "type": "dataflow", "var": "a"},
    {"source": 16, "target": 21, "type": "dataflow", "var": "b"},
    {"source": 21, "target": 22, "type": "dataflow", "var": "LessThan"},
    {"source": 21, "target": 22, "type": "dataflow", "var": "x"},
    {"source": 16, "target": 22, "type": "dataflow", "var": "r"},
    {"source": 19, "target": 22, "type": "dataflow", "var": "flag"},
    {"source": 21, "target": 22, "type": "dataflow", "var": "a"},
    {"source": 21, "target": 22, "type": "dataflow", "var": "b"},
    {"source": 22, "target": 23, "type": "dataflow", "var": "LessThan"},
    {"source": 22, "target": 23, "type": "dataflow", "var": "x"},
    {"source": 21, "target": 23, "type": "dataflow", "var": "y"},
    {"source": 15, "target": 24, "type": "dataflow", "var": "error"},
    {"source": 15, "target": 24, "type": "dataflow", "var": "assignment"},
    {"source": 22, "target": 25, "type": "dataflow", "var": "flag"},
    {"source": 22, "target": 25, "type": "dataflow", "var": "a"},
    {"source": 22, "target": 25, "type": "dataflow", "var": "b"},
    {"source": 25, "target": 28, "type": "dataflow", "var": "a"},
    {"source": 25, "target": 28, "type": "dataflow", "var": "b"},
    {"source": 28, "target": 29, "type": "dataflow", "var": "a"},
    {"source": 28, "target": 29, "type": "dataflow", "var": "b"},
    {"source": 29, "target": 30, "type": "dataflow", "var": "b"},
    {"source": 28, "target": 30, "type": "dataflow", "var": "c"},
    {"source": 24, "target": 31, "type": "dataflow", "var": "error"},
    {"source": 24, "target": 31, "type": "dataflow", "var": "assignment"},
    {"source": 23, "target": 32, "type": "dataflow", "var": "LessThan"},
    {"source": 30, "target": 32, "type": "dataflow", "var": "c"},
    {"source": 23, "target": 32, "type": "dataflow", "var": "x"},
    {"source": 29, "target": 32, "type": "dataflow", "var": "a"},
    {"source": 38, "target": 42, "type": "dataflow", "var": "isLessThan"},
    {"source": 32, "target": 42, "type": "dataflow", "var": "LessThan"},
    {"source": 42, "target": 43, "type": "dataflow", "var": "NonNegative"},
    {"source": 32, "target": 43, "type": "dataflow", "var": "x"},
    {"source": 42, "target": 43, "type": "dataflow", "var": "end"},
    {"source": 42, "target": 43, "type": "dataflow", "var": "start"},
    {"source": 23, "target": 44, "type": "dataflow", "var": "y"},
    {"source": 43, "target": 44, "type": "dataflow", "var": "end"},
    {"source": 43, "target": 44, "type": "dataflow", "var": "start"},
    {"source": 43, "target": 47, "type": "dataflow", "var": "NonNegative"},
    {"source": 39, "target": 47, "type": "dataflow", "var": "isLessThanOrEqual"},
    {"source": 42, "target": 47, "type": "dataflow", "var": "LessThan"},
    {"source": 44, "target": 47, "type": "dataflow", "var": "start"},
    {"source": 44, "target": 47, "type": "dataflow", "var": "end"},
    {"source": 47, "target": 48, "type": "dataflow", "var": "end"},
    {"source": 47, "target": 48, "type": "dataflow", "var": "start"},
    {"source": 51, "target": 52, "type": "dataflow", "var": "maximum"},
    {"source": 52, "target": 53, "type": "dataflow", "var": "maximum"},
    {"source": 55, "target": 56, "type": "dataflow", "var": "count"},
    {"source": 53, "target": 56, "type": "dataflow", "var": "maximum"},
    {"source": 44, "target": 57, "type": "dataflow", "var": "Positive"},
    {"source": 44, "target": 57, "type": "dataflow", "var": "y"},
    {"source": 56, "target": 57, "type": "dataflow", "var": "count"},
    {"source": 56, "target": 57, "type": "dataflow", "var": "maximum"},
    {"source": 47, "target": 58, "type": "dataflow", "var": "NonNegative"},
    {"source": 57, "target": 58, "type": "dataflow", "var": "count"},
    {"source": 57, "target": 58, "type": "dataflow", "var": "maximum"},
    {"source": 55, "target": 62, "type": "dataflow", "var": "getCount"},
    {"source": 58, "target": 66, "type": "dataflow", "var": "NonNegative"},
    {"source": 66, "target": 67, "type": "dataflow", "var": "m"},
    {"source": 47, "target": 68, "type": "dataflow", "var": "LessThan"},
    {"source": 67, "target": 68, "type": "dataflow", "var": "m"},
    {"source": 43, "target": 68, "type": "dataflow", "var": "x"},
    {"source": 67, "target": 69, "type": "dataflow", "var": "has_modulus"},
    {"source": 68, "target": 69, "type": "dataflow", "var": "foo"},
    {"source": 68, "target": 69, "type": "dataflow", "var": "m"},
    {"source": 68, "target": 72, "type": "dataflow", "var": "LessThan"},
    {"source": 66, "target": 72, "type": "dataflow", "var": "NonNegative"},
    {"source": 69, "target": 72, "type": "dataflow", "var": "foo"},
    {"source": 63, "target": 73, "type": "dataflow", "var": "RuntimeException"},
    {"source": 58, "target": 76, "type": "dataflow", "var": "maximum"},
    {"source": 58, "target": 76, "type": "dataflow", "var": "count"},
    {"source": 76, "target": 77, "type": "dataflow", "var": "maximum"},
    {"source": 53, "target": 78, "type": "dataflow", "var": "IllegalArgumentException"},
    {"source": 53, "target": 78, "type": "dataflow", "var": "Negative"},
    {"source": 77, "target": 78, "type": "dataflow", "var": "maximum"},
    {"source": 53, "target": 78, "type": "dataflow", "var": "argument"},
    {"source": 76, "target": 80, "type": "dataflow", "var": "count"},
    {"source": 78, "target": 80, "type": "dataflow", "var": "maximum"},
    {"source": 58, "target": 81, "type": "dataflow", "var": "deleteIndex"},
    {"source": 80, "target": 81, "type": "dataflow", "var": "count"},
    {"source": 80, "target": 81, "type": "dataflow", "var": "maximum"},
    {"source": 31, "target": 82, "type": "dataflow", "var": "error"},
    {"source": 82, "target": 83, "type": "dataflow", "var": "error"},
    {"source": 78, "target": 83, "type": "dataflow", "var": "argument"},
    {"source": 47, "target": 84, "type": "dataflow", "var": "isLessThanOrEqual"},
    {"source": 81, "target": 84, "type": "dataflow", "var": "deleteIndex"},
    {"source": 81, "target": 88, "type": "dataflow", "var": "count"},
    {"source": 88, "target": 89, "type": "dataflow", "var": "count"},
    {"source": 89, "target": 90, "type": "dataflow", "var": "count"},
    {"source": 82, "target": 93, "type": "dataflow", "var": "TODO"},
    {"source": 83, "target": 94, "type": "dataflow", "var": "error"},
    {"source": 31, "target": 94, "type": "dataflow", "var": "assignment"},
    {"source": 90, "target": 95, "type": "dataflow", "var": "count"},
    {"source": 93, "target": 96, "type": "dataflow", "var": "value"},
    {"source": 72, "target": 96, "type": "dataflow", "var": "in"},
    {"source": 95, "target": 97, "type": "dataflow", "var": "countDivMinus"},
    {"source": 94, "target": 98, "type": "dataflow", "var": "error"},
    {"source": 83, "target": 98, "type": "dataflow", "var": "argument"},
    {"source": 42, "target": 99, "type": "dataflow", "var": "isLessThan"},
    {"source": 97, "target": 99, "type": "dataflow", "var": "countDivMinus"},
    {"source": 84, "target": 100, "type": "dataflow", "var": "isLessThanOrEqual"},
    {"source": 99, "target": 100, "type": "dataflow", "var": "countDivMinus"},
    {"source": 72, "target": 105, "type": "dataflow", "var": "NonNegative"},
    {"source": 72, "target": 105, "type": "dataflow", "var": "LessThan"},
    {"source": 105, "target": 106, "type": "dataflow", "var": "NonNegative"},
    {"source": 106, "target": 107, "type": "dataflow", "var": "minCapacity"},
    {"source": 96, "target": 108, "type": "dataflow", "var": "store"},
    {"source": 106, "target": 111, "type": "dataflow", "var": "oldCapacity"},
    {"source": 111, "target": 112, "type": "dataflow", "var": "newCapacity"},
    {"source": 107, "target": 112, "type": "dataflow", "var": "minCapacity"},
    {"source": 112, "target": 113, "type": "dataflow", "var": "newCapacity"},
    {"source": 112, "target": 113, "type": "dataflow", "var": "minCapacity"},
    {"source": 113, "target": 115, "type": "dataflow", "var": "newCapacity"},
    {"source": 115, "target": 116, "type": "dataflow", "var": "newCapacity"},
    {"source": 113, "target": 116, "type": "dataflow", "var": "Integer"},
    {"source": 108, "target": 116, "type": "dataflow", "var": "MAX_VALUE"},
    {"source": 96, "target": 117, "type": "dataflow", "var": "to"},
    {"source": 116, "target": 117, "type": "dataflow", "var": "newCapacity"},
    {"source": 98, "target": 119, "type": "dataflow", "var": "error"},
    {"source": 117, "target": 120, "type": "dataflow", "var": "newCapacity"}
  ]
}
