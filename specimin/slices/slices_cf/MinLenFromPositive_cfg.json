{
  "method_name": "test_id",
  "nodes": [
    {"id": 6, "label": "  void test(@Positive int x) {", "line": 6, "node_type": "stmt"},
    {"id": 7, "label": "    int @MinLen(1) [] y = new int[x];", "line": 7, "node_type": "stmt"},
    {"id": 8, "label": "    @IntRange(from = 1) int z = x;", "line": 8, "node_type": "stmt"},
    {"id": 9, "label": "    @Positive int q = x;", "line": 9, "node_type": "stmt"},
    {"id": 10, "label": "  }", "line": 10, "node_type": "stmt"},
    {"id": 11, "label": "", "line": 11, "node_type": "stmt"},
    {"id": 12, "label": "  @SuppressWarnings(\"index\")", "line": 12, "node_type": "stmt"},
    {"id": 13, "label": "  void foo(int x) {", "line": 13, "node_type": "stmt"},
    {"id": 14, "label": "    test(x);", "line": 14, "node_type": "stmt"},
    {"id": 15, "label": "  }", "line": 15, "node_type": "stmt"},
    {"id": 16, "label": "", "line": 16, "node_type": "stmt"},
    {"id": 17, "label": "  void foo2(int x) {", "line": 17, "node_type": "stmt"},
    {"id": 18, "label": "    // :: error: (argument)", "line": 18, "node_type": "stmt"},
    {"id": 19, "label": "    test(x);", "line": 19, "node_type": "stmt"},
    {"id": 20, "label": "  }", "line": 20, "node_type": "stmt"},
    {"id": 21, "label": "", "line": 21, "node_type": "stmt"},
    {"id": 22, "label": "  void test_lub1(boolean flag, @Positive int x, @IntRange(from = 6, to = 25) int y) {", "line": 22, "node_type": "stmt"},
    {"id": 23, "label": "    int z;", "line": 23, "node_type": "stmt"},
    {"id": 24, "label": "    if (flag) {", "line": 24, "node_type": "stmt"},
    {"id": 25, "label": "      z = x;", "line": 25, "node_type": "stmt"},
    {"id": 26, "label": "    } else {", "line": 26, "node_type": "stmt"},
    {"id": 27, "label": "      z = y;", "line": 27, "node_type": "stmt"},
    {"id": 28, "label": "    }", "line": 28, "node_type": "stmt"},
    {"id": 29, "label": "    @Positive int q = z;", "line": 29, "node_type": "stmt"},
    {"id": 30, "label": "    @IntRange(from = 1) int w = z;", "line": 30, "node_type": "stmt"},
    {"id": 31, "label": "  }", "line": 31, "node_type": "stmt"},
    {"id": 32, "label": "", "line": 32, "node_type": "stmt"},
    {"id": 33, "label": "  void test_lub2(boolean flag, @Positive int x, @IntRange(from = -1, to = 11) int y) {", "line": 33, "node_type": "stmt"},
    {"id": 34, "label": "    int z;", "line": 34, "node_type": "stmt"},
    {"id": 35, "label": "    if (flag) {", "line": 35, "node_type": "stmt"},
    {"id": 36, "label": "      z = x;", "line": 36, "node_type": "stmt"},
    {"id": 37, "label": "    } else {", "line": 37, "node_type": "stmt"},
    {"id": 38, "label": "      z = y;", "line": 38, "node_type": "stmt"},
    {"id": 39, "label": "    }", "line": 39, "node_type": "stmt"},
    {"id": 40, "label": "    // :: error: (assignment)", "line": 40, "node_type": "stmt"},
    {"id": 41, "label": "    @Positive int q = z;", "line": 41, "node_type": "stmt"},
    {"id": 42, "label": "    @IntRange(from = -1) int w = z;", "line": 42, "node_type": "stmt"},
    {"id": 43, "label": "  }", "line": 43, "node_type": "stmt"},
    {"id": 44, "label": "", "line": 44, "node_type": "stmt"},
    {"id": 45, "label": "  @Positive int id(@Positive int x) {", "line": 45, "node_type": "stmt"},
    {"id": 46, "label": "    return x;", "line": 46, "node_type": "stmt"},
    {"id": 47, "label": "  }", "line": 47, "node_type": "stmt"},
    {"id": 48, "label": "", "line": 48, "node_type": "stmt"},
    {"id": 49, "label": "  void test_id(int param) {", "line": 49, "node_type": "stmt"},
    {"id": 50, "label": "    @Positive int x = id(5);", "line": 50, "node_type": "stmt"},
    {"id": 51, "label": "    @IntRange(from = 1) int y = id(5);", "line": 51, "node_type": "stmt"},
    {"id": 52, "label": "", "line": 52, "node_type": "stmt"},
    {"id": 53, "label": "    int @MinLen(1) [] a = new int[id(100)];", "line": 53, "node_type": "stmt"},
    {"id": 54, "label": "    // :: error: (assignment)", "line": 54, "node_type": "stmt"},
    {"id": 55, "label": "    int @MinLen(10) [] c = new int[id(100)];", "line": 55, "node_type": "stmt"},
    {"id": 56, "label": "", "line": 56, "node_type": "stmt"},
    {"id": 57, "label": "    int q = id(10);", "line": 57, "node_type": "stmt"},
    {"id": 58, "label": "", "line": 58, "node_type": "stmt"},
    {"id": 59, "label": "    if (param == q) {", "line": 59, "node_type": "stmt"},
    {"id": 60, "label": "      int @MinLen(1) [] d = new int[param];", "line": 60, "node_type": "stmt"},
    {"id": 61, "label": "    }", "line": 61, "node_type": "stmt"},
    {"id": 62, "label": "  }", "line": 62, "node_type": "stmt"}
  ],
  "control_edges": [
    {"source": 6, "target": 7, "type": "control"},
    {"source": 7, "target": 8, "type": "control"},
    {"source": 8, "target": 9, "type": "control"},
    {"source": 9, "target": 10, "type": "control"},
    {"source": 10, "target": 11, "type": "control"},
    {"source": 11, "target": 12, "type": "control"},
    {"source": 12, "target": 13, "type": "control"},
    {"source": 13, "target": 14, "type": "control"},
    {"source": 14, "target": 15, "type": "control"},
    {"source": 15, "target": 16, "type": "control"},
    {"source": 16, "target": 17, "type": "control"},
    {"source": 17, "target": 18, "type": "control"},
    {"source": 18, "target": 19, "type": "control"},
    {"source": 19, "target": 20, "type": "control"},
    {"source": 20, "target": 21, "type": "control"},
    {"source": 21, "target": 22, "type": "control"},
    {"source": 22, "target": 23, "type": "control"},
    {"source": 23, "target": 24, "type": "control"},
    {"source": 24, "target": 25, "type": "control"},
    {"source": 25, "target": 26, "type": "control"},
    {"source": 26, "target": 27, "type": "control"},
    {"source": 27, "target": 28, "type": "control"},
    {"source": 28, "target": 29, "type": "control"},
    {"source": 29, "target": 30, "type": "control"},
    {"source": 30, "target": 31, "type": "control"},
    {"source": 31, "target": 32, "type": "control"},
    {"source": 32, "target": 33, "type": "control"},
    {"source": 33, "target": 34, "type": "control"},
    {"source": 34, "target": 35, "type": "control"},
    {"source": 35, "target": 36, "type": "control"},
    {"source": 36, "target": 37, "type": "control"},
    {"source": 37, "target": 38, "type": "control"},
    {"source": 38, "target": 39, "type": "control"},
    {"source": 39, "target": 40, "type": "control"},
    {"source": 40, "target": 41, "type": "control"},
    {"source": 41, "target": 42, "type": "control"},
    {"source": 42, "target": 43, "type": "control"},
    {"source": 43, "target": 44, "type": "control"},
    {"source": 44, "target": 45, "type": "control"},
    {"source": 45, "target": 46, "type": "control"},
    {"source": 46, "target": 47, "type": "control"},
    {"source": 47, "target": 48, "type": "control"},
    {"source": 48, "target": 49, "type": "control"},
    {"source": 49, "target": 50, "type": "control"},
    {"source": 50, "target": 51, "type": "control"},
    {"source": 51, "target": 52, "type": "control"},
    {"source": 52, "target": 53, "type": "control"},
    {"source": 53, "target": 54, "type": "control"},
    {"source": 54, "target": 55, "type": "control"},
    {"source": 55, "target": 56, "type": "control"},
    {"source": 56, "target": 57, "type": "control"},
    {"source": 57, "target": 58, "type": "control"},
    {"source": 58, "target": 59, "type": "control"},
    {"source": 59, "target": 60, "type": "control"},
    {"source": 60, "target": 61, "type": "control"},
    {"source": 61, "target": 62, "type": "control"}
  ],
  "dataflow_edges": [
    {"source": 6, "target": 7, "type": "dataflow", "var": "x"},
    {"source": 7, "target": 8, "type": "dataflow", "var": "x"},
    {"source": 6, "target": 9, "type": "dataflow", "var": "Positive"},
    {"source": 8, "target": 9, "type": "dataflow", "var": "x"},
    {"source": 9, "target": 13, "type": "dataflow", "var": "x"},
    {"source": 6, "target": 14, "type": "dataflow", "var": "test"},
    {"source": 13, "target": 14, "type": "dataflow", "var": "x"},
    {"source": 14, "target": 17, "type": "dataflow", "var": "x"},
    {"source": 14, "target": 19, "type": "dataflow", "var": "test"},
    {"source": 17, "target": 19, "type": "dataflow", "var": "x"},
    {"source": 9, "target": 22, "type": "dataflow", "var": "Positive"},
    {"source": 19, "target": 22, "type": "dataflow", "var": "x"},
    {"source": 8, "target": 22, "type": "dataflow", "var": "IntRange"},
    {"source": 8, "target": 22, "type": "dataflow", "var": "from"},
    {"source": 7, "target": 22, "type": "dataflow", "var": "y"},
    {"source": 8, "target": 23, "type": "dataflow", "var": "z"},
    {"source": 22, "target": 24, "type": "dataflow", "var": "flag"},
    {"source": 23, "target": 25, "type": "dataflow", "var": "z"},
    {"source": 22, "target": 25, "type": "dataflow", "var": "x"},
    {"source": 25, "target": 27, "type": "dataflow", "var": "z"},
    {"source": 22, "target": 27, "type": "dataflow", "var": "y"},
    {"source": 22, "target": 29, "type": "dataflow", "var": "Positive"},
    {"source": 9, "target": 29, "type": "dataflow", "var": "q"},
    {"source": 27, "target": 29, "type": "dataflow", "var": "z"},
    {"source": 22, "target": 30, "type": "dataflow", "var": "IntRange"},
    {"source": 22, "target": 30, "type": "dataflow", "var": "from"},
    {"source": 29, "target": 30, "type": "dataflow", "var": "z"},
    {"source": 24, "target": 33, "type": "dataflow", "var": "flag"},
    {"source": 29, "target": 33, "type": "dataflow", "var": "Positive"},
    {"source": 25, "target": 33, "type": "dataflow", "var": "x"},
    {"source": 30, "target": 33, "type": "dataflow", "var": "IntRange"},
    {"source": 30, "target": 33, "type": "dataflow", "var": "from"},
    {"source": 22, "target": 33, "type": "dataflow", "var": "to"},
    {"source": 27, "target": 33, "type": "dataflow", "var": "y"},
    {"source": 30, "target": 34, "type": "dataflow", "var": "z"},
    {"source": 33, "target": 35, "type": "dataflow", "var": "flag"},
    {"source": 34, "target": 36, "type": "dataflow", "var": "z"},
    {"source": 33, "target": 36, "type": "dataflow", "var": "x"},
    {"source": 36, "target": 38, "type": "dataflow", "var": "z"},
    {"source": 33, "target": 38, "type": "dataflow", "var": "y"},
    {"source": 18, "target": 40, "type": "dataflow", "var": "error"},
    {"source": 33, "target": 41, "type": "dataflow", "var": "Positive"},
    {"source": 29, "target": 41, "type": "dataflow", "var": "q"},
    {"source": 38, "target": 41, "type": "dataflow", "var": "z"},
    {"source": 33, "target": 42, "type": "dataflow", "var": "IntRange"},
    {"source": 33, "target": 42, "type": "dataflow", "var": "from"},
    {"source": 30, "target": 42, "type": "dataflow", "var": "w"},
    {"source": 41, "target": 42, "type": "dataflow", "var": "z"},
    {"source": 41, "target": 45, "type": "dataflow", "var": "Positive"},
    {"source": 36, "target": 45, "type": "dataflow", "var": "x"},
    {"source": 45, "target": 46, "type": "dataflow", "var": "x"},
    {"source": 45, "target": 50, "type": "dataflow", "var": "Positive"},
    {"source": 46, "target": 50, "type": "dataflow", "var": "x"},
    {"source": 45, "target": 50, "type": "dataflow", "var": "id"},
    {"source": 42, "target": 51, "type": "dataflow", "var": "IntRange"},
    {"source": 42, "target": 51, "type": "dataflow", "var": "from"},
    {"source": 38, "target": 51, "type": "dataflow", "var": "y"},
    {"source": 50, "target": 51, "type": "dataflow", "var": "id"},
    {"source": 7, "target": 53, "type": "dataflow", "var": "MinLen"},
    {"source": 51, "target": 53, "type": "dataflow", "var": "id"},
    {"source": 40, "target": 54, "type": "dataflow", "var": "error"},
    {"source": 40, "target": 54, "type": "dataflow", "var": "assignment"},
    {"source": 53, "target": 55, "type": "dataflow", "var": "MinLen"},
    {"source": 53, "target": 55, "type": "dataflow", "var": "id"},
    {"source": 41, "target": 57, "type": "dataflow", "var": "q"},
    {"source": 55, "target": 57, "type": "dataflow", "var": "id"},
    {"source": 49, "target": 59, "type": "dataflow", "var": "param"},
    {"source": 57, "target": 59, "type": "dataflow", "var": "q"},
    {"source": 55, "target": 60, "type": "dataflow", "var": "MinLen"},
    {"source": 59, "target": 60, "type": "dataflow", "var": "param"}
  ]
}
