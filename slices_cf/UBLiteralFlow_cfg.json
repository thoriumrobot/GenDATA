{
  "method_name": "lineStartIndex3",
  "nodes": [
    {"id": 7, "label": "    @NonNegative", "line": 7, "node_type": "stmt"},
    {"id": 8, "label": "  private static @IndexOrLow(\"#1\") int lineStartIndexPartial(", "line": 8, "node_type": "stmt"},
    {"id": 9, "label": "      String s, @GTENegativeOne int lineStart) {", "line": 9, "node_type": "stmt"},
    {"id": 10, "label": "    int result;", "line": 10, "node_type": "stmt"},
    {"id": 11, "label": "    if (lineStart >= s.length()) {", "line": 11, "node_type": "stmt"},
    {"id": 12, "label": "      result = -1;", "line": 12, "node_type": "stmt"},
    {"id": 13, "label": "    } else {", "line": 13, "node_type": "stmt"},
    {"id": 14, "label": "      result = lineStart;", "line": 14, "node_type": "stmt"},
    {"id": 15, "label": "    }", "line": 15, "node_type": "stmt"},
    {"id": 16, "label": "    return result;", "line": 16, "node_type": "stmt"},
    {"id": 17, "label": "  }", "line": 17, "node_type": "stmt"},
    {"id": 18, "label": "", "line": 18, "node_type": "stmt"},
    {"id": 19, "label": "    @Positive", "line": 19, "node_type": "stmt"},
    {"id": 20, "label": "  private static @LTLengthOf(\"#1\") int lineStartIndexPartial2(", "line": 20, "node_type": "stmt"},
    {"id": 21, "label": "      String s, @GTENegativeOne int lineStart) {", "line": 21, "node_type": "stmt"},
    {"id": 22, "label": "    int result;", "line": 22, "node_type": "stmt"},
    {"id": 23, "label": "    if (lineStart >= s.length()) {", "line": 23, "node_type": "stmt"},
    {"id": 24, "label": "      result = -1;", "line": 24, "node_type": "stmt"},
    {"id": 25, "label": "    } else {", "line": 25, "node_type": "stmt"},
    {"id": 26, "label": "      result = lineStart;", "line": 26, "node_type": "stmt"},
    {"id": 27, "label": "    }", "line": 27, "node_type": "stmt"},
    {"id": 28, "label": "    return result;", "line": 28, "node_type": "stmt"},
    {"id": 29, "label": "  }", "line": 29, "node_type": "stmt"},
    {"id": 30, "label": "", "line": 30, "node_type": "stmt"},
    {"id": 31, "label": "    @Positive", "line": 31, "node_type": "stmt"},
    {"id": 32, "label": "  private static @LTLengthOf(value = \"#1\", offset = \"1\") int lineStartIndexPartial3(", "line": 32, "node_type": "stmt"},
    {"id": 33, "label": "      String s, @GTENegativeOne int lineStart) {", "line": 33, "node_type": "stmt"},
    {"id": 34, "label": "    int result;", "line": 34, "node_type": "stmt"},
    {"id": 35, "label": "    if (lineStart >= s.length()) {", "line": 35, "node_type": "stmt"},
    {"id": 36, "label": "      result = -1;", "line": 36, "node_type": "stmt"},
    {"id": 37, "label": "    } else {", "line": 37, "node_type": "stmt"},
    {"id": 38, "label": "      result = lineStart;", "line": 38, "node_type": "stmt"},
    {"id": 39, "label": "    }", "line": 39, "node_type": "stmt"},
    {"id": 40, "label": "    // :: error: (return)", "line": 40, "node_type": "stmt"},
    {"id": 41, "label": "    return result;", "line": 41, "node_type": "stmt"},
    {"id": 42, "label": "  }", "line": 42, "node_type": "stmt"},
    {"id": 43, "label": "", "line": 43, "node_type": "stmt"},
    {"id": 44, "label": "    @Positive", "line": 44, "node_type": "stmt"},
    {"id": 45, "label": "  private static @LTLengthOf(value = \"#1\", offset = \"-1\") int lineStartIndexPartial4(", "line": 45, "node_type": "stmt"},
    {"id": 46, "label": "      String s, @GTENegativeOne int lineStart) {", "line": 46, "node_type": "stmt"},
    {"id": 47, "label": "    int result;", "line": 47, "node_type": "stmt"},
    {"id": 48, "label": "    if (lineStart >= s.length()) {", "line": 48, "node_type": "stmt"},
    {"id": 49, "label": "      result = -1;", "line": 49, "node_type": "stmt"},
    {"id": 50, "label": "    } else {", "line": 50, "node_type": "stmt"},
    {"id": 51, "label": "      result = lineStart;", "line": 51, "node_type": "stmt"},
    {"id": 52, "label": "    }", "line": 52, "node_type": "stmt"},
    {"id": 53, "label": "    return result;", "line": 53, "node_type": "stmt"},
    {"id": 54, "label": "  }", "line": 54, "node_type": "stmt"},
    {"id": 55, "label": "", "line": 55, "node_type": "stmt"},
    {"id": 56, "label": "  /**", "line": 56, "node_type": "stmt"},
    {"id": 57, "label": "   * Given a string, return the index of the start of a line, after {@code start}.", "line": 57, "node_type": "stmt"},
    {"id": 58, "label": "   *", "line": 58, "node_type": "stmt"},
    {"id": 59, "label": "   * @param s the string in which to find the start of a line", "line": 59, "node_type": "stmt"},
    {"id": 60, "label": "   * @param start the index at which to start looking for the start of a line", "line": 60, "node_type": "stmt"},
    {"id": 61, "label": "   * @return the index of the start of a line, or -1 if no such exists", "line": 61, "node_type": "stmt"},
    {"id": 62, "label": "   */", "line": 62, "node_type": "stmt"},
    {"id": 63, "label": "    @NonNegative", "line": 63, "node_type": "stmt"},
    {"id": 64, "label": "  private static @IndexOrLow(\"#1\") int lineStartIndex(String s, int start) {", "line": 64, "node_type": "stmt"},
    {"id": 65, "label": "    if (s.length() == 0) {", "line": 65, "node_type": "stmt"},
    {"id": 66, "label": "      return -1;", "line": 66, "node_type": "stmt"},
    {"id": 67, "label": "    }", "line": 67, "node_type": "stmt"},
    {"id": 68, "label": "    if (start == 0) {", "line": 68, "node_type": "stmt"},
    {"id": 69, "label": "      // It doesn't make sense to call this routine with 0, but return 0 anyway.", "line": 69, "node_type": "stmt"},
    {"id": 70, "label": "      return 0;", "line": 70, "node_type": "stmt"},
    {"id": 71, "label": "    }", "line": 71, "node_type": "stmt"},
    {"id": 72, "label": "    if (start > s.length()) {", "line": 72, "node_type": "stmt"},
    {"id": 73, "label": "      return -1;", "line": 73, "node_type": "stmt"},
    {"id": 74, "label": "    }", "line": 74, "node_type": "stmt"},
    {"id": 75, "label": "    // possible line terminators:  \"\\n\", \"\\r\\n\", \"\\r\".", "line": 75, "node_type": "stmt"},
    {"id": 76, "label": "    @NonNegative", "line": 76, "node_type": "stmt"},
    {"id": 77, "label": "    int newlinePos = s.indexOf(\"\\n\", start - 1);", "line": 77, "node_type": "stmt"},
    {"id": 78, "label": "    int afterNewline = (newlinePos == -1) ? Integer.MAX_VALUE : newlinePos + 1;", "line": 78, "node_type": "stmt"},
    {"id": 79, "label": "    @NonNegative", "line": 79, "node_type": "stmt"},
    {"id": 80, "label": "    int returnPos1 = s.indexOf(\"\\r\\n\", start - 2);", "line": 80, "node_type": "stmt"},
    {"id": 81, "label": "    @NonNegative", "line": 81, "node_type": "stmt"},
    {"id": 82, "label": "    int returnPos2 = s.indexOf(\"\\r\", start - 1);", "line": 82, "node_type": "stmt"},
    {"id": 83, "label": "    int afterReturn1 = (returnPos1 == -1) ? Integer.MAX_VALUE : returnPos1 + 2;", "line": 83, "node_type": "stmt"},
    {"id": 84, "label": "    int afterReturn2 = (returnPos2 == -1) ? Integer.MAX_VALUE : returnPos2 + 1;", "line": 84, "node_type": "stmt"},
    {"id": 85, "label": "    int lineStart = Math.min(afterNewline, Math.min(afterReturn1, afterReturn2));", "line": 85, "node_type": "stmt"},
    {"id": 86, "label": "    if (lineStart >= s.length()) {", "line": 86, "node_type": "stmt"},
    {"id": 87, "label": "      return -1;", "line": 87, "node_type": "stmt"},
    {"id": 88, "label": "    } else {", "line": 88, "node_type": "stmt"},
    {"id": 89, "label": "      return lineStart;", "line": 89, "node_type": "stmt"},
    {"id": 90, "label": "    }", "line": 90, "node_type": "stmt"},
    {"id": 91, "label": "  }", "line": 91, "node_type": "stmt"},
    {"id": 92, "label": "", "line": 92, "node_type": "stmt"},
    {"id": 93, "label": "  /**", "line": 93, "node_type": "stmt"},
    {"id": 94, "label": "   * Given a string, return the index of the start of a line, after {@code start}.", "line": 94, "node_type": "stmt"},
    {"id": 95, "label": "   *", "line": 95, "node_type": "stmt"},
    {"id": 96, "label": "   * @param s the string in which to find the start of a line", "line": 96, "node_type": "stmt"},
    {"id": 97, "label": "   * @param start the index at which to start looking for the start of a line", "line": 97, "node_type": "stmt"},
    {"id": 98, "label": "   * @return the index of the start of a line, or -1 if no such exists", "line": 98, "node_type": "stmt"},
    {"id": 99, "label": "   */", "line": 99, "node_type": "stmt"},
    {"id": 100, "label": "    @Positive", "line": 100, "node_type": "stmt"},
    {"id": 101, "label": "  private static @LTLengthOf(\"#1\") int lineStartIndex2(String s, int start) {", "line": 101, "node_type": "stmt"},
    {"id": 102, "label": "    if (s.length() == 0) {", "line": 102, "node_type": "stmt"},
    {"id": 103, "label": "      return -1;", "line": 103, "node_type": "stmt"},
    {"id": 104, "label": "    }", "line": 104, "node_type": "stmt"},
    {"id": 105, "label": "    if (start == 0) {", "line": 105, "node_type": "stmt"},
    {"id": 106, "label": "      // It doesn't make sense to call this routine with 0, but return 0 anyway.", "line": 106, "node_type": "stmt"},
    {"id": 107, "label": "      return 0;", "line": 107, "node_type": "stmt"},
    {"id": 108, "label": "    }", "line": 108, "node_type": "stmt"},
    {"id": 109, "label": "    if (start > s.length()) {", "line": 109, "node_type": "stmt"},
    {"id": 110, "label": "      return -1;", "line": 110, "node_type": "stmt"},
    {"id": 111, "label": "    }", "line": 111, "node_type": "stmt"},
    {"id": 112, "label": "    // possible line terminators:  \"\\n\", \"\\r\\n\", \"\\r\".", "line": 112, "node_type": "stmt"},
    {"id": 113, "label": "    @NonNegative", "line": 113, "node_type": "stmt"},
    {"id": 114, "label": "    int newlinePos = s.indexOf(\"\\n\", start - 1);", "line": 114, "node_type": "stmt"},
    {"id": 115, "label": "    int afterNewline = (newlinePos == -1) ? Integer.MAX_VALUE : newlinePos + 1;", "line": 115, "node_type": "stmt"},
    {"id": 116, "label": "    @NonNegative", "line": 116, "node_type": "stmt"},
    {"id": 117, "label": "    int returnPos1 = s.indexOf(\"\\r\\n\", start - 2);", "line": 117, "node_type": "stmt"},
    {"id": 118, "label": "    @NonNegative", "line": 118, "node_type": "stmt"},
    {"id": 119, "label": "    int returnPos2 = s.indexOf(\"\\r\", start - 1);", "line": 119, "node_type": "stmt"},
    {"id": 120, "label": "    int afterReturn1 = (returnPos1 == -1) ? Integer.MAX_VALUE : returnPos1 + 2;", "line": 120, "node_type": "stmt"},
    {"id": 121, "label": "    int afterReturn2 = (returnPos2 == -1) ? Integer.MAX_VALUE : returnPos2 + 1;", "line": 121, "node_type": "stmt"},
    {"id": 122, "label": "    int lineStart = Math.min(afterNewline, Math.min(afterReturn1, afterReturn2));", "line": 122, "node_type": "stmt"},
    {"id": 123, "label": "    if (lineStart >= s.length()) {", "line": 123, "node_type": "stmt"},
    {"id": 124, "label": "      return -1;", "line": 124, "node_type": "stmt"},
    {"id": 125, "label": "    } else {", "line": 125, "node_type": "stmt"},
    {"id": 126, "label": "      return lineStart;", "line": 126, "node_type": "stmt"},
    {"id": 127, "label": "    }", "line": 127, "node_type": "stmt"},
    {"id": 128, "label": "  }", "line": 128, "node_type": "stmt"},
    {"id": 129, "label": "", "line": 129, "node_type": "stmt"},
    {"id": 130, "label": "  /**", "line": 130, "node_type": "stmt"},
    {"id": 131, "label": "   * Given a string, return the index of the start of a line, after {@code start}.", "line": 131, "node_type": "stmt"},
    {"id": 132, "label": "   *", "line": 132, "node_type": "stmt"},
    {"id": 133, "label": "   * @param s the string in which to find the start of a line", "line": 133, "node_type": "stmt"},
    {"id": 134, "label": "   * @param start the index at which to start looking for the start of a line", "line": 134, "node_type": "stmt"},
    {"id": 135, "label": "   * @return the index of the start of a line, or -1 if no such exists", "line": 135, "node_type": "stmt"},
    {"id": 136, "label": "   */", "line": 136, "node_type": "stmt"},
    {"id": 137, "label": "    @Positive", "line": 137, "node_type": "stmt"},
    {"id": 138, "label": "  private static @LTLengthOf(value = \"#1\", offset = \"1\") int lineStartIndex3(String s, int start) {", "line": 138, "node_type": "stmt"},
    {"id": 139, "label": "    if (s.length() == 0) {", "line": 139, "node_type": "stmt"},
    {"id": 140, "label": "      // :: error: (return)", "line": 140, "node_type": "stmt"},
    {"id": 141, "label": "      return -1;", "line": 141, "node_type": "stmt"},
    {"id": 142, "label": "    }", "line": 142, "node_type": "stmt"},
    {"id": 143, "label": "    if (start == 0) {", "line": 143, "node_type": "stmt"},
    {"id": 144, "label": "      // It doesn't make sense to call this routine with 0, but return 0 anyway.", "line": 144, "node_type": "stmt"},
    {"id": 145, "label": "      // :: error: (return)", "line": 145, "node_type": "stmt"},
    {"id": 146, "label": "      return 0;", "line": 146, "node_type": "stmt"},
    {"id": 147, "label": "    }", "line": 147, "node_type": "stmt"},
    {"id": 148, "label": "    if (start > s.length()) {", "line": 148, "node_type": "stmt"},
    {"id": 149, "label": "      return -1;", "line": 149, "node_type": "stmt"},
    {"id": 150, "label": "    }", "line": 150, "node_type": "stmt"},
    {"id": 151, "label": "    // possible line terminators:  \"\\n\", \"\\r\\n\", \"\\r\".", "line": 151, "node_type": "stmt"},
    {"id": 152, "label": "    @NonNegative", "line": 152, "node_type": "stmt"},
    {"id": 153, "label": "    int newlinePos = s.indexOf(\"\\n\", start - 1);", "line": 153, "node_type": "stmt"},
    {"id": 154, "label": "    int afterNewline = (newlinePos == -1) ? Integer.MAX_VALUE : newlinePos + 1;", "line": 154, "node_type": "stmt"},
    {"id": 155, "label": "    @NonNegative", "line": 155, "node_type": "stmt"},
    {"id": 156, "label": "    int returnPos1 = s.indexOf(\"\\r\\n\", start - 2);", "line": 156, "node_type": "stmt"},
    {"id": 157, "label": "    @NonNegative", "line": 157, "node_type": "stmt"},
    {"id": 158, "label": "    int returnPos2 = s.indexOf(\"\\r\", start - 1);", "line": 158, "node_type": "stmt"},
    {"id": 159, "label": "    int afterReturn1 = (returnPos1 == -1) ? Integer.MAX_VALUE : returnPos1 + 2;", "line": 159, "node_type": "stmt"},
    {"id": 160, "label": "    int afterReturn2 = (returnPos2 == -1) ? Integer.MAX_VALUE : returnPos2 + 1;", "line": 160, "node_type": "stmt"},
    {"id": 161, "label": "    int lineStart = Math.min(afterNewline, Math.min(afterReturn1, afterReturn2));", "line": 161, "node_type": "stmt"},
    {"id": 162, "label": "    if (lineStart >= s.length()) {", "line": 162, "node_type": "stmt"},
    {"id": 163, "label": "      return -1;", "line": 163, "node_type": "stmt"},
    {"id": 164, "label": "    } else {", "line": 164, "node_type": "stmt"},
    {"id": 165, "label": "      // :: error: (return)", "line": 165, "node_type": "stmt"},
    {"id": 166, "label": "      return lineStart;", "line": 166, "node_type": "stmt"},
    {"id": 167, "label": "    }", "line": 167, "node_type": "stmt"},
    {"id": 168, "label": "  }", "line": 168, "node_type": "stmt"}
  ],
  "control_edges": [
    {"source": 7, "target": 8, "type": "control"},
    {"source": 8, "target": 9, "type": "control"},
    {"source": 9, "target": 10, "type": "control"},
    {"source": 10, "target": 11, "type": "control"},
    {"source": 11, "target": 12, "type": "control"},
    {"source": 12, "target": 13, "type": "control"},
    {"source": 13, "target": 14, "type": "control"},
    {"source": 14, "target": 15, "type": "control"},
    {"source": 15, "target": 16, "type": "control"},
    {"source": 16, "target": 17, "type": "control"},
    {"source": 17, "target": 18, "type": "control"},
    {"source": 18, "target": 19, "type": "control"},
    {"source": 19, "target": 20, "type": "control"},
    {"source": 20, "target": 21, "type": "control"},
    {"source": 21, "target": 22, "type": "control"},
    {"source": 22, "target": 23, "type": "control"},
    {"source": 23, "target": 24, "type": "control"},
    {"source": 24, "target": 25, "type": "control"},
    {"source": 25, "target": 26, "type": "control"},
    {"source": 26, "target": 27, "type": "control"},
    {"source": 27, "target": 28, "type": "control"},
    {"source": 28, "target": 29, "type": "control"},
    {"source": 29, "target": 30, "type": "control"},
    {"source": 30, "target": 31, "type": "control"},
    {"source": 31, "target": 32, "type": "control"},
    {"source": 32, "target": 33, "type": "control"},
    {"source": 33, "target": 34, "type": "control"},
    {"source": 34, "target": 35, "type": "control"},
    {"source": 35, "target": 36, "type": "control"},
    {"source": 36, "target": 37, "type": "control"},
    {"source": 37, "target": 38, "type": "control"},
    {"source": 38, "target": 39, "type": "control"},
    {"source": 39, "target": 40, "type": "control"},
    {"source": 40, "target": 41, "type": "control"},
    {"source": 41, "target": 42, "type": "control"},
    {"source": 42, "target": 43, "type": "control"},
    {"source": 43, "target": 44, "type": "control"},
    {"source": 44, "target": 45, "type": "control"},
    {"source": 45, "target": 46, "type": "control"},
    {"source": 46, "target": 47, "type": "control"},
    {"source": 47, "target": 48, "type": "control"},
    {"source": 48, "target": 49, "type": "control"},
    {"source": 49, "target": 50, "type": "control"},
    {"source": 50, "target": 51, "type": "control"},
    {"source": 51, "target": 52, "type": "control"},
    {"source": 52, "target": 53, "type": "control"},
    {"source": 53, "target": 54, "type": "control"},
    {"source": 54, "target": 55, "type": "control"},
    {"source": 55, "target": 56, "type": "control"},
    {"source": 56, "target": 57, "type": "control"},
    {"source": 57, "target": 58, "type": "control"},
    {"source": 58, "target": 59, "type": "control"},
    {"source": 59, "target": 60, "type": "control"},
    {"source": 60, "target": 61, "type": "control"},
    {"source": 61, "target": 62, "type": "control"},
    {"source": 62, "target": 63, "type": "control"},
    {"source": 63, "target": 64, "type": "control"},
    {"source": 64, "target": 65, "type": "control"},
    {"source": 65, "target": 66, "type": "control"},
    {"source": 66, "target": 67, "type": "control"},
    {"source": 67, "target": 68, "type": "control"},
    {"source": 68, "target": 69, "type": "control"},
    {"source": 69, "target": 70, "type": "control"},
    {"source": 70, "target": 71, "type": "control"},
    {"source": 71, "target": 72, "type": "control"},
    {"source": 72, "target": 73, "type": "control"},
    {"source": 73, "target": 74, "type": "control"},
    {"source": 74, "target": 75, "type": "control"},
    {"source": 75, "target": 76, "type": "control"},
    {"source": 76, "target": 77, "type": "control"},
    {"source": 77, "target": 78, "type": "control"},
    {"source": 78, "target": 79, "type": "control"},
    {"source": 79, "target": 80, "type": "control"},
    {"source": 80, "target": 81, "type": "control"},
    {"source": 81, "target": 82, "type": "control"},
    {"source": 82, "target": 83, "type": "control"},
    {"source": 83, "target": 84, "type": "control"},
    {"source": 84, "target": 85, "type": "control"},
    {"source": 85, "target": 86, "type": "control"},
    {"source": 86, "target": 87, "type": "control"},
    {"source": 87, "target": 88, "type": "control"},
    {"source": 88, "target": 89, "type": "control"},
    {"source": 89, "target": 90, "type": "control"},
    {"source": 90, "target": 91, "type": "control"},
    {"source": 91, "target": 92, "type": "control"},
    {"source": 92, "target": 93, "type": "control"},
    {"source": 93, "target": 94, "type": "control"},
    {"source": 94, "target": 95, "type": "control"},
    {"source": 95, "target": 96, "type": "control"},
    {"source": 96, "target": 97, "type": "control"},
    {"source": 97, "target": 98, "type": "control"},
    {"source": 98, "target": 99, "type": "control"},
    {"source": 99, "target": 100, "type": "control"},
    {"source": 100, "target": 101, "type": "control"},
    {"source": 101, "target": 102, "type": "control"},
    {"source": 102, "target": 103, "type": "control"},
    {"source": 103, "target": 104, "type": "control"},
    {"source": 104, "target": 105, "type": "control"},
    {"source": 105, "target": 106, "type": "control"},
    {"source": 106, "target": 107, "type": "control"},
    {"source": 107, "target": 108, "type": "control"},
    {"source": 108, "target": 109, "type": "control"},
    {"source": 109, "target": 110, "type": "control"},
    {"source": 110, "target": 111, "type": "control"},
    {"source": 111, "target": 112, "type": "control"},
    {"source": 112, "target": 113, "type": "control"},
    {"source": 113, "target": 114, "type": "control"},
    {"source": 114, "target": 115, "type": "control"},
    {"source": 115, "target": 116, "type": "control"},
    {"source": 116, "target": 117, "type": "control"},
    {"source": 117, "target": 118, "type": "control"},
    {"source": 118, "target": 119, "type": "control"},
    {"source": 119, "target": 120, "type": "control"},
    {"source": 120, "target": 121, "type": "control"},
    {"source": 121, "target": 122, "type": "control"},
    {"source": 122, "target": 123, "type": "control"},
    {"source": 123, "target": 124, "type": "control"},
    {"source": 124, "target": 125, "type": "control"},
    {"source": 125, "target": 126, "type": "control"},
    {"source": 126, "target": 127, "type": "control"},
    {"source": 127, "target": 128, "type": "control"},
    {"source": 128, "target": 129, "type": "control"},
    {"source": 129, "target": 130, "type": "control"},
    {"source": 130, "target": 131, "type": "control"},
    {"source": 131, "target": 132, "type": "control"},
    {"source": 132, "target": 133, "type": "control"},
    {"source": 133, "target": 134, "type": "control"},
    {"source": 134, "target": 135, "type": "control"},
    {"source": 135, "target": 136, "type": "control"},
    {"source": 136, "target": 137, "type": "control"},
    {"source": 137, "target": 138, "type": "control"},
    {"source": 138, "target": 139, "type": "control"},
    {"source": 139, "target": 140, "type": "control"},
    {"source": 140, "target": 141, "type": "control"},
    {"source": 141, "target": 142, "type": "control"},
    {"source": 142, "target": 143, "type": "control"},
    {"source": 143, "target": 144, "type": "control"},
    {"source": 144, "target": 145, "type": "control"},
    {"source": 145, "target": 146, "type": "control"},
    {"source": 146, "target": 147, "type": "control"},
    {"source": 147, "target": 148, "type": "control"},
    {"source": 148, "target": 149, "type": "control"},
    {"source": 149, "target": 150, "type": "control"},
    {"source": 150, "target": 151, "type": "control"},
    {"source": 151, "target": 152, "type": "control"},
    {"source": 152, "target": 153, "type": "control"},
    {"source": 153, "target": 154, "type": "control"},
    {"source": 154, "target": 155, "type": "control"},
    {"source": 155, "target": 156, "type": "control"},
    {"source": 156, "target": 157, "type": "control"},
    {"source": 157, "target": 158, "type": "control"},
    {"source": 158, "target": 159, "type": "control"},
    {"source": 159, "target": 160, "type": "control"},
    {"source": 160, "target": 161, "type": "control"},
    {"source": 161, "target": 162, "type": "control"},
    {"source": 162, "target": 163, "type": "control"},
    {"source": 163, "target": 164, "type": "control"},
    {"source": 164, "target": 165, "type": "control"},
    {"source": 165, "target": 166, "type": "control"},
    {"source": 166, "target": 167, "type": "control"},
    {"source": 167, "target": 168, "type": "control"}
  ],
  "dataflow_edges": [
    {"source": 9, "target": 11, "type": "dataflow", "var": "lineStart"},
    {"source": 9, "target": 11, "type": "dataflow", "var": "s"},
    {"source": 10, "target": 12, "type": "dataflow", "var": "result"},
    {"source": 12, "target": 14, "type": "dataflow", "var": "result"},
    {"source": 11, "target": 14, "type": "dataflow", "var": "lineStart"},
    {"source": 14, "target": 16, "type": "dataflow", "var": "result"},
    {"source": 9, "target": 21, "type": "dataflow", "var": "String"},
    {"source": 11, "target": 21, "type": "dataflow", "var": "s"},
    {"source": 9, "target": 21, "type": "dataflow", "var": "GTENegativeOne"},
    {"source": 14, "target": 21, "type": "dataflow", "var": "lineStart"},
    {"source": 16, "target": 22, "type": "dataflow", "var": "result"},
    {"source": 21, "target": 23, "type": "dataflow", "var": "lineStart"},
    {"source": 21, "target": 23, "type": "dataflow", "var": "s"},
    {"source": 11, "target": 23, "type": "dataflow", "var": "length"},
    {"source": 22, "target": 24, "type": "dataflow", "var": "result"},
    {"source": 24, "target": 26, "type": "dataflow", "var": "result"},
    {"source": 23, "target": 26, "type": "dataflow", "var": "lineStart"},
    {"source": 26, "target": 28, "type": "dataflow", "var": "result"},
    {"source": 19, "target": 31, "type": "dataflow", "var": "Positive"},
    {"source": 20, "target": 32, "type": "dataflow", "var": "LTLengthOf"},
    {"source": 21, "target": 33, "type": "dataflow", "var": "String"},
    {"source": 23, "target": 33, "type": "dataflow", "var": "s"},
    {"source": 21, "target": 33, "type": "dataflow", "var": "GTENegativeOne"},
    {"source": 26, "target": 33, "type": "dataflow", "var": "lineStart"},
    {"source": 28, "target": 34, "type": "dataflow", "var": "result"},
    {"source": 33, "target": 35, "type": "dataflow", "var": "lineStart"},
    {"source": 33, "target": 35, "type": "dataflow", "var": "s"},
    {"source": 23, "target": 35, "type": "dataflow", "var": "length"},
    {"source": 34, "target": 36, "type": "dataflow", "var": "result"},
    {"source": 36, "target": 38, "type": "dataflow", "var": "result"},
    {"source": 35, "target": 38, "type": "dataflow", "var": "lineStart"},
    {"source": 38, "target": 41, "type": "dataflow", "var": "result"},
    {"source": 31, "target": 44, "type": "dataflow", "var": "Positive"},
    {"source": 32, "target": 45, "type": "dataflow", "var": "LTLengthOf"},
    {"source": 32, "target": 45, "type": "dataflow", "var": "value"},
    {"source": 32, "target": 45, "type": "dataflow", "var": "offset"},
    {"source": 33, "target": 46, "type": "dataflow", "var": "String"},
    {"source": 35, "target": 46, "type": "dataflow", "var": "s"},
    {"source": 33, "target": 46, "type": "dataflow", "var": "GTENegativeOne"},
    {"source": 38, "target": 46, "type": "dataflow", "var": "lineStart"},
    {"source": 41, "target": 47, "type": "dataflow", "var": "result"},
    {"source": 46, "target": 48, "type": "dataflow", "var": "lineStart"},
    {"source": 46, "target": 48, "type": "dataflow", "var": "s"},
    {"source": 35, "target": 48, "type": "dataflow", "var": "length"},
    {"source": 47, "target": 49, "type": "dataflow", "var": "result"},
    {"source": 49, "target": 51, "type": "dataflow", "var": "result"},
    {"source": 48, "target": 51, "type": "dataflow", "var": "lineStart"},
    {"source": 51, "target": 53, "type": "dataflow", "var": "result"},
    {"source": 48, "target": 59, "type": "dataflow", "var": "s"},
    {"source": 57, "target": 59, "type": "dataflow", "var": "the"},
    {"source": 57, "target": 59, "type": "dataflow", "var": "string"},
    {"source": 57, "target": 59, "type": "dataflow", "var": "start"},
    {"source": 57, "target": 59, "type": "dataflow", "var": "of"},
    {"source": 57, "target": 59, "type": "dataflow", "var": "a"},
    {"source": 57, "target": 59, "type": "dataflow", "var": "line"},
    {"source": 59, "target": 60, "type": "dataflow", "var": "param"},
    {"source": 59, "target": 60, "type": "dataflow", "var": "start"},
    {"source": 59, "target": 60, "type": "dataflow", "var": "the"},
    {"source": 57, "target": 60, "type": "dataflow", "var": "index"},
    {"source": 59, "target": 60, "type": "dataflow", "var": "which"},
    {"source": 59, "target": 60, "type": "dataflow", "var": "to"},
    {"source": 59, "target": 60, "type": "dataflow", "var": "of"},
    {"source": 59, "target": 60, "type": "dataflow", "var": "a"},
    {"source": 59, "target": 60, "type": "dataflow", "var": "line"},
    {"source": 60, "target": 61, "type": "dataflow", "var": "the"},
    {"source": 60, "target": 61, "type": "dataflow", "var": "index"},
    {"source": 60, "target": 61, "type": "dataflow", "var": "of"},
    {"source": 60, "target": 61, "type": "dataflow", "var": "start"},
    {"source": 60, "target": 61, "type": "dataflow", "var": "a"},
    {"source": 60, "target": 61, "type": "dataflow", "var": "line"},
    {"source": 7, "target": 63, "type": "dataflow", "var": "NonNegative"},
    {"source": 8, "target": 64, "type": "dataflow", "var": "IndexOrLow"},
    {"source": 46, "target": 64, "type": "dataflow", "var": "String"},
    {"source": 59, "target": 64, "type": "dataflow", "var": "s"},
    {"source": 61, "target": 64, "type": "dataflow", "var": "start"},
    {"source": 64, "target": 65, "type": "dataflow", "var": "s"},
    {"source": 48, "target": 65, "type": "dataflow", "var": "length"},
    {"source": 64, "target": 68, "type": "dataflow", "var": "start"},
    {"source": 60, "target": 69, "type": "dataflow", "var": "to"},
    {"source": 68, "target": 72, "type": "dataflow", "var": "start"},
    {"source": 65, "target": 72, "type": "dataflow", "var": "s"},
    {"source": 65, "target": 72, "type": "dataflow", "var": "length"},
    {"source": 61, "target": 75, "type": "dataflow", "var": "line"},
    {"source": 63, "target": 76, "type": "dataflow", "var": "NonNegative"},
    {"source": 72, "target": 77, "type": "dataflow", "var": "s"},
    {"source": 75, "target": 77, "type": "dataflow", "var": "n"},
    {"source": 72, "target": 77, "type": "dataflow", "var": "start"},
    {"source": 77, "target": 78, "type": "dataflow", "var": "newlinePos"},
    {"source": 76, "target": 79, "type": "dataflow", "var": "NonNegative"},
    {"source": 77, "target": 80, "type": "dataflow", "var": "s"},
    {"source": 77, "target": 80, "type": "dataflow", "var": "indexOf"},
    {"source": 75, "target": 80, "type": "dataflow", "var": "r"},
    {"source": 77, "target": 80, "type": "dataflow", "var": "n"},
    {"source": 77, "target": 80, "type": "dataflow", "var": "start"},
    {"source": 79, "target": 81, "type": "dataflow", "var": "NonNegative"},
    {"source": 80, "target": 82, "type": "dataflow", "var": "s"},
    {"source": 80, "target": 82, "type": "dataflow", "var": "indexOf"},
    {"source": 80, "target": 82, "type": "dataflow", "var": "r"},
    {"source": 80, "target": 82, "type": "dataflow", "var": "start"},
    {"source": 80, "target": 83, "type": "dataflow", "var": "returnPos1"},
    {"source": 78, "target": 83, "type": "dataflow", "var": "Integer"},
    {"source": 78, "target": 83, "type": "dataflow", "var": "MAX_VALUE"},
    {"source": 82, "target": 84, "type": "dataflow", "var": "returnPos2"},
    {"source": 83, "target": 84, "type": "dataflow", "var": "Integer"},
    {"source": 83, "target": 84, "type": "dataflow", "var": "MAX_VALUE"},
    {"source": 51, "target": 85, "type": "dataflow", "var": "lineStart"},
    {"source": 78, "target": 85, "type": "dataflow", "var": "afterNewline"},
    {"source": 83, "target": 85, "type": "dataflow", "var": "afterReturn1"},
    {"source": 84, "target": 85, "type": "dataflow", "var": "afterReturn2"},
    {"source": 85, "target": 86, "type": "dataflow", "var": "lineStart"},
    {"source": 82, "target": 86, "type": "dataflow", "var": "s"},
    {"source": 72, "target": 86, "type": "dataflow", "var": "length"},
    {"source": 86, "target": 89, "type": "dataflow", "var": "lineStart"},
    {"source": 57, "target": 94, "type": "dataflow", "var": "Given"},
    {"source": 61, "target": 94, "type": "dataflow", "var": "a"},
    {"source": 59, "target": 94, "type": "dataflow", "var": "string"},
    {"source": 61, "target": 94, "type": "dataflow", "var": "the"},
    {"source": 61, "target": 94, "type": "dataflow", "var": "index"},
    {"source": 61, "target": 94, "type": "dataflow", "var": "of"},
    {"source": 82, "target": 94, "type": "dataflow", "var": "start"},
    {"source": 75, "target": 94, "type": "dataflow", "var": "line"},
    {"source": 57, "target": 94, "type": "dataflow", "var": "after"},
    {"source": 57, "target": 94, "type": "dataflow", "var": "code"},
    {"source": 60, "target": 96, "type": "dataflow", "var": "param"},
    {"source": 86, "target": 96, "type": "dataflow", "var": "s"},
    {"source": 94, "target": 96, "type": "dataflow", "var": "the"},
    {"source": 94, "target": 96, "type": "dataflow", "var": "string"},
    {"source": 59, "target": 96, "type": "dataflow", "var": "in"},
    {"source": 60, "target": 96, "type": "dataflow", "var": "which"},
    {"source": 69, "target": 96, "type": "dataflow", "var": "to"},
    {"source": 59, "target": 96, "type": "dataflow", "var": "find"},
    {"source": 94, "target": 96, "type": "dataflow", "var": "start"},
    {"source": 94, "target": 96, "type": "dataflow", "var": "of"},
    {"source": 94, "target": 96, "type": "dataflow", "var": "a"},
    {"source": 94, "target": 96, "type": "dataflow", "var": "line"},
    {"source": 96, "target": 97, "type": "dataflow", "var": "param"},
    {"source": 96, "target": 97, "type": "dataflow", "var": "start"},
    {"source": 96, "target": 97, "type": "dataflow", "var": "the"},
    {"source": 94, "target": 97, "type": "dataflow", "var": "index"},
    {"source": 60, "target": 97, "type": "dataflow", "var": "at"},
    {"source": 96, "target": 97, "type": "dataflow", "var": "which"},
    {"source": 96, "target": 97, "type": "dataflow", "var": "to"},
    {"source": 60, "target": 97, "type": "dataflow", "var": "looking"},
    {"source": 96, "target": 97, "type": "dataflow", "var": "of"},
    {"source": 96, "target": 97, "type": "dataflow", "var": "a"},
    {"source": 96, "target": 97, "type": "dataflow", "var": "line"},
    {"source": 97, "target": 98, "type": "dataflow", "var": "the"},
    {"source": 97, "target": 98, "type": "dataflow", "var": "index"},
    {"source": 97, "target": 98, "type": "dataflow", "var": "of"},
    {"source": 97, "target": 98, "type": "dataflow", "var": "start"},
    {"source": 97, "target": 98, "type": "dataflow", "var": "a"},
    {"source": 97, "target": 98, "type": "dataflow", "var": "line"},
    {"source": 61, "target": 98, "type": "dataflow", "var": "or"},
    {"source": 61, "target": 98, "type": "dataflow", "var": "no"},
    {"source": 61, "target": 98, "type": "dataflow", "var": "such"},
    {"source": 61, "target": 98, "type": "dataflow", "var": "exists"},
    {"source": 44, "target": 100, "type": "dataflow", "var": "Positive"},
    {"source": 45, "target": 101, "type": "dataflow", "var": "LTLengthOf"},
    {"source": 64, "target": 101, "type": "dataflow", "var": "String"},
    {"source": 96, "target": 101, "type": "dataflow", "var": "s"},
    {"source": 98, "target": 101, "type": "dataflow", "var": "start"},
    {"source": 101, "target": 102, "type": "dataflow", "var": "s"},
    {"source": 86, "target": 102, "type": "dataflow", "var": "length"},
    {"source": 101, "target": 105, "type": "dataflow", "var": "start"},
    {"source": 69, "target": 106, "type": "dataflow", "var": "It"},
    {"source": 69, "target": 106, "type": "dataflow", "var": "doesn"},
    {"source": 69, "target": 106, "type": "dataflow", "var": "t"},
    {"source": 69, "target": 106, "type": "dataflow", "var": "make"},
    {"source": 69, "target": 106, "type": "dataflow", "var": "sense"},
    {"source": 97, "target": 106, "type": "dataflow", "var": "to"},
    {"source": 69, "target": 106, "type": "dataflow", "var": "call"},
    {"source": 69, "target": 106, "type": "dataflow", "var": "routine"},
    {"source": 69, "target": 106, "type": "dataflow", "var": "with"},
    {"source": 69, "target": 106, "type": "dataflow", "var": "but"},
    {"source": 69, "target": 106, "type": "dataflow", "var": "anyway"},
    {"source": 105, "target": 109, "type": "dataflow", "var": "start"},
    {"source": 102, "target": 109, "type": "dataflow", "var": "s"},
    {"source": 102, "target": 109, "type": "dataflow", "var": "length"},
    {"source": 75, "target": 112, "type": "dataflow", "var": "possible"},
    {"source": 98, "target": 112, "type": "dataflow", "var": "line"},
    {"source": 75, "target": 112, "type": "dataflow", "var": "terminators"},
    {"source": 80, "target": 112, "type": "dataflow", "var": "n"},
    {"source": 82, "target": 112, "type": "dataflow", "var": "r"},
    {"source": 81, "target": 113, "type": "dataflow", "var": "NonNegative"},
    {"source": 78, "target": 114, "type": "dataflow", "var": "newlinePos"},
    {"source": 109, "target": 114, "type": "dataflow", "var": "s"},
    {"source": 82, "target": 114, "type": "dataflow", "var": "indexOf"},
    {"source": 112, "target": 114, "type": "dataflow", "var": "n"},
    {"source": 109, "target": 114, "type": "dataflow", "var": "start"},
    {"source": 85, "target": 115, "type": "dataflow", "var": "afterNewline"},
    {"source": 114, "target": 115, "type": "dataflow", "var": "newlinePos"},
    {"source": 84, "target": 115, "type": "dataflow", "var": "Integer"},
    {"source": 84, "target": 115, "type": "dataflow", "var": "MAX_VALUE"},
    {"source": 113, "target": 116, "type": "dataflow", "var": "NonNegative"},
    {"source": 83, "target": 117, "type": "dataflow", "var": "returnPos1"},
    {"source": 114, "target": 117, "type": "dataflow", "var": "s"},
    {"source": 114, "target": 117, "type": "dataflow", "var": "indexOf"},
    {"source": 112, "target": 117, "type": "dataflow", "var": "r"},
    {"source": 114, "target": 117, "type": "dataflow", "var": "n"},
    {"source": 114, "target": 117, "type": "dataflow", "var": "start"},
    {"source": 116, "target": 118, "type": "dataflow", "var": "NonNegative"},
    {"source": 84, "target": 119, "type": "dataflow", "var": "returnPos2"},
    {"source": 117, "target": 119, "type": "dataflow", "var": "s"},
    {"source": 117, "target": 119, "type": "dataflow", "var": "indexOf"},
    {"source": 117, "target": 119, "type": "dataflow", "var": "r"},
    {"source": 117, "target": 119, "type": "dataflow", "var": "start"},
    {"source": 85, "target": 120, "type": "dataflow", "var": "afterReturn1"},
    {"source": 117, "target": 120, "type": "dataflow", "var": "returnPos1"},
    {"source": 115, "target": 120, "type": "dataflow", "var": "Integer"},
    {"source": 115, "target": 120, "type": "dataflow", "var": "MAX_VALUE"},
    {"source": 85, "target": 121, "type": "dataflow", "var": "afterReturn2"},
    {"source": 119, "target": 121, "type": "dataflow", "var": "returnPos2"},
    {"source": 120, "target": 121, "type": "dataflow", "var": "Integer"},
    {"source": 120, "target": 121, "type": "dataflow", "var": "MAX_VALUE"},
    {"source": 89, "target": 122, "type": "dataflow", "var": "lineStart"},
    {"source": 85, "target": 122, "type": "dataflow", "var": "Math"},
    {"source": 85, "target": 122, "type": "dataflow", "var": "min"},
    {"source": 115, "target": 122, "type": "dataflow", "var": "afterNewline"},
    {"source": 120, "target": 122, "type": "dataflow", "var": "afterReturn1"},
    {"source": 121, "target": 122, "type": "dataflow", "var": "afterReturn2"},
    {"source": 122, "target": 123, "type": "dataflow", "var": "lineStart"},
    {"source": 119, "target": 123, "type": "dataflow", "var": "s"},
    {"source": 109, "target": 123, "type": "dataflow", "var": "length"},
    {"source": 123, "target": 126, "type": "dataflow", "var": "lineStart"},
    {"source": 94, "target": 131, "type": "dataflow", "var": "Given"},
    {"source": 98, "target": 131, "type": "dataflow", "var": "a"},
    {"source": 96, "target": 131, "type": "dataflow", "var": "string"},
    {"source": 98, "target": 131, "type": "dataflow", "var": "the"},
    {"source": 98, "target": 131, "type": "dataflow", "var": "index"},
    {"source": 98, "target": 131, "type": "dataflow", "var": "of"},
    {"source": 119, "target": 131, "type": "dataflow", "var": "start"},
    {"source": 112, "target": 131, "type": "dataflow", "var": "line"},
    {"source": 94, "target": 131, "type": "dataflow", "var": "after"},
    {"source": 94, "target": 131, "type": "dataflow", "var": "code"},
    {"source": 97, "target": 133, "type": "dataflow", "var": "param"},
    {"source": 123, "target": 133, "type": "dataflow", "var": "s"},
    {"source": 131, "target": 133, "type": "dataflow", "var": "the"},
    {"source": 131, "target": 133, "type": "dataflow", "var": "string"},
    {"source": 96, "target": 133, "type": "dataflow", "var": "in"},
    {"source": 97, "target": 133, "type": "dataflow", "var": "which"},
    {"source": 106, "target": 133, "type": "dataflow", "var": "to"},
    {"source": 96, "target": 133, "type": "dataflow", "var": "find"},
    {"source": 131, "target": 133, "type": "dataflow", "var": "start"},
    {"source": 131, "target": 133, "type": "dataflow", "var": "of"},
    {"source": 131, "target": 133, "type": "dataflow", "var": "a"},
    {"source": 131, "target": 133, "type": "dataflow", "var": "line"},
    {"source": 133, "target": 134, "type": "dataflow", "var": "param"},
    {"source": 133, "target": 134, "type": "dataflow", "var": "start"},
    {"source": 133, "target": 134, "type": "dataflow", "var": "the"},
    {"source": 131, "target": 134, "type": "dataflow", "var": "index"},
    {"source": 97, "target": 134, "type": "dataflow", "var": "at"},
    {"source": 133, "target": 134, "type": "dataflow", "var": "which"},
    {"source": 133, "target": 134, "type": "dataflow", "var": "to"},
    {"source": 97, "target": 134, "type": "dataflow", "var": "looking"},
    {"source": 133, "target": 134, "type": "dataflow", "var": "of"},
    {"source": 133, "target": 134, "type": "dataflow", "var": "a"},
    {"source": 133, "target": 134, "type": "dataflow", "var": "line"},
    {"source": 134, "target": 135, "type": "dataflow", "var": "the"},
    {"source": 134, "target": 135, "type": "dataflow", "var": "index"},
    {"source": 134, "target": 135, "type": "dataflow", "var": "of"},
    {"source": 134, "target": 135, "type": "dataflow", "var": "start"},
    {"source": 134, "target": 135, "type": "dataflow", "var": "a"},
    {"source": 134, "target": 135, "type": "dataflow", "var": "line"},
    {"source": 98, "target": 135, "type": "dataflow", "var": "or"},
    {"source": 98, "target": 135, "type": "dataflow", "var": "no"},
    {"source": 98, "target": 135, "type": "dataflow", "var": "such"},
    {"source": 98, "target": 135, "type": "dataflow", "var": "exists"},
    {"source": 100, "target": 137, "type": "dataflow", "var": "Positive"},
    {"source": 101, "target": 138, "type": "dataflow", "var": "LTLengthOf"},
    {"source": 45, "target": 138, "type": "dataflow", "var": "value"},
    {"source": 45, "target": 138, "type": "dataflow", "var": "offset"},
    {"source": 101, "target": 138, "type": "dataflow", "var": "String"},
    {"source": 133, "target": 138, "type": "dataflow", "var": "s"},
    {"source": 135, "target": 138, "type": "dataflow", "var": "start"},
    {"source": 138, "target": 139, "type": "dataflow", "var": "s"},
    {"source": 123, "target": 139, "type": "dataflow", "var": "length"},
    {"source": 40, "target": 140, "type": "dataflow", "var": "error"},
    {"source": 138, "target": 143, "type": "dataflow", "var": "start"},
    {"source": 106, "target": 144, "type": "dataflow", "var": "It"},
    {"source": 106, "target": 144, "type": "dataflow", "var": "doesn"},
    {"source": 106, "target": 144, "type": "dataflow", "var": "t"},
    {"source": 106, "target": 144, "type": "dataflow", "var": "make"},
    {"source": 106, "target": 144, "type": "dataflow", "var": "sense"},
    {"source": 134, "target": 144, "type": "dataflow", "var": "to"},
    {"source": 106, "target": 144, "type": "dataflow", "var": "call"},
    {"source": 106, "target": 144, "type": "dataflow", "var": "routine"},
    {"source": 106, "target": 144, "type": "dataflow", "var": "with"},
    {"source": 106, "target": 144, "type": "dataflow", "var": "but"},
    {"source": 106, "target": 144, "type": "dataflow", "var": "anyway"},
    {"source": 140, "target": 145, "type": "dataflow", "var": "error"},
    {"source": 143, "target": 148, "type": "dataflow", "var": "start"},
    {"source": 139, "target": 148, "type": "dataflow", "var": "s"},
    {"source": 139, "target": 148, "type": "dataflow", "var": "length"},
    {"source": 112, "target": 151, "type": "dataflow", "var": "possible"},
    {"source": 135, "target": 151, "type": "dataflow", "var": "line"},
    {"source": 112, "target": 151, "type": "dataflow", "var": "terminators"},
    {"source": 117, "target": 151, "type": "dataflow", "var": "n"},
    {"source": 119, "target": 151, "type": "dataflow", "var": "r"},
    {"source": 118, "target": 152, "type": "dataflow", "var": "NonNegative"},
    {"source": 115, "target": 153, "type": "dataflow", "var": "newlinePos"},
    {"source": 148, "target": 153, "type": "dataflow", "var": "s"},
    {"source": 119, "target": 153, "type": "dataflow", "var": "indexOf"},
    {"source": 151, "target": 153, "type": "dataflow", "var": "n"},
    {"source": 148, "target": 153, "type": "dataflow", "var": "start"},
    {"source": 122, "target": 154, "type": "dataflow", "var": "afterNewline"},
    {"source": 153, "target": 154, "type": "dataflow", "var": "newlinePos"},
    {"source": 121, "target": 154, "type": "dataflow", "var": "Integer"},
    {"source": 121, "target": 154, "type": "dataflow", "var": "MAX_VALUE"},
    {"source": 152, "target": 155, "type": "dataflow", "var": "NonNegative"},
    {"source": 120, "target": 156, "type": "dataflow", "var": "returnPos1"},
    {"source": 153, "target": 156, "type": "dataflow", "var": "s"},
    {"source": 153, "target": 156, "type": "dataflow", "var": "indexOf"},
    {"source": 151, "target": 156, "type": "dataflow", "var": "r"},
    {"source": 153, "target": 156, "type": "dataflow", "var": "n"},
    {"source": 153, "target": 156, "type": "dataflow", "var": "start"},
    {"source": 155, "target": 157, "type": "dataflow", "var": "NonNegative"},
    {"source": 121, "target": 158, "type": "dataflow", "var": "returnPos2"},
    {"source": 156, "target": 158, "type": "dataflow", "var": "s"},
    {"source": 156, "target": 158, "type": "dataflow", "var": "indexOf"},
    {"source": 156, "target": 158, "type": "dataflow", "var": "r"},
    {"source": 156, "target": 158, "type": "dataflow", "var": "start"},
    {"source": 122, "target": 159, "type": "dataflow", "var": "afterReturn1"},
    {"source": 156, "target": 159, "type": "dataflow", "var": "returnPos1"},
    {"source": 154, "target": 159, "type": "dataflow", "var": "Integer"},
    {"source": 154, "target": 159, "type": "dataflow", "var": "MAX_VALUE"},
    {"source": 122, "target": 160, "type": "dataflow", "var": "afterReturn2"},
    {"source": 158, "target": 160, "type": "dataflow", "var": "returnPos2"},
    {"source": 159, "target": 160, "type": "dataflow", "var": "Integer"},
    {"source": 159, "target": 160, "type": "dataflow", "var": "MAX_VALUE"},
    {"source": 126, "target": 161, "type": "dataflow", "var": "lineStart"},
    {"source": 122, "target": 161, "type": "dataflow", "var": "Math"},
    {"source": 122, "target": 161, "type": "dataflow", "var": "min"},
    {"source": 154, "target": 161, "type": "dataflow", "var": "afterNewline"},
    {"source": 159, "target": 161, "type": "dataflow", "var": "afterReturn1"},
    {"source": 160, "target": 161, "type": "dataflow", "var": "afterReturn2"},
    {"source": 161, "target": 162, "type": "dataflow", "var": "lineStart"},
    {"source": 158, "target": 162, "type": "dataflow", "var": "s"},
    {"source": 148, "target": 162, "type": "dataflow", "var": "length"},
    {"source": 145, "target": 165, "type": "dataflow", "var": "error"},
    {"source": 162, "target": 166, "type": "dataflow", "var": "lineStart"}
  ]
}
