{
  "method_name": "slice",
  "nodes": [
    {"id": 6, "label": "public class InvalidSubsequence {", "line": 6, "node_type": "stmt"},
    {"id": 7, "label": "  // :: error: (flowexpr.parse.error) :: error: (not.final)", "line": 7, "node_type": "stmt"},
    {"id": 8, "label": "  @HasSubsequence(subsequence = \"banana\", from = \"this.from\", to = \"this.to\")", "line": 8, "node_type": "stmt"},
    {"id": 9, "label": "  int[] a;", "line": 9, "node_type": "stmt"},
    {"id": 10, "label": "", "line": 10, "node_type": "stmt"},
    {"id": 11, "label": "  // :: error: (flowexpr.parse.error) :: error: (not.final)", "line": 11, "node_type": "stmt"},
    {"id": 12, "label": "  @HasSubsequence(subsequence = \"this\", from = \"banana\", to = \"this.to\")", "line": 12, "node_type": "stmt"},
    {"id": 13, "label": "  int[] b;", "line": 13, "node_type": "stmt"},
    {"id": 14, "label": "", "line": 14, "node_type": "stmt"},
    {"id": 15, "label": "  // :: error: (flowexpr.parse.error) :: error: (not.final)", "line": 15, "node_type": "stmt"},
    {"id": 16, "label": "  @HasSubsequence(subsequence = \"this\", from = \"this.from\", to = \"banana\")", "line": 16, "node_type": "stmt"},
    {"id": 17, "label": "  int[] c;", "line": 17, "node_type": "stmt"},
    {"id": 18, "label": "", "line": 18, "node_type": "stmt"},
    {"id": 19, "label": "  // :: error: (not.final)", "line": 19, "node_type": "stmt"},
    {"id": 20, "label": "  @HasSubsequence(subsequence = \"this\", from = \"this.from\", to = \"10\")", "line": 20, "node_type": "stmt"},
    {"id": 21, "label": "  int[] e;", "line": 21, "node_type": "stmt"},
    {"id": 22, "label": "", "line": 22, "node_type": "stmt"},
    {"id": 23, "label": "    @NonNegative", "line": 23, "node_type": "stmt"},
    {"id": 24, "label": "  @IndexFor(\"a\") @LessThan(\"to\") int from;", "line": 24, "node_type": "stmt"},
    {"id": 25, "label": "", "line": 25, "node_type": "stmt"},
    {"id": 26, "label": "    @NonNegative", "line": 26, "node_type": "stmt"}
  ],
  "control_edges": [
    {"source": 6, "target": 7, "type": "control"},
    {"source": 7, "target": 8, "type": "control"},
    {"source": 8, "target": 9, "type": "control"},
    {"source": 9, "target": 10, "type": "control"},
    {"source": 10, "target": 11, "type": "control"},
    {"source": 11, "target": 12, "type": "control"},
    {"source": 12, "target": 13, "type": "control"},
    {"source": 13, "target": 14, "type": "control"},
    {"source": 14, "target": 15, "type": "control"},
    {"source": 15, "target": 16, "type": "control"},
    {"source": 16, "target": 17, "type": "control"},
    {"source": 17, "target": 18, "type": "control"},
    {"source": 18, "target": 19, "type": "control"},
    {"source": 19, "target": 20, "type": "control"},
    {"source": 20, "target": 21, "type": "control"},
    {"source": 21, "target": 22, "type": "control"},
    {"source": 22, "target": 23, "type": "control"},
    {"source": 23, "target": 24, "type": "control"},
    {"source": 24, "target": 25, "type": "control"},
    {"source": 25, "target": 26, "type": "control"}
  ],
  "dataflow_edges": [
    {"source": 7, "target": 11, "type": "dataflow", "var": "error"},
    {"source": 7, "target": 11, "type": "dataflow", "var": "flowexpr"},
    {"source": 7, "target": 11, "type": "dataflow", "var": "parse"},
    {"source": 7, "target": 11, "type": "dataflow", "var": "not"},
    {"source": 8, "target": 12, "type": "dataflow", "var": "HasSubsequence"},
    {"source": 8, "target": 12, "type": "dataflow", "var": "subsequence"},
    {"source": 8, "target": 12, "type": "dataflow", "var": "from"},
    {"source": 8, "target": 12, "type": "dataflow", "var": "banana"},
    {"source": 8, "target": 12, "type": "dataflow", "var": "to"},
    {"source": 11, "target": 15, "type": "dataflow", "var": "error"},
    {"source": 11, "target": 15, "type": "dataflow", "var": "flowexpr"},
    {"source": 11, "target": 15, "type": "dataflow", "var": "parse"},
    {"source": 11, "target": 15, "type": "dataflow", "var": "not"},
    {"source": 12, "target": 16, "type": "dataflow", "var": "HasSubsequence"},
    {"source": 12, "target": 16, "type": "dataflow", "var": "subsequence"},
    {"source": 12, "target": 16, "type": "dataflow", "var": "from"},
    {"source": 12, "target": 16, "type": "dataflow", "var": "to"},
    {"source": 12, "target": 16, "type": "dataflow", "var": "banana"},
    {"source": 15, "target": 19, "type": "dataflow", "var": "error"},
    {"source": 15, "target": 19, "type": "dataflow", "var": "not"},
    {"source": 16, "target": 20, "type": "dataflow", "var": "HasSubsequence"},
    {"source": 16, "target": 20, "type": "dataflow", "var": "subsequence"},
    {"source": 16, "target": 20, "type": "dataflow", "var": "from"},
    {"source": 16, "target": 20, "type": "dataflow", "var": "to"},
    {"source": 9, "target": 24, "type": "dataflow", "var": "a"},
    {"source": 20, "target": 24, "type": "dataflow", "var": "to"},
    {"source": 20, "target": 24, "type": "dataflow", "var": "from"},
    {"source": 23, "target": 26, "type": "dataflow", "var": "NonNegative"}
  ]
}
