{
  "method_name": "indexOf",
  "nodes": [
    {"id": 25, "label": "  private LessThanCustomCollection(int[] array) {", "line": 25, "node_type": "stmt"},
    {"id": 26, "label": "    this(array, 0, array.length);", "line": 26, "node_type": "stmt"},
    {"id": 27, "label": "  }", "line": 27, "node_type": "stmt"},
    {"id": 28, "label": "", "line": 28, "node_type": "stmt"},
    {"id": 29, "label": "  private LessThanCustomCollection(", "line": 29, "node_type": "stmt"},
    {"id": 30, "label": "    @NonNegative", "line": 30, "node_type": "stmt"},
    {"id": 31, "label": "      int[] array, @IndexOrHigh(\"#1\") @LessThan(\"#3 + 1\") int start, @IndexOrHigh(\"#1\") int end) {", "line": 31, "node_type": "stmt"},
    {"id": 32, "label": "    this.array = array;", "line": 32, "node_type": "stmt"},
    {"id": 33, "label": "    // can't est. that end - start is the length of this.", "line": 33, "node_type": "stmt"},
    {"id": 34, "label": "    // :: error: (assignment)", "line": 34, "node_type": "stmt"},
    {"id": 35, "label": "    this.end = end;", "line": 35, "node_type": "stmt"},
    {"id": 36, "label": "    // start is @LessThan(end + 1) but should be @LessThan(this.end + 1)", "line": 36, "node_type": "stmt"},
    {"id": 37, "label": "    // :: error: (assignment)", "line": 37, "node_type": "stmt"},
    {"id": 38, "label": "    this.start = start;", "line": 38, "node_type": "stmt"},
    {"id": 39, "label": "  }", "line": 39, "node_type": "stmt"},
    {"id": 40, "label": "", "line": 40, "node_type": "stmt"},
    {"id": 41, "label": "  @Pure", "line": 41, "node_type": "stmt"},
    {"id": 42, "label": "    @Positive", "line": 42, "node_type": "stmt"},
    {"id": 43, "label": "  public @LengthOf(\"this\") int length() {", "line": 43, "node_type": "stmt"},
    {"id": 44, "label": "    return end - start;", "line": 44, "node_type": "stmt"},
    {"id": 45, "label": "  }", "line": 45, "node_type": "stmt"},
    {"id": 46, "label": "", "line": 46, "node_type": "stmt"},
    {"id": 47, "label": "    @NonNegative", "line": 47, "node_type": "stmt"},
    {"id": 48, "label": "  public double get(@IndexFor(\"this\") int index) {", "line": 48, "node_type": "stmt"},
    {"id": 49, "label": "    // TODO: This is a bug.", "line": 49, "node_type": "stmt"},
    {"id": 50, "label": "    // :: error: (argument)", "line": 50, "node_type": "stmt"},
    {"id": 51, "label": "    checkElementIndex(index, length());", "line": 51, "node_type": "stmt"},
    {"id": 52, "label": "    // Because index is an index for \"this\" the index + start", "line": 52, "node_type": "stmt"},
    {"id": 53, "label": "    // must be an index for array.", "line": 53, "node_type": "stmt"},
    {"id": 54, "label": "    // :: error: (array.access.unsafe.high)", "line": 54, "node_type": "stmt"},
    {"id": 55, "label": "    return array[start + index];", "line": 55, "node_type": "stmt"},
    {"id": 56, "label": "  }", "line": 56, "node_type": "stmt"},
    {"id": 57, "label": "", "line": 57, "node_type": "stmt"},
    {"id": 58, "label": "    @NonNegative", "line": 58, "node_type": "stmt"},
    {"id": 59, "label": "  public static @NonNegative int checkElementIndex(", "line": 59, "node_type": "stmt"},
    {"id": 60, "label": "    @Positive", "line": 60, "node_type": "stmt"},
    {"id": 61, "label": "      @LessThan(\"#2\") @NonNegative int index, @NonNegative int size) {", "line": 61, "node_type": "stmt"},
    {"id": 62, "label": "    if (index < 0 || index >= size) {", "line": 62, "node_type": "stmt"},
    {"id": 63, "label": "      throw new IndexOutOfBoundsException();", "line": 63, "node_type": "stmt"},
    {"id": 64, "label": "    }", "line": 64, "node_type": "stmt"},
    {"id": 65, "label": "    return index;", "line": 65, "node_type": "stmt"},
    {"id": 66, "label": "  }", "line": 66, "node_type": "stmt"},
    {"id": 67, "label": "", "line": 67, "node_type": "stmt"},
    {"id": 68, "label": "    @NonNegative", "line": 68, "node_type": "stmt"},
    {"id": 69, "label": "  public @IndexOrLow(\"this\") int indexOf(double target) {", "line": 69, "node_type": "stmt"},
    {"id": 70, "label": "    for (int i = start; i < end; i++) {", "line": 70, "node_type": "stmt"},
    {"id": 71, "label": "      if (areEqual(array[i], target)) {", "line": 71, "node_type": "stmt"},
    {"id": 72, "label": "        // Don't know that it is greater than start.", "line": 72, "node_type": "stmt"},
    {"id": 73, "label": "        // :: error: (return)", "line": 73, "node_type": "stmt"},
    {"id": 74, "label": "        return i - start;", "line": 74, "node_type": "stmt"},
    {"id": 75, "label": "      }", "line": 75, "node_type": "stmt"},
    {"id": 76, "label": "    }", "line": 76, "node_type": "stmt"},
    {"id": 77, "label": "    return -1;", "line": 77, "node_type": "stmt"},
    {"id": 78, "label": "  }", "line": 78, "node_type": "stmt"}
  ],
  "control_edges": [
    {"source": 25, "target": 26, "type": "control"},
    {"source": 26, "target": 27, "type": "control"},
    {"source": 27, "target": 28, "type": "control"},
    {"source": 28, "target": 29, "type": "control"},
    {"source": 29, "target": 30, "type": "control"},
    {"source": 30, "target": 31, "type": "control"},
    {"source": 31, "target": 32, "type": "control"},
    {"source": 32, "target": 33, "type": "control"},
    {"source": 33, "target": 34, "type": "control"},
    {"source": 34, "target": 35, "type": "control"},
    {"source": 35, "target": 36, "type": "control"},
    {"source": 36, "target": 37, "type": "control"},
    {"source": 37, "target": 38, "type": "control"},
    {"source": 38, "target": 39, "type": "control"},
    {"source": 39, "target": 40, "type": "control"},
    {"source": 40, "target": 41, "type": "control"},
    {"source": 41, "target": 42, "type": "control"},
    {"source": 42, "target": 43, "type": "control"},
    {"source": 43, "target": 44, "type": "control"},
    {"source": 44, "target": 45, "type": "control"},
    {"source": 45, "target": 46, "type": "control"},
    {"source": 46, "target": 47, "type": "control"},
    {"source": 47, "target": 48, "type": "control"},
    {"source": 48, "target": 49, "type": "control"},
    {"source": 49, "target": 50, "type": "control"},
    {"source": 50, "target": 51, "type": "control"},
    {"source": 51, "target": 52, "type": "control"},
    {"source": 52, "target": 53, "type": "control"},
    {"source": 53, "target": 54, "type": "control"},
    {"source": 54, "target": 55, "type": "control"},
    {"source": 55, "target": 56, "type": "control"},
    {"source": 56, "target": 57, "type": "control"},
    {"source": 57, "target": 58, "type": "control"},
    {"source": 58, "target": 59, "type": "control"},
    {"source": 59, "target": 60, "type": "control"},
    {"source": 60, "target": 61, "type": "control"},
    {"source": 61, "target": 62, "type": "control"},
    {"source": 62, "target": 63, "type": "control"},
    {"source": 63, "target": 64, "type": "control"},
    {"source": 64, "target": 65, "type": "control"},
    {"source": 65, "target": 66, "type": "control"},
    {"source": 66, "target": 67, "type": "control"},
    {"source": 67, "target": 68, "type": "control"},
    {"source": 68, "target": 69, "type": "control"},
    {"source": 69, "target": 70, "type": "control"},
    {"source": 70, "target": 71, "type": "control"},
    {"source": 71, "target": 72, "type": "control"},
    {"source": 72, "target": 73, "type": "control"},
    {"source": 73, "target": 74, "type": "control"},
    {"source": 74, "target": 75, "type": "control"},
    {"source": 75, "target": 76, "type": "control"},
    {"source": 76, "target": 77, "type": "control"},
    {"source": 77, "target": 78, "type": "control"}
  ],
  "dataflow_edges": [
    {"source": 25, "target": 26, "type": "dataflow", "var": "array"},
    {"source": 25, "target": 29, "type": "dataflow", "var": "LessThanCustomCollection"},
    {"source": 26, "target": 31, "type": "dataflow", "var": "array"},
    {"source": 31, "target": 32, "type": "dataflow", "var": "array"},
    {"source": 31, "target": 33, "type": "dataflow", "var": "end"},
    {"source": 31, "target": 33, "type": "dataflow", "var": "start"},
    {"source": 26, "target": 33, "type": "dataflow", "var": "length"},
    {"source": 33, "target": 35, "type": "dataflow", "var": "end"},
    {"source": 33, "target": 36, "type": "dataflow", "var": "start"},
    {"source": 33, "target": 36, "type": "dataflow", "var": "is"},
    {"source": 31, "target": 36, "type": "dataflow", "var": "LessThan"},
    {"source": 35, "target": 36, "type": "dataflow", "var": "end"},
    {"source": 34, "target": 37, "type": "dataflow", "var": "error"},
    {"source": 34, "target": 37, "type": "dataflow", "var": "assignment"},
    {"source": 36, "target": 38, "type": "dataflow", "var": "start"},
    {"source": 33, "target": 43, "type": "dataflow", "var": "length"},
    {"source": 36, "target": 44, "type": "dataflow", "var": "end"},
    {"source": 38, "target": 44, "type": "dataflow", "var": "start"},
    {"source": 30, "target": 47, "type": "dataflow", "var": "NonNegative"},
    {"source": 36, "target": 49, "type": "dataflow", "var": "is"},
    {"source": 37, "target": 50, "type": "dataflow", "var": "error"},
    {"source": 48, "target": 51, "type": "dataflow", "var": "index"},
    {"source": 43, "target": 51, "type": "dataflow", "var": "length"},
    {"source": 51, "target": 52, "type": "dataflow", "var": "index"},
    {"source": 49, "target": 52, "type": "dataflow", "var": "is"},
    {"source": 33, "target": 52, "type": "dataflow", "var": "the"},
    {"source": 44, "target": 52, "type": "dataflow", "var": "start"},
    {"source": 36, "target": 53, "type": "dataflow", "var": "be"},
    {"source": 52, "target": 53, "type": "dataflow", "var": "an"},
    {"source": 52, "target": 53, "type": "dataflow", "var": "index"},
    {"source": 32, "target": 53, "type": "dataflow", "var": "array"},
    {"source": 50, "target": 54, "type": "dataflow", "var": "error"},
    {"source": 53, "target": 54, "type": "dataflow", "var": "array"},
    {"source": 54, "target": 55, "type": "dataflow", "var": "array"},
    {"source": 52, "target": 55, "type": "dataflow", "var": "start"},
    {"source": 53, "target": 55, "type": "dataflow", "var": "index"},
    {"source": 47, "target": 58, "type": "dataflow", "var": "NonNegative"},
    {"source": 58, "target": 59, "type": "dataflow", "var": "NonNegative"},
    {"source": 51, "target": 59, "type": "dataflow", "var": "checkElementIndex"},
    {"source": 42, "target": 60, "type": "dataflow", "var": "Positive"},
    {"source": 36, "target": 61, "type": "dataflow", "var": "LessThan"},
    {"source": 59, "target": 61, "type": "dataflow", "var": "NonNegative"},
    {"source": 55, "target": 61, "type": "dataflow", "var": "index"},
    {"source": 61, "target": 62, "type": "dataflow", "var": "index"},
    {"source": 61, "target": 62, "type": "dataflow", "var": "size"},
    {"source": 62, "target": 65, "type": "dataflow", "var": "index"},
    {"source": 61, "target": 68, "type": "dataflow", "var": "NonNegative"},
    {"source": 55, "target": 70, "type": "dataflow", "var": "start"},
    {"source": 44, "target": 70, "type": "dataflow", "var": "end"},
    {"source": 55, "target": 71, "type": "dataflow", "var": "array"},
    {"source": 70, "target": 71, "type": "dataflow", "var": "i"},
    {"source": 69, "target": 71, "type": "dataflow", "var": "target"},
    {"source": 33, "target": 72, "type": "dataflow", "var": "t"},
    {"source": 33, "target": 72, "type": "dataflow", "var": "that"},
    {"source": 52, "target": 72, "type": "dataflow", "var": "is"},
    {"source": 70, "target": 72, "type": "dataflow", "var": "start"},
    {"source": 54, "target": 73, "type": "dataflow", "var": "error"},
    {"source": 71, "target": 74, "type": "dataflow", "var": "i"},
    {"source": 72, "target": 74, "type": "dataflow", "var": "start"}
  ]
}
