{
  "method_name": "MinLenIndexFor",
  "java_file": null,
  "nodes": [
    {
      "id": 0,
      "label": "/*",
      "line": 1,
      "node_type": "stmt"
    },
    {
      "id": 1,
      "label": "* CFWR augmentation: inserted irrelevant code for data augmentation.",
      "line": 2,
      "node_type": "stmt"
    },
    {
      "id": 2,
      "label": "*/",
      "line": 3,
      "node_type": "stmt"
    },
    {
      "id": 3,
      "label": "import org.checkerframework.checker.index.qual.IndexFor;",
      "line": 4,
      "node_type": "stmt"
    },
    {
      "id": 4,
      "label": "import org.checkerframework.checker.index.qual.IndexOrHigh;",
      "line": 5,
      "node_type": "stmt"
    },
    {
      "id": 5,
      "label": "import org.checkerframework.common.value.qual.MinLen;",
      "line": 6,
      "node_type": "stmt"
    },
    {
      "id": 6,
      "label": "",
      "line": 7,
      "node_type": "stmt"
    },
    {
      "id": 7,
      "label": "public class MinLenIndexFor {",
      "line": 8,
      "node_type": "stmt"
    },
    {
      "id": 8,
      "label": "",
      "line": 9,
      "node_type": "stmt"
    },
    {
      "id": 9,
      "label": "void callTest(int x) {",
      "line": 10,
      "node_type": "stmt"
    },
    {
      "id": 10,
      "label": "for (int __cfwr_i9 = 0; __cfwr_i9 < 5; __cfwr_i9++) {",
      "line": 11,
      "node_type": "stmt"
    },
    {
      "id": 11,
      "label": "short __cfwr_val95 = null;",
      "line": 12,
      "node_type": "stmt"
    },
    {
      "id": 12,
      "label": "}",
      "line": 13,
      "node_type": "stmt"
    },
    {
      "id": 13,
      "label": "",
      "line": 14,
      "node_type": "stmt"
    },
    {
      "id": 14,
      "label": "test(0);",
      "line": 15,
      "node_type": "stmt"
    },
    {
      "id": 15,
      "label": "te",
      "line": 16,
      "node_type": "stmt"
    },
    {
      "id": 16,
      "label": "for (int __cfwr_i40 = 0; __cfwr_i40 < 5; __cfwr_i40++) {",
      "line": 17,
      "node_type": "stmt"
    },
    {
      "id": 17,
      "label": "boolean __cfwr_node4 = true;",
      "line": 18,
      "node_type": "stmt"
    },
    {
      "id": 18,
      "label": "}",
      "line": 19,
      "node_type": "stmt"
    },
    {
      "id": 19,
      "label": "st(1);",
      "line": 20,
      "node_type": "stmt"
    },
    {
      "id": 20,
      "label": "test(2);",
      "line": 21,
      "node_type": "stmt"
    },
    {
      "id": 21,
      "label": "test(3);",
      "line": 22,
      "node_type": "stmt"
    },
    {
      "id": 22,
      "label": "test(arrayLen2.length - 1);",
      "line": 23,
      "node_type": "stmt"
    },
    {
      "id": 23,
      "label": "}",
      "line": 24,
      "node_type": "stmt"
    },
    {
      "id": 24,
      "label": "Double __cfwr_util885() {",
      "line": 25,
      "node_type": "stmt"
    },
    {
      "id": 25,
      "label": "for (int __cfwr_i14 = 0; __cfwr_i14 < 3; __cfwr_i14++) {",
      "line": 26,
      "node_type": "stmt"
    },
    {
      "id": 26,
      "label": "String __cfwr_var90 = \"test5\";",
      "line": 27,
      "node_type": "stmt"
    },
    {
      "id": 27,
      "label": "}",
      "line": 28,
      "node_type": "stmt"
    },
    {
      "id": 28,
      "label": "return null;",
      "line": 29,
      "node_type": "stmt"
    },
    {
      "id": 29,
      "label": "}",
      "line": 30,
      "node_type": "stmt"
    },
    {
      "id": 30,
      "label": "static Object __cfwr_compute970() {",
      "line": 31,
      "node_type": "stmt"
    },
    {
      "id": 31,
      "label": "if (((null % null) % null) && true) {",
      "line": 32,
      "node_type": "stmt"
    },
    {
      "id": 32,
      "label": "try {",
      "line": 33,
      "node_type": "stmt"
    },
    {
      "id": 33,
      "label": "try {",
      "line": 34,
      "node_type": "stmt"
    },
    {
      "id": 34,
      "label": "return null;",
      "line": 35,
      "node_type": "stmt"
    },
    {
      "id": 35,
      "label": "} catch (Exception __cfwr_e40) {",
      "line": 36,
      "node_type": "stmt"
    },
    {
      "id": 36,
      "label": "// ignore",
      "line": 37,
      "node_type": "stmt"
    },
    {
      "id": 37,
      "label": "}",
      "line": 38,
      "node_type": "stmt"
    },
    {
      "id": 38,
      "label": "} catch (Exception __cfwr_e31) {",
      "line": 39,
      "node_type": "stmt"
    },
    {
      "id": 39,
      "label": "// ignore",
      "line": 40,
      "node_type": "stmt"
    },
    {
      "id": 40,
      "label": "}",
      "line": 41,
      "node_type": "stmt"
    },
    {
      "id": 41,
      "label": "}",
      "line": 42,
      "node_type": "stmt"
    },
    {
      "id": 42,
      "label": "Boolean __cfwr_result67 = null;",
      "line": 43,
      "node_type": "stmt"
    },
    {
      "id": 43,
      "label": "Character __cfwr_node90 = null;",
      "line": 44,
      "node_type": "stmt"
    },
    {
      "id": 44,
      "label": "return (null / 71.56);",
      "line": 45,
      "node_type": "stmt"
    },
    {
      "id": 45,
      "label": "return null;",
      "line": 46,
      "node_type": "stmt"
    },
    {
      "id": 46,
      "label": "}",
      "line": 47,
      "node_type": "stmt"
    },
    {
      "id": 47,
      "label": "}",
      "line": 48,
      "node_type": "stmt"
    }
  ],
  "edges": [
    {
      "source": 0,
      "target": 1
    },
    {
      "source": 1,
      "target": 2
    },
    {
      "source": 1,
      "target": 10,
      "variable": "for"
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 3,
      "target": 4,
      "variable": "import"
    },
    {
      "source": 3,
      "target": 4,
      "variable": "org"
    },
    {
      "source": 3,
      "target": 4,
      "variable": "checkerframework"
    },
    {
      "source": 3,
      "target": 4,
      "variable": "checker"
    },
    {
      "source": 3,
      "target": 4,
      "variable": "index"
    },
    {
      "source": 3,
      "target": 4,
      "variable": "qual"
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 4,
      "target": 5,
      "variable": "import"
    },
    {
      "source": 4,
      "target": 5,
      "variable": "org"
    },
    {
      "source": 4,
      "target": 5,
      "variable": "checkerframework"
    },
    {
      "source": 4,
      "target": 5,
      "variable": "qual"
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 6,
      "target": 7
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 8,
      "target": 9
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 9,
      "target": 10,
      "variable": "int"
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 10,
      "target": 16,
      "variable": "for"
    },
    {
      "source": 10,
      "target": 16,
      "variable": "int"
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 12,
      "target": 13
    },
    {
      "source": 13,
      "target": 14
    },
    {
      "source": 14,
      "target": 15
    },
    {
      "source": 14,
      "target": 20,
      "variable": "test"
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 16,
      "target": 17
    },
    {
      "source": 16,
      "target": 25,
      "variable": "for"
    },
    {
      "source": 16,
      "target": 25,
      "variable": "int"
    },
    {
      "source": 17,
      "target": 18
    },
    {
      "source": 18,
      "target": 19
    },
    {
      "source": 19,
      "target": 20
    },
    {
      "source": 20,
      "target": 21
    },
    {
      "source": 20,
      "target": 21,
      "variable": "test"
    },
    {
      "source": 21,
      "target": 22
    },
    {
      "source": 21,
      "target": 22,
      "variable": "test"
    },
    {
      "source": 22,
      "target": 23
    },
    {
      "source": 23,
      "target": 24
    },
    {
      "source": 24,
      "target": 25
    },
    {
      "source": 25,
      "target": 26
    },
    {
      "source": 26,
      "target": 27
    },
    {
      "source": 27,
      "target": 28
    },
    {
      "source": 28,
      "target": 29
    },
    {
      "source": 28,
      "target": 34,
      "variable": "return"
    },
    {
      "source": 29,
      "target": 30
    },
    {
      "source": 30,
      "target": 31
    },
    {
      "source": 31,
      "target": 32
    },
    {
      "source": 32,
      "target": 33
    },
    {
      "source": 32,
      "target": 33,
      "variable": "try"
    },
    {
      "source": 33,
      "target": 34
    },
    {
      "source": 34,
      "target": 35
    },
    {
      "source": 34,
      "target": 44,
      "variable": "return"
    },
    {
      "source": 35,
      "target": 36
    },
    {
      "source": 35,
      "target": 38,
      "variable": "catch"
    },
    {
      "source": 35,
      "target": 38,
      "variable": "Exception"
    },
    {
      "source": 36,
      "target": 37
    },
    {
      "source": 36,
      "target": 39,
      "variable": "ignore"
    },
    {
      "source": 37,
      "target": 38
    },
    {
      "source": 38,
      "target": 39
    },
    {
      "source": 39,
      "target": 40
    },
    {
      "source": 40,
      "target": 41
    },
    {
      "source": 41,
      "target": 42
    },
    {
      "source": 42,
      "target": 43
    },
    {
      "source": 43,
      "target": 44
    },
    {
      "source": 44,
      "target": 45
    },
    {
      "source": 44,
      "target": 45,
      "variable": "return"
    },
    {
      "source": 45,
      "target": 46
    },
    {
      "source": 46,
      "target": 47
    }
  ],
  "control_edges": [
    {
      "source": 0,
      "target": 1
    },
    {
      "source": 1,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 6,
      "target": 7
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 8,
      "target": 9
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 12,
      "target": 13
    },
    {
      "source": 13,
      "target": 14
    },
    {
      "source": 14,
      "target": 15
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 16,
      "target": 17
    },
    {
      "source": 17,
      "target": 18
    },
    {
      "source": 18,
      "target": 19
    },
    {
      "source": 19,
      "target": 20
    },
    {
      "source": 20,
      "target": 21
    },
    {
      "source": 21,
      "target": 22
    },
    {
      "source": 22,
      "target": 23
    },
    {
      "source": 23,
      "target": 24
    },
    {
      "source": 24,
      "target": 25
    },
    {
      "source": 25,
      "target": 26
    },
    {
      "source": 26,
      "target": 27
    },
    {
      "source": 27,
      "target": 28
    },
    {
      "source": 28,
      "target": 29
    },
    {
      "source": 29,
      "target": 30
    },
    {
      "source": 30,
      "target": 31
    },
    {
      "source": 31,
      "target": 32
    },
    {
      "source": 32,
      "target": 33
    },
    {
      "source": 33,
      "target": 34
    },
    {
      "source": 34,
      "target": 35
    },
    {
      "source": 35,
      "target": 36
    },
    {
      "source": 36,
      "target": 37
    },
    {
      "source": 37,
      "target": 38
    },
    {
      "source": 38,
      "target": 39
    },
    {
      "source": 39,
      "target": 40
    },
    {
      "source": 40,
      "target": 41
    },
    {
      "source": 41,
      "target": 42
    },
    {
      "source": 42,
      "target": 43
    },
    {
      "source": 43,
      "target": 44
    },
    {
      "source": 44,
      "target": 45
    },
    {
      "source": 45,
      "target": 46
    },
    {
      "source": 46,
      "target": 47
    }
  ],
  "dataflow_edges": [
    {
      "source": 1,
      "target": 10,
      "variable": "for"
    },
    {
      "source": 3,
      "target": 4,
      "variable": "import"
    },
    {
      "source": 3,
      "target": 4,
      "variable": "org"
    },
    {
      "source": 3,
      "target": 4,
      "variable": "checkerframework"
    },
    {
      "source": 3,
      "target": 4,
      "variable": "checker"
    },
    {
      "source": 3,
      "target": 4,
      "variable": "index"
    },
    {
      "source": 3,
      "target": 4,
      "variable": "qual"
    },
    {
      "source": 4,
      "target": 5,
      "variable": "import"
    },
    {
      "source": 4,
      "target": 5,
      "variable": "org"
    },
    {
      "source": 4,
      "target": 5,
      "variable": "checkerframework"
    },
    {
      "source": 4,
      "target": 5,
      "variable": "qual"
    },
    {
      "source": 9,
      "target": 10,
      "variable": "int"
    },
    {
      "source": 10,
      "target": 16,
      "variable": "for"
    },
    {
      "source": 10,
      "target": 16,
      "variable": "int"
    },
    {
      "source": 14,
      "target": 20,
      "variable": "test"
    },
    {
      "source": 16,
      "target": 25,
      "variable": "for"
    },
    {
      "source": 16,
      "target": 25,
      "variable": "int"
    },
    {
      "source": 20,
      "target": 21,
      "variable": "test"
    },
    {
      "source": 21,
      "target": 22,
      "variable": "test"
    },
    {
      "source": 28,
      "target": 34,
      "variable": "return"
    },
    {
      "source": 32,
      "target": 33,
      "variable": "try"
    },
    {
      "source": 34,
      "target": 44,
      "variable": "return"
    },
    {
      "source": 35,
      "target": 38,
      "variable": "catch"
    },
    {
      "source": 35,
      "target": 38,
      "variable": "Exception"
    },
    {
      "source": 36,
      "target": 39,
      "variable": "ignore"
    },
    {
      "source": 44,
      "target": 45,
      "variable": "return"
    }
  ]
}