{
  "method_name": "__cfwr_temp50",
  "java_file": null,
  "nodes": [
    {
      "id": 0,
      "label": "Entry",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 1,
      "label": "Exit",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 2,
      "label": "While(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operator=*))",
      "line": 23,
      "node_type": "control"
    },
    {
      "id": 3,
      "label": "While(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true))",
      "line": 29,
      "node_type": "control"
    },
    {
      "id": 4,
      "label": "Try",
      "line": 28,
      "node_type": "control"
    },
    {
      "id": 5,
      "label": "If(BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='Q'), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='N'), operator=^), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=>>), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=11.08f), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=64.21), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='0'), operator=|), operator=>>), operator=&&))",
      "line": 26,
      "node_type": "control"
    },
    {
      "id": 6,
      "label": "If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=&&))",
      "line": 27,
      "node_type": "control"
    },
    {
      "id": 7,
      "label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null))",
      "line": 30,
      "node_type": "control"
    },
    {
      "id": 8,
      "label": "Catch(__cfwr_e99)",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 9,
      "label": "Catch(__cfwr_e32)",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 10,
      "label": "Break",
      "line": 43,
      "node_type": "control"
    },
    {
      "id": 11,
      "label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false))",
      "line": 45,
      "node_type": "control"
    }
  ],
  "edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 2,
      "target": 11
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 3,
      "target": 7
    },
    {
      "source": 3,
      "target": 10
    },
    {
      "source": 3,
      "target": 10
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 4,
      "target": 3
    },
    {
      "source": 4,
      "target": 8
    },
    {
      "source": 4,
      "target": 9
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 5,
      "target": 10
    },
    {
      "source": 6,
      "target": 4
    },
    {
      "source": 6,
      "target": 10
    },
    {
      "source": 8,
      "target": 10
    },
    {
      "source": 9,
      "target": 10
    }
  ],
  "control_edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 2,
      "target": 11
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 3,
      "target": 7
    },
    {
      "source": 3,
      "target": 10
    },
    {
      "source": 3,
      "target": 10
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 4,
      "target": 3
    },
    {
      "source": 4,
      "target": 8
    },
    {
      "source": 4,
      "target": 9
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 5,
      "target": 10
    },
    {
      "source": 6,
      "target": 4
    },
    {
      "source": 6,
      "target": 10
    },
    {
      "source": 8,
      "target": 10
    },
    {
      "source": 9,
      "target": 10
    }
  ],
  "dataflow_edges": []
}