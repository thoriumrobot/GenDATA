{
  "method_name": "__cfwr_aux275",
  "java_file": null,
  "nodes": [
    {
      "id": 0,
      "label": "Entry",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 1,
      "label": "Exit",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 2,
      "label": "While(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=817L), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=|))",
      "line": 35,
      "node_type": "control"
    },
    {
      "id": 3,
      "label": "For(BinaryOperation(operandl=MemberReference(member=__cfwr_i27, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=<))",
      "line": 36,
      "node_type": "control"
    },
    {
      "id": 4,
      "label": "While(BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=63.44f), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=109), operator=%), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=&))",
      "line": 37,
      "node_type": "control"
    },
    {
      "id": 5,
      "label": "Try",
      "line": 53,
      "node_type": "control"
    },
    {
      "id": 6,
      "label": "For(BinaryOperation(operandl=MemberReference(member=__cfwr_i80, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), operator=<))",
      "line": 39,
      "node_type": "control"
    },
    {
      "id": 7,
      "label": "While(BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=58.82), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=^), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=43.88), operator=^))",
      "line": 40,
      "node_type": "control"
    },
    {
      "id": 8,
      "label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"test99\"))",
      "line": 41,
      "node_type": "control"
    },
    {
      "id": 9,
      "label": "Update(MemberReference(member=__cfwr_i80, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[]))",
      "line": 39,
      "node_type": "control"
    },
    {
      "id": 10,
      "label": "Catch(__cfwr_e34)",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 11,
      "label": "Break",
      "line": 60,
      "node_type": "control"
    },
    {
      "id": 12,
      "label": "Update(MemberReference(member=__cfwr_i27, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[]))",
      "line": 36,
      "node_type": "control"
    },
    {
      "id": 13,
      "label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null))",
      "line": 54,
      "node_type": "control"
    },
    {
      "id": 14,
      "label": "Catch(__cfwr_e92)",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 15,
      "label": "While(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='P'), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=/))",
      "line": 58,
      "node_type": "control"
    },
    {
      "id": 16,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), name=__cfwr_val90)], modifiers=set(), type=BasicType(dimensions=[], name=boolean))",
      "line": 59,
      "node_type": "control"
    },
    {
      "id": 17,
      "label": "For(BinaryOperation(operandl=MemberReference(member=__cfwr_i43, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6), operator=<))",
      "line": 62,
      "node_type": "control"
    },
    {
      "id": 18,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=23.35), name=__cfwr_obj80)], modifiers=set(), type=BasicType(dimensions=[], name=double))",
      "line": 63,
      "node_type": "control"
    },
    {
      "id": 19,
      "label": "Update(MemberReference(member=__cfwr_i43, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[]))",
      "line": 62,
      "node_type": "control"
    },
    {
      "id": 20,
      "label": "Return(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=130), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=755), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=<<), operator=+))",
      "line": 65,
      "node_type": "control"
    }
  ],
  "edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 2,
      "target": 5
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 3,
      "target": 11
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 4,
      "target": 12
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 5,
      "target": 10
    },
    {
      "source": 5,
      "target": 13
    },
    {
      "source": 5,
      "target": 14
    },
    {
      "source": 6,
      "target": 7
    },
    {
      "source": 6,
      "target": 11
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 7,
      "target": 9
    },
    {
      "source": 9,
      "target": 6
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 12,
      "target": 3
    },
    {
      "source": 14,
      "target": 15
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 17
    },
    {
      "source": 16,
      "target": 11
    },
    {
      "source": 17,
      "target": 18
    },
    {
      "source": 17,
      "target": 20
    },
    {
      "source": 18,
      "target": 19
    },
    {
      "source": 19,
      "target": 17
    }
  ],
  "control_edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 2,
      "target": 5
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 3,
      "target": 11
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 4,
      "target": 12
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 5,
      "target": 10
    },
    {
      "source": 5,
      "target": 13
    },
    {
      "source": 5,
      "target": 14
    },
    {
      "source": 6,
      "target": 7
    },
    {
      "source": 6,
      "target": 11
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 7,
      "target": 9
    },
    {
      "source": 9,
      "target": 6
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 12,
      "target": 3
    },
    {
      "source": 14,
      "target": 15
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 17
    },
    {
      "source": 16,
      "target": 11
    },
    {
      "source": 17,
      "target": 18
    },
    {
      "source": 17,
      "target": 20
    },
    {
      "source": 18,
      "target": 19
    },
    {
      "source": 19,
      "target": 17
    }
  ],
  "dataflow_edges": []
}