{
  "method_name": "__cfwr_func868",
  "java_file": null,
  "nodes": [
    {
      "id": 0,
      "label": "Entry",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 1,
      "label": "Exit",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 2,
      "label": "Try",
      "line": 58,
      "node_type": "control"
    },
    {
      "id": 3,
      "label": "While(BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=14.47f), operator=/), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operator=/))",
      "line": 56,
      "node_type": "control"
    },
    {
      "id": 4,
      "label": "If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=47.71f), operator=^), operator=&), operator=&&))",
      "line": 57,
      "node_type": "control"
    },
    {
      "id": 5,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=45.96), name=__cfwr_val82)], modifiers=set(), type=BasicType(dimensions=[], name=double))",
      "line": 59,
      "node_type": "control"
    },
    {
      "id": 6,
      "label": "Catch(__cfwr_e44)",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 7,
      "label": "Break",
      "line": 73,
      "node_type": "control"
    },
    {
      "id": 8,
      "label": "Catch(__cfwr_e15)",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 9,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_elem61)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Float, sub_type=None))",
      "line": 69,
      "node_type": "control"
    },
    {
      "id": 10,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='u'), name=__cfwr_temp4)], modifiers=set(), type=BasicType(dimensions=[], name=char))",
      "line": 70,
      "node_type": "control"
    },
    {
      "id": 11,
      "label": "While(BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=604), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=+))",
      "line": 71,
      "node_type": "control"
    },
    {
      "id": 12,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_var46)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Boolean, sub_type=None))",
      "line": 72,
      "node_type": "control"
    },
    {
      "id": 13,
      "label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null))",
      "line": 75,
      "node_type": "control"
    }
  ],
  "edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 2,
      "target": 5
    },
    {
      "source": 2,
      "target": 6
    },
    {
      "source": 2,
      "target": 8
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 3,
      "target": 9
    },
    {
      "source": 4,
      "target": 2
    },
    {
      "source": 4,
      "target": 7
    },
    {
      "source": 5,
      "target": 7
    },
    {
      "source": 6,
      "target": 7
    },
    {
      "source": 8,
      "target": 9
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 11,
      "target": 13
    },
    {
      "source": 11,
      "target": 13
    },
    {
      "source": 12,
      "target": 7
    },
    {
      "source": 12,
      "target": 7
    }
  ],
  "control_edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 2,
      "target": 5
    },
    {
      "source": 2,
      "target": 6
    },
    {
      "source": 2,
      "target": 8
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 3,
      "target": 9
    },
    {
      "source": 4,
      "target": 2
    },
    {
      "source": 4,
      "target": 7
    },
    {
      "source": 5,
      "target": 7
    },
    {
      "source": 6,
      "target": 7
    },
    {
      "source": 8,
      "target": 9
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 11,
      "target": 13
    },
    {
      "source": 11,
      "target": 13
    },
    {
      "source": 12,
      "target": 7
    },
    {
      "source": 12,
      "target": 7
    }
  ],
  "dataflow_edges": []
}