{
  "method_name": "LessThanOrEqualTransfer",
  "java_file": null,
  "nodes": [
    {
      "id": 0,
      "label": "/*",
      "line": 1,
      "node_type": "stmt"
    },
    {
      "id": 1,
      "label": "* CFWR augmentation: inserted irrelevant code for data augmentation.",
      "line": 2,
      "node_type": "stmt"
    },
    {
      "id": 2,
      "label": "*/",
      "line": 3,
      "node_type": "stmt"
    },
    {
      "id": 3,
      "label": "import org.checkerframework.common.value.qual.MinLen;",
      "line": 4,
      "node_type": "stmt"
    },
    {
      "id": 4,
      "label": "",
      "line": 5,
      "node_type": "stmt"
    },
    {
      "id": 5,
      "label": "public class LessThanOrEqualTransfer {",
      "line": 6,
      "node_type": "stmt"
    },
    {
      "id": 6,
      "label": "",
      "line": 7,
      "node_type": "stmt"
    },
    {
      "id": 7,
      "label": "void lte_bad_check(int[] a) {",
      "line": 8,
      "node_type": "stmt"
    },
    {
      "id": 8,
      "label": "return null;",
      "line": 9,
      "node_type": "stmt"
    },
    {
      "id": 9,
      "label": "",
      "line": 10,
      "node_type": "stmt"
    },
    {
      "id": 10,
      "label": "",
      "line": 11,
      "node_type": "stmt"
    },
    {
      "id": 11,
      "label": "for (int __cfwr_i89 = 0; __cfwr_i89 < 1; __cfwr_i89++) {",
      "line": 12,
      "node_type": "stmt"
    },
    {
      "id": 12,
      "label": "try {",
      "line": 13,
      "node_type": "stmt"
    },
    {
      "id": 13,
      "label": "for (int __cfwr_i99 = 0; __cfwr_i99 < 10; __cfwr_i99++) {",
      "line": 14,
      "node_type": "stmt"
    },
    {
      "id": 14,
      "label": "String __cfwr_node80 = \"data92\";",
      "line": 15,
      "node_type": "stmt"
    },
    {
      "id": 15,
      "label": "}",
      "line": 16,
      "node_type": "stmt"
    },
    {
      "id": 16,
      "label": "} catch (Exception __cfwr_e71) {",
      "line": 17,
      "node_type": "stmt"
    },
    {
      "id": 17,
      "label": "// ignore",
      "line": 18,
      "node_type": "stmt"
    },
    {
      "id": 18,
      "label": "}",
      "line": 19,
      "node_type": "stmt"
    },
    {
      "id": 19,
      "label": "}",
      "line": 20,
      "node_type": "stmt"
    },
    {
      "id": 20,
      "label": "if (1 <= a.length) {",
      "line": 21,
      "node_type": "stmt"
    },
    {
      "id": 21,
      "label": "int @MinLen(2) [] b = a;",
      "line": 22,
      "node_type": "stmt"
    },
    {
      "id": 22,
      "label": "}",
      "line": 23,
      "node_type": "stmt"
    },
    {
      "id": 23,
      "label": "}",
      "line": 24,
      "node_type": "stmt"
    },
    {
      "id": 24,
      "label": "static long __cfwr_process841(Long __cfwr_p0, Character __cfwr_p1) {",
      "line": 25,
      "node_type": "stmt"
    },
    {
      "id": 25,
      "label": "for (int __cfwr_i6 = 0; __cfwr_i6 < 8; __cfwr_i6++) {",
      "line": 26,
      "node_type": "stmt"
    },
    {
      "id": 26,
      "label": "for (int __cfwr_i92 = 0; __cfwr_i92 < 1; __cfwr_i92++) {",
      "line": 27,
      "node_type": "stmt"
    },
    {
      "id": 27,
      "label": "return null;",
      "line": 28,
      "node_type": "stmt"
    },
    {
      "id": 28,
      "label": "}",
      "line": 29,
      "node_type": "stmt"
    },
    {
      "id": 29,
      "label": "}",
      "line": 30,
      "node_type": "stmt"
    },
    {
      "id": 30,
      "label": "return -222L;",
      "line": 31,
      "node_type": "stmt"
    },
    {
      "id": 31,
      "label": "}",
      "line": 32,
      "node_type": "stmt"
    },
    {
      "id": 32,
      "label": "}",
      "line": 33,
      "node_type": "stmt"
    }
  ],
  "edges": [
    {
      "source": 0,
      "target": 1
    },
    {
      "source": 1,
      "target": 2
    },
    {
      "source": 1,
      "target": 11,
      "variable": "for"
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 3,
      "target": 21,
      "variable": "MinLen"
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 6,
      "target": 7
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 7,
      "target": 11,
      "variable": "int"
    },
    {
      "source": 7,
      "target": 20,
      "variable": "a"
    },
    {
      "source": 8,
      "target": 9
    },
    {
      "source": 8,
      "target": 27,
      "variable": "return"
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 11,
      "target": 13,
      "variable": "for"
    },
    {
      "source": 11,
      "target": 13,
      "variable": "int"
    },
    {
      "source": 12,
      "target": 13
    },
    {
      "source": 13,
      "target": 14
    },
    {
      "source": 13,
      "target": 21,
      "variable": "int"
    },
    {
      "source": 13,
      "target": 25,
      "variable": "for"
    },
    {
      "source": 14,
      "target": 15
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 16,
      "target": 17
    },
    {
      "source": 17,
      "target": 18
    },
    {
      "source": 18,
      "target": 19
    },
    {
      "source": 19,
      "target": 20
    },
    {
      "source": 20,
      "target": 21
    },
    {
      "source": 20,
      "target": 21,
      "variable": "a"
    },
    {
      "source": 21,
      "target": 22
    },
    {
      "source": 21,
      "target": 25,
      "variable": "int"
    },
    {
      "source": 22,
      "target": 23
    },
    {
      "source": 23,
      "target": 24
    },
    {
      "source": 24,
      "target": 25
    },
    {
      "source": 25,
      "target": 26
    },
    {
      "source": 25,
      "target": 26,
      "variable": "for"
    },
    {
      "source": 25,
      "target": 26,
      "variable": "int"
    },
    {
      "source": 26,
      "target": 27
    },
    {
      "source": 27,
      "target": 28
    },
    {
      "source": 27,
      "target": 30,
      "variable": "return"
    },
    {
      "source": 28,
      "target": 29
    },
    {
      "source": 29,
      "target": 30
    },
    {
      "source": 30,
      "target": 31
    },
    {
      "source": 31,
      "target": 32
    }
  ],
  "control_edges": [
    {
      "source": 0,
      "target": 1
    },
    {
      "source": 1,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 6,
      "target": 7
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 8,
      "target": 9
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 12,
      "target": 13
    },
    {
      "source": 13,
      "target": 14
    },
    {
      "source": 14,
      "target": 15
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 16,
      "target": 17
    },
    {
      "source": 17,
      "target": 18
    },
    {
      "source": 18,
      "target": 19
    },
    {
      "source": 19,
      "target": 20
    },
    {
      "source": 20,
      "target": 21
    },
    {
      "source": 21,
      "target": 22
    },
    {
      "source": 22,
      "target": 23
    },
    {
      "source": 23,
      "target": 24
    },
    {
      "source": 24,
      "target": 25
    },
    {
      "source": 25,
      "target": 26
    },
    {
      "source": 26,
      "target": 27
    },
    {
      "source": 27,
      "target": 28
    },
    {
      "source": 28,
      "target": 29
    },
    {
      "source": 29,
      "target": 30
    },
    {
      "source": 30,
      "target": 31
    },
    {
      "source": 31,
      "target": 32
    }
  ],
  "dataflow_edges": [
    {
      "source": 1,
      "target": 11,
      "variable": "for"
    },
    {
      "source": 3,
      "target": 21,
      "variable": "MinLen"
    },
    {
      "source": 7,
      "target": 11,
      "variable": "int"
    },
    {
      "source": 7,
      "target": 20,
      "variable": "a"
    },
    {
      "source": 8,
      "target": 27,
      "variable": "return"
    },
    {
      "source": 11,
      "target": 13,
      "variable": "for"
    },
    {
      "source": 11,
      "target": 13,
      "variable": "int"
    },
    {
      "source": 13,
      "target": 21,
      "variable": "int"
    },
    {
      "source": 13,
      "target": 25,
      "variable": "for"
    },
    {
      "source": 20,
      "target": 21,
      "variable": "a"
    },
    {
      "source": 21,
      "target": 25,
      "variable": "int"
    },
    {
      "source": 25,
      "target": 26,
      "variable": "for"
    },
    {
      "source": 25,
      "target": 26,
      "variable": "int"
    },
    {
      "source": 27,
      "target": 30,
      "variable": "return"
    }
  ]
}