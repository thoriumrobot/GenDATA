{
  "annotation_types": [
    "@Positive",
    "@NonNegative",
    "@GTENegativeOne"
  ],
  "training_history": {
    "@Positive": {
      "train_losses": [
        0.8123958691954613,
        0.6667093646526336,
        0.6737970829010009,
        0.6394006063044071,
        0.5948883879184723,
        0.5069093623757362,
        0.5828310364484787,
        0.5124238047003746,
        0.43468268916010855,
        0.4295432718098164,
        0.35032310158014296,
        0.27948802299797537,
        0.3011740987747908,
        0.18806626128032802,
        0.1641607017070055,
        0.16929104955866933,
        0.22933683036826552,
        0.19332592689432204,
        0.21793215120211243,
        0.1516489192005247,
        0.15723204439505933,
        0.12215831967070699,
        0.195442897034809,
        0.1801288808323443,
        0.1618797840271145,
        0.19025935538113117,
        0.10574449937790632,
        0.14764349590986967,
        0.1472110040206462,
        0.07843183334451169,
        0.11882699440349825,
        0.09780759349698201,
        0.11960203264141456,
        0.07876730722375214,
        0.08880957431625575,
        0.07203881898429244,
        0.10096023897174745,
        0.1281480360298883,
        0.10910153482342139,
        0.0665296284831129
      ],
      "val_losses": [
        0.4265362826677469,
        0.3729831541960056,
        0.4066013556260329,
        0.3731364355637477,
        0.36098864445319545,
        0.31518323719501495,
        0.3268721103668213,
        0.27467910601542544,
        0.2365033059166028,
        0.19241166200775367,
        0.14066630286666063,
        0.09580873554715744,
        0.15356786606403497,
        0.07970261459167187,
        0.04918846882020052,
        0.07401861121448186,
        0.09454578372578208,
        0.05205699396677888,
        0.08271504874126269,
        0.02546714049262496,
        0.07341507021695949,
        0.058158200771476216,
        0.037201028370943204,
        0.01908068794112366,
        0.07504036134252182,
        0.048963865444350704,
        0.026662325719371438,
        0.013614210497158078,
        0.008565105802307908,
        0.005515101209032134,
        0.02663354077734626,
        0.015520828785016559,
        0.005162801548766975,
        0.03718289771439651,
        0.004850635739365736,
        0.018729571069483288,
        0.009737668250006838,
        0.006257940988199642,
        0.0027018232100929776,
        0.0014072191731359523
      ],
      "val_accuracies": [
        80.5,
        87.0,
        86.5,
        87.5,
        82.5,
        89.0,
        89.0,
        88.5,
        91.0,
        93.0,
        95.5,
        95.5,
        94.0,
        97.0,
        99.0,
        97.0,
        97.0,
        97.0,
        96.5,
        100.0,
        97.0,
        97.5,
        97.5,
        99.0,
        96.5,
        97.0,
        99.0,
        100.0,
        100.0,
        100.0,
        99.0,
        99.5,
        100.0,
        98.5,
        100.0,
        100.0,
        100.0,
        100.0,
        100.0,
        100.0
      ],
      "best_val_accuracy": 100.0,
      "epochs_trained": 40
    },
    "@NonNegative": {
      "train_losses": [
        0.8771299377083779,
        0.740695863366127,
        0.777058247923851,
        0.733422389626503,
        0.7126862698793411,
        0.6830987560749054,
        0.6515910592675209,
        0.6607192796468735,
        0.6180417740345001,
        0.6220462200045586,
        0.5607645785808564,
        0.5676225206255913,
        0.5547317409515381,
        0.48715690314769744,
        0.5820985782146454,
        0.5121804240345955,
        0.5891854393482209,
        0.5514828696846962,
        0.45292812913656233,
        0.551045478284359,
        0.5020628476142883,
        0.5260537233948708,
        0.47518362462520597,
        0.47073158115148545,
        0.44211280688643456,
        0.49974761515855787,
        0.46674940347671506,
        0.4724058036506176,
        0.4771765121817589,
        0.49041170299053194,
        0.45595175474882127,
        0.45517984211444856,
        0.4570483505725861,
        0.43963914245367053,
        0.43133101165294646,
        0.4701437121629715,
        0.4632296872138977,
        0.4405636079609394,
        0.4319970723986626,
        0.4677750813961029,
        0.4427831445634365,
        0.4084037859737873,
        0.37842044919729234,
        0.4335066568851471,
        0.4421431937813759,
        0.4142143514752388,
        0.39147161349654197,
        0.43817925482988357,
        0.38394788578152655,
        0.41680154457688334
      ],
      "val_losses": [
        0.37836704001976895,
        0.41544312926439136,
        0.35402782891805357,
        0.3475393492441911,
        0.3556133583188057,
        0.34010164038493085,
        0.327541946218564,
        0.33707729984934515,
        0.33200543431135326,
        0.33681057221614397,
        0.3417885893812546,
        0.32419017129219496,
        0.32464465441612095,
        0.3189453918200273,
        0.31219829275057864,
        0.31836378287810546,
        0.30760241414491946,
        0.2975746032137137,
        0.29252757877111435,
        0.2930520188349944,
        0.29362763091921806,
        0.2769989537505003,
        0.27649654935185725,
        0.2728818603433095,
        0.2655140900841126,
        0.2792690023779869,
        0.26369602605700493,
        0.25809646799014163,
        0.2702366552100732,
        0.2630250147328927,
        0.2710431917355611,
        0.2443577223099195,
        0.24369380221917078,
        0.23770386897600615,
        0.25161882375295347,
        0.2304411897292504,
        0.2258733201485414,
        0.23325832875875327,
        0.23135542325102365,
        0.23455132114199492,
        0.23374154762579843,
        0.23992008801836234,
        0.22547796225318542,
        0.22943913392149484,
        0.23629620757240516,
        0.21371573782884157,
        0.21592018667321938,
        0.21367406730468458,
        0.21197881664221102,
        0.21807714322438607
      ],
      "val_accuracies": [
        83.0,
        77.5,
        86.0,
        84.5,
        82.0,
        86.0,
        84.0,
        83.0,
        83.0,
        80.0,
        79.0,
        85.5,
        86.5,
        86.0,
        88.0,
        85.5,
        86.5,
        88.0,
        88.5,
        88.5,
        87.5,
        88.5,
        87.0,
        88.0,
        89.0,
        86.0,
        86.5,
        88.0,
        88.0,
        87.0,
        87.0,
        88.5,
        88.0,
        90.5,
        86.5,
        91.5,
        89.5,
        89.5,
        89.5,
        88.0,
        90.0,
        88.0,
        90.5,
        88.0,
        89.5,
        90.0,
        89.5,
        91.0,
        89.0,
        89.0
      ],
      "best_val_accuracy": 91.5,
      "epochs_trained": 50
    },
    "@GTENegativeOne": {
      "train_losses": [
        0.6825090676546097,
        0.5623298636078835,
        0.5314573588967323,
        0.46718068793416023,
        0.5028532794117928,
        0.497573401927948,
        0.4669466829299927,
        0.4676907436549664,
        0.46275527626276014,
        0.46902390748262407,
        0.45237521946430204,
        0.43688738346099854,
        0.44649544954299925,
        0.44602655708789823,
        0.41832141786813737,
        0.4310487186908722,
        0.43257746994495394,
        0.4019503307342529,
        0.4106604059040546,
        0.42204333692789076,
        0.40391043603420257,
        0.41059321492910383,
        0.38412707805633545,
        0.37931871905922887,
        0.3804668688774109,
        0.32747423231601713,
        0.4025590345263481,
        0.34521509855985644,
        0.36170162618160245,
        0.3305719357728958,
        0.34586078628897665,
        0.3599315956234932,
        0.3476836548000574,
        0.3803534360975027,
        0.3137316932529211,
        0.33701736040413377,
        0.3299875967204571,
        0.34774304322898386,
        0.33151535026729106,
        0.33542142786085605,
        0.36535168543457985,
        0.3416347291320562,
        0.27523007586598397,
        0.27226140439510343,
        0.3022490985691547,
        0.2663099117577076,
        0.3518178418278694,
        0.307053195387125,
        0.2882985447347164,
        0.2561828647553921
      ],
      "val_losses": [
        0.4306382261789762,
        0.3821563285130721,
        0.33133151554144347,
        0.38548367757063645,
        0.33734413293691784,
        0.32977714905372035,
        0.3371026412798808,
        0.33560918730038863,
        0.3168063977589974,
        0.3119211494922638,
        0.30191273299547344,
        0.3001834669938454,
        0.3007150601882201,
        0.32773749186442447,
        0.32280483498023105,
        0.3063762543293146,
        0.30212152348114896,
        0.2762360882300597,
        0.293118607539397,
        0.2992112854352364,
        0.27396933275919694,
        0.263304842206148,
        0.26386811526922077,
        0.2568448180189499,
        0.2554691880941391,
        0.2653418595974262,
        0.2641905236702699,
        0.27971886041072697,
        0.28031758734813106,
        0.23934215364547876,
        0.23956891493155405,
        0.2315839804135836,
        0.22560554685500953,
        0.22500755924444932,
        0.21247142725265944,
        0.21859654325705308,
        0.20600822711220154,
        0.2096983349094024,
        0.18724623838296303,
        0.1846160272566172,
        0.20628065128739065,
        0.23646209904780754,
        0.21071395879754654,
        0.18334295915869567,
        0.19170268768301377,
        0.2069374850163093,
        0.17585016013338015,
        0.19084970739025336,
        0.18313189022816145,
        0.17630049041830576
      ],
      "val_accuracies": [
        79.5,
        83.5,
        86.0,
        82.5,
        83.5,
        83.5,
        88.0,
        84.5,
        88.0,
        88.0,
        86.0,
        86.5,
        88.5,
        82.0,
        85.0,
        88.0,
        88.0,
        89.0,
        87.5,
        88.5,
        88.0,
        88.5,
        89.0,
        89.0,
        89.5,
        87.0,
        89.5,
        85.5,
        88.0,
        91.0,
        93.5,
        90.0,
        94.5,
        93.0,
        94.0,
        94.0,
        94.5,
        93.0,
        94.5,
        93.5,
        94.5,
        86.5,
        90.0,
        95.0,
        94.5,
        93.5,
        94.0,
        93.5,
        95.0,
        95.5
      ],
      "best_val_accuracy": 95.5,
      "epochs_trained": 50
    }
  },
  "best_accuracies": {
    "@Positive": 100.0,
    "@NonNegative": 91.5,
    "@GTENegativeOne": 95.5
  },
  "final_metrics": {
    "@Positive": {
      "accuracy": 1.0,
      "classification_report": {
        "Negative": {
          "precision": 1.0,
          "recall": 1.0,
          "f1-score": 1.0,
          "support": 101.0
        },
        "Positive": {
          "precision": 1.0,
          "recall": 1.0,
          "f1-score": 1.0,
          "support": 99.0
        },
        "accuracy": 1.0,
        "macro avg": {
          "precision": 1.0,
          "recall": 1.0,
          "f1-score": 1.0,
          "support": 200.0
        },
        "weighted avg": {
          "precision": 1.0,
          "recall": 1.0,
          "f1-score": 1.0,
          "support": 200.0
        }
      },
      "confusion_matrix": [
        [
          101,
          0
        ],
        [
          0,
          99
        ]
      ],
      "total_samples": 200,
      "positive_samples": 99,
      "negative_samples": 101,
      "confidence_analysis": {
        "positive_avg_confidence": 0.998802125453949,
        "negative_avg_confidence": 0.9984309673309326,
        "overall_avg_confidence": 0.9986146688461304
      }
    },
    "@NonNegative": {
      "accuracy": 0.89,
      "classification_report": {
        "Negative": {
          "precision": 0.8691588785046729,
          "recall": 0.9207920792079208,
          "f1-score": 0.8942307692307693,
          "support": 101.0
        },
        "Positive": {
          "precision": 0.9139784946236559,
          "recall": 0.8585858585858586,
          "f1-score": 0.8854166666666666,
          "support": 99.0
        },
        "accuracy": 0.89,
        "macro avg": {
          "precision": 0.8915686865641643,
          "recall": 0.8896889688968896,
          "f1-score": 0.889823717948718,
          "support": 200.0
        },
        "weighted avg": {
          "precision": 0.8913445884835696,
          "recall": 0.89,
          "f1-score": 0.8898677884615384,
          "support": 200.0
        }
      },
      "confusion_matrix": [
        [
          93,
          8
        ],
        [
          14,
          85
        ]
      ],
      "total_samples": 200,
      "positive_samples": 99,
      "negative_samples": 101,
      "confidence_analysis": {
        "positive_avg_confidence": 0.8303280472755432,
        "negative_avg_confidence": 0.8809028267860413,
        "overall_avg_confidence": 0.8558682799339294
      }
    },
    "@GTENegativeOne": {
      "accuracy": 0.955,
      "classification_report": {
        "Negative": {
          "precision": 0.9519230769230769,
          "recall": 0.9611650485436893,
          "f1-score": 0.9565217391304348,
          "support": 103.0
        },
        "Positive": {
          "precision": 0.9583333333333334,
          "recall": 0.9484536082474226,
          "f1-score": 0.9533678756476683,
          "support": 97.0
        },
        "accuracy": 0.955,
        "macro avg": {
          "precision": 0.9551282051282051,
          "recall": 0.954809328395556,
          "f1-score": 0.9549448073890516,
          "support": 200.0
        },
        "weighted avg": {
          "precision": 0.9550320512820514,
          "recall": 0.955,
          "f1-score": 0.954992115341293,
          "support": 200.0
        }
      },
      "confusion_matrix": [
        [
          99,
          4
        ],
        [
          5,
          92
        ]
      ],
      "total_samples": 200,
      "positive_samples": 97,
      "negative_samples": 103,
      "confidence_analysis": {
        "positive_avg_confidence": 0.9414590001106262,
        "negative_avg_confidence": 0.914721667766571,
        "overall_avg_confidence": 0.9276891946792603
      }
    }
  },
  "real_code_analysis": {
    "@Positive": {
      "positive_patterns": {
        "labels": {
          "import org.checkerframework.checker.index.qual.NonNegative;": 32,
          "import org.checkerframework.checker.index.qual.*;": 28,
          "import org.checkerframework.checker.index.qual.IndexFor;": 28,
          "import org.checkerframework.checker.index.qual.IndexOrHigh;": 21,
          "import org.checkerframework.checker.index.qual.GTENegativeOne;": 17,
          "import org.checkerframework.checker.index.qual.Positive;": 16,
          "import org.checkerframework.checker.index.qual.SameLen;": 12,
          "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5)], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)), name=arr)], modifiers=set(), type=BasicType(dimensions=[None], name=int))": 10,
          "import org.checkerframework.checker.index.qual.IndexOrLow;": 9,
          "import org.checkerframework.checker.index.qual.LessThan;": 9
        },
        "types": {
          "": 500
        }
      },
      "negative_patterns": {
        "labels": {
          "}": 112,
          "Entry": 27,
          "Exit": 26,
          "": 25,
          "try {": 17,
          "// ignore": 17,
          "return null;": 16,
          "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null))": 13,
          "break; // Prevent infinite loops": 13,
          "* CFWR augmentation: inserted irrelevant code for data augmentation.": 8
        },
        "types": {
          "": 500
        }
      },
      "pattern_differences": {
        "positive_only": [
          "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=BinaryOperation(operandl=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=k, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=&))]), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
          "public class MinMaxIndex {",
          "public class ArrayIntro {",
          "import org.checkerframework.checker.index.qual.Positive;",
          "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=BinaryOperation(operandl=MemberReference(member=k, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=&))]), name=x1)], modifiers=set(), type=BasicType(dimensions=[], name=int))"
        ],
        "negative_only": [
          "",
          "return -29.39f;",
          "return 'I';",
          "private void m(BitSet b) {",
          "While(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='W'), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=589), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=55.73f), operator=>>), operator=+))"
        ],
        "common": []
      }
    },
    "@NonNegative": {
      "positive_patterns": {
        "labels": {
          "}": 201,
          "Entry": 39,
          "": 37,
          "return null;": 34,
          "try {": 34,
          "*/": 13,
          "/*": 13,
          "Try": 9,
          "import org.checkerframework.checker.index.qual.LTLengthOf;": 6,
          "import org.checkerframework.checker.index.qual.LTEqLengthOf;": 3
        },
        "types": {
          "": 500
        }
      },
      "negative_patterns": {
        "labels": {
          "Exit": 36,
          "// ignore": 30,
          "break; // Prevent infinite loops": 23,
          "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null))": 20,
          "while (true) {": 13,
          "* CFWR augmentation: inserted irrelevant code for data augmentation.": 12,
          "Break": 10,
          "while (false) {": 6,
          "import org.checkerframework.common.value.qual.MinLen;": 6,
          "While(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false))": 5
        },
        "types": {
          "": 500
        }
      },
      "pattern_differences": {
        "positive_only": [
          "",
          "return -29.39f;",
          "double __cfwr_var71 = (310L - 16.09f);",
          "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=arr, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-))]), name=j)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
          "LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), operator=-), name=e)], modifiers=set(), type=BasicType(dimensions=[], name=int))"
        ],
        "negative_only": [
          "if (false || false) {",
          "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), name=__cfwr_item28)], modifiers=set(), type=BasicType(dimensions=[], name=boolean))",
          "MethodInvocation(arguments=[MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6)], member=read, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)",
          "If(BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=712L), operator=&), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=90.10), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=346), operator=<<), operator=||))",
          "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"data96\"))"
        ],
        "common": []
      }
    },
    "@GTENegativeOne": {
      "positive_patterns": {
        "labels": {
          "Exit": 31,
          "// ignore": 19,
          "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null))": 15,
          "break; // Prevent infinite loops": 13,
          "* CFWR augmentation: inserted irrelevant code for data augmentation.": 9,
          "Break": 8,
          "while (true) {": 7,
          "While(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false))": 5,
          "import org.checkerframework.common.value.qual.MinLen;": 4,
          "If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=&&))": 4
        },
        "types": {
          "": 500
        }
      },
      "negative_patterns": {
        "labels": {
          "}": 204,
          "": 40,
          "Entry": 39,
          "try {": 34,
          "return null;": 34,
          "*/": 13,
          "/*": 13,
          "Try": 9,
          "import org.checkerframework.checker.index.qual.NonNegative;": 3,
          "import org.checkerframework.checker.index.qual.*;": 3
        },
        "types": {
          "": 500
        }
      },
      "pattern_differences": {
        "positive_only": [
          "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), name=__cfwr_item28)], modifiers=set(), type=BasicType(dimensions=[], name=boolean))",
          "MethodInvocation(arguments=[MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6)], member=read, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)",
          "If(BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=712L), operator=&), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=90.10), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=346), operator=<<), operator=||))",
          "} catch (Exception __cfwr_e40) {",
          "LocalVariableDeclaration(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\"), name=LTEqLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=b, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), name=c1)], modifiers=set(), type=BasicType(dimensions=[], name=int))"
        ],
        "negative_only": [
          "",
          "return -29.39f;",
          "double __cfwr_var71 = (310L - 16.09f);",
          "ll;",
          "import org.checkerframework.checker.index.qual.Positive;"
        ],
        "common": []
      }
    }
  }
}