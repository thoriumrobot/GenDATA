
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package polyglot.pth;

import java_cup.runtime.ComplexSymbolFactory;
import java.io.*;
import java.util.*;

/** CUP v0.11b 20150326 generated parser.
  */
public class Grm
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public Grm() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Grm(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public Grm(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\003\000\002\004\003\000\002\004\004" +
    "\000\002\005\003\000\002\005\003\000\002\006\011\000" +
    "\002\007\005\000\002\007\002\000\002\010\005\000\002" +
    "\010\002\000\002\011\003\000\002\011\002\000\002\012" +
    "\002\000\002\012\003\000\002\013\004\000\002\013\005" +
    "\000\002\014\002\000\002\014\005\000\002\015\003\000" +
    "\002\015\005\000\002\016\003\000\002\016\004\000\002" +
    "\017\002\000\002\017\003\000\002\022\003\000\002\022" +
    "\005\000\002\020\002\000\002\020\003\000\002\021\003" +
    "\000\002\021\005\000\002\023\005\000\002\023\004\000" +
    "\002\023\007\000\002\023\005" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\064\000\010\002\uffff\004\005\017\010\001\002\000" +
    "\004\002\066\001\002\000\012\005\ufff7\006\015\010\ufff7" +
    "\012\ufff7\001\002\000\010\002\ufffe\004\005\017\010\001" +
    "\002\000\010\002\ufffa\004\ufffa\017\ufffa\001\002\000\010" +
    "\002\ufffb\004\ufffb\017\ufffb\001\002\000\010\002\ufffd\004" +
    "\ufffd\017\ufffd\001\002\000\004\002\000\001\002\000\010" +
    "\002\ufffc\004\ufffc\017\ufffc\001\002\000\010\005\ufff5\010" +
    "\023\012\ufff5\001\002\000\004\005\017\001\002\000\006" +
    "\007\020\016\021\001\002\000\016\006\uffe6\007\uffe6\011" +
    "\uffe6\012\uffe6\014\uffe6\016\uffe6\001\002\000\010\005\ufff8" +
    "\010\ufff8\012\ufff8\001\002\000\004\005\022\001\002\000" +
    "\016\006\uffe5\007\uffe5\011\uffe5\012\uffe5\014\uffe5\016\uffe5" +
    "\001\002\000\004\005\017\001\002\000\006\005\017\012" +
    "\ufff3\001\002\000\006\012\ufff4\016\021\001\002\000\004" +
    "\012\027\001\002\000\010\004\032\013\ufff2\014\uffee\001" +
    "\002\000\004\013\ufff1\001\002\000\012\005\017\006\uffe8" +
    "\014\uffe8\015\042\001\002\000\014\004\uffea\005\uffea\006" +
    "\uffea\014\uffea\015\uffea\001\002\000\014\004\041\005\uffec" +
    "\006\uffec\014\uffec\015\uffec\001\002\000\004\013\040\001" +
    "\002\000\004\014\036\001\002\000\010\004\032\013\ufff0" +
    "\014\uffee\001\002\000\004\013\uffef\001\002\000\010\002" +
    "\ufff9\004\ufff9\017\ufff9\001\002\000\014\004\uffe9\005\uffe9" +
    "\006\uffe9\014\uffe9\015\uffe9\001\002\000\004\004\032\001" +
    "\002\000\010\006\uffe7\014\uffe7\016\021\001\002\000\006" +
    "\006\047\014\uffe4\001\002\000\004\014\uffed\001\002\000" +
    "\006\014\uffe2\015\uffe2\001\002\000\010\004\053\005\054" +
    "\007\055\001\002\000\006\014\uffe3\015\051\001\002\000" +
    "\004\006\047\001\002\000\006\014\uffe1\015\uffe1\001\002" +
    "\000\006\007\060\015\057\001\002\000\004\007\056\001" +
    "\002\000\006\014\uffdf\015\uffdf\001\002\000\006\014\uffdd" +
    "\015\uffdd\001\002\000\004\005\061\001\002\000\006\014" +
    "\uffe0\015\uffe0\001\002\000\004\007\062\001\002\000\006" +
    "\014\uffde\015\uffde\001\002\000\014\004\041\005\uffeb\006" +
    "\uffeb\014\uffeb\015\uffeb\001\002\000\006\011\065\016\021" +
    "\001\002\000\006\005\ufff6\012\ufff6\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\064\000\014\002\003\003\011\004\005\005\010\006" +
    "\006\001\001\000\002\001\001\000\004\007\013\001\001" +
    "\000\006\005\012\006\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\023\001\001\000\004\022\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\063\001" +
    "\001\000\006\011\025\022\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\033\013\027\014\034\015" +
    "\030\016\032\001\001\000\002\001\001\000\006\017\043" +
    "\022\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\036\014\034" +
    "\015\030\016\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\062\001\001\000\002" +
    "\001\001\000\010\020\044\021\047\023\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Grm$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}



    protected TestFactory tf;

    public Grm(TestFactory tf, String filename) {
        this(tf, new File(filename));
    }

    public Grm(TestFactory tf, File file) {
        this(tf, lexer(tf, file));
    }

    public Grm(TestFactory tf, Lexer l) {
        this(l, new ComplexSymbolFactory());
        this.tf = tf;
    }

    protected static Lexer lexer(TestFactory tf, File file) {
        try {
            return tf.Lexer(new FileReader(file));
        }
        catch (IOException e) {
            System.out.println("open script file (" + file.getName() +") error: " + e);
            return tf.Lexer(new InputStreamReader(System.in));
        }
    }

    public static int findErrorKind(String s) {
      s = s.toLowerCase();
      for (int i = 0; i < 10; i++) {
          String t = polyglot.util.ErrorInfo.getErrorString(i);
          if (t.toLowerCase().startsWith(s))
            return i;
      }
      return -1;      
    }


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {
    private final Grm parser;

    /** Constructor */
    CUP$Grm$actions(Grm parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 36. */
    public final java_cup.runtime.Symbol CUP$Grm$do_action_part00000000(
            int                        CUP$Grm$act_num,
            java_cup.runtime.lr_parser CUP$Grm$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$Grm$stack,
            int                        CUP$Grm$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Grm$result;

        /* select the action based on the action number */
        switch (CUP$Grm$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= goal EOF 
            {
                Object RESULT = null;
                List<Test> start_val = CUP$Grm$stack.elementAt(CUP$Grm$top-1).<List<Test>> value();
                RESULT = start_val;
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
            /* ACCEPT */
            CUP$Grm$parser.done_parsing();
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // goal ::= command_list_opt 
            {
                List<Test> RESULT = null;
                List<Test> a = CUP$Grm$stack.peek().<List<Test>> value();
                 RESULT = a; 
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("goal",0, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // command_list_opt ::= 
            {
                List<Test> RESULT = null;
                 RESULT = Collections.emptyList(); 
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("command_list_opt",1, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // command_list_opt ::= command_list 
            {
                List<Test> RESULT = null;
                List<Test> a = CUP$Grm$stack.peek().<List<Test>> value();
                 RESULT = a; 
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("command_list_opt",1, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // command_list ::= command 
            {
                List<Test> RESULT = null;
                Test a = CUP$Grm$stack.peek().<Test> value();
                 
               List<Test> l = new LinkedList<>();
               l.add(a);
               RESULT = l;
            
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("command_list",2, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // command_list ::= command_list command 
            {
                List<Test> RESULT = null;
                List<Test> a = CUP$Grm$stack.elementAt(CUP$Grm$top-1).<List<Test>> value();
                Test b = CUP$Grm$stack.peek().<Test> value();
                 a.add(b); RESULT = a; 
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("command_list",2, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // command ::= BUILD 
            {
                Test RESULT = null;
                 
               RESULT = tf.BuildTest();
            
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("command",3, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // command ::= compilertest 
            {
                Test RESULT = null;
                SourceFileTestCollection a = CUP$Grm$stack.peek().<SourceFileTestCollection> value();
                 
               RESULT = a;
            
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("command",3, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // compilertest ::= IDENT testname_opt testpath_opt command_line_args_opt LBRACE filetest_list_opt RBRACE 
            {
                SourceFileTestCollection RESULT = null;
                String a = CUP$Grm$stack.elementAt(CUP$Grm$top-6).<String> value();
                String b = CUP$Grm$stack.elementAt(CUP$Grm$top-5).<String> value();
                String c = CUP$Grm$stack.elementAt(CUP$Grm$top-4).<String> value();
                String d = CUP$Grm$stack.elementAt(CUP$Grm$top-3).<String> value();
                List<SourceFileTest> e = CUP$Grm$stack.elementAt(CUP$Grm$top-1).<List<SourceFileTest>> value();
                 
               RESULT = tf.SourceFileTestCollection(a, b, c, d, e);
            
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("compilertest",4, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // testname_opt ::= LPAREN sentence RPAREN 
            {
                String RESULT = null;
                String a = CUP$Grm$stack.elementAt(CUP$Grm$top-1).<String> value();
                 RESULT = a; 
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("testname_opt",5, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // testname_opt ::= 
            {
                String RESULT = null;
                 
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("testname_opt",5, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // testpath_opt ::= LBRACK sentence RBRACK 
            {
                String RESULT = null;
                String a = CUP$Grm$stack.elementAt(CUP$Grm$top-1).<String> value();
                 RESULT = a; 
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("testpath_opt",6, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // testpath_opt ::= 
            {
                String RESULT = null;
                 
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("testpath_opt",6, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // command_line_args_opt ::= sentence 
            {
                String RESULT = null;
                String a = CUP$Grm$stack.peek().<String> value();
                 RESULT = a; 
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("command_line_args_opt",7, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // command_line_args_opt ::= 
            {
                String RESULT = null;
                 
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("command_line_args_opt",7, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // filetest_list_opt ::= 
            {
                List<SourceFileTest> RESULT = null;
                 RESULT = new LinkedList<>(); 
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("filetest_list_opt",8, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // filetest_list_opt ::= filetest_list 
            {
                List<SourceFileTest> RESULT = null;
                List<SourceFileTest> a = CUP$Grm$stack.peek().<List<SourceFileTest>> value();
                 RESULT = a; 
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("filetest_list_opt",8, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // filetest_list ::= filetest SEMICOLON 
            {
                List<SourceFileTest> RESULT = null;
                SourceFileTest a = CUP$Grm$stack.elementAt(CUP$Grm$top-1).<SourceFileTest> value();
                 List<SourceFileTest> list = new LinkedList<>();
               list.add(a);
               RESULT = list;
            
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("filetest_list",9, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // filetest_list ::= filetest SEMICOLON filetest_list 
            {
                List<SourceFileTest> RESULT = null;
                SourceFileTest a = CUP$Grm$stack.elementAt(CUP$Grm$top-2).<SourceFileTest> value();
                List<SourceFileTest> b = CUP$Grm$stack.peek().<List<SourceFileTest>> value();
                 b.add(0, a); RESULT = b; 
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("filetest_list",9, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // filetest ::= 
            {
                SourceFileTest RESULT = null;
                 SourceFileTest sft =
                    tf.SourceFileTest(Collections.singletonList(
                        Collections.<String> emptyList()), Collections.<ExpectedFailure> emptyList());
               RESULT = sft; 
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("filetest",10, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // filetest ::= compilation_unit_list description_opt failure_set_opt 
            {
                SourceFileTest RESULT = null;
                List<List<String>> a = CUP$Grm$stack.elementAt(CUP$Grm$top-2).<List<List<String>>> value();
                String b = CUP$Grm$stack.elementAt(CUP$Grm$top-1).<String> value();
                List<ExpectedFailure> d = CUP$Grm$stack.peek().<List<ExpectedFailure>> value();
                 SourceFileTest sft = tf.SourceFileTest(a, d);
               sft.setDescription(b);
               RESULT = sft; 
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("filetest",10, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // compilation_unit_list ::= filename_list 
            {
                List<List<String>> RESULT = null;
                List<String> a = CUP$Grm$stack.peek().<List<String>> value();
                 List<List<String>> list = new LinkedList<>();
			   list.add(a);
			   RESULT = list;
			
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("compilation_unit_list",11, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // compilation_unit_list ::= compilation_unit_list COMMA filename_list 
            {
                List<List<String>> RESULT = null;
                List<List<String>> a = CUP$Grm$stack.elementAt(CUP$Grm$top-2).<List<List<String>>> value();
                List<String> b = CUP$Grm$stack.peek().<List<String>> value();
                 a.add(b); RESULT = a; 
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("compilation_unit_list",11, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // filename_list ::= IDENT 
            {
                List<String> RESULT = null;
                String a = CUP$Grm$stack.peek().<String> value();
                 List<String> list = new LinkedList<>();
               list.add(a);
               RESULT = list;
            
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("filename_list",12, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // filename_list ::= filename_list IDENT 
            {
                List<String> RESULT = null;
                List<String> a = CUP$Grm$stack.elementAt(CUP$Grm$top-1).<List<String>> value();
                String b = CUP$Grm$stack.peek().<String> value();
                 a.add(b); RESULT = a; 
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("filename_list",12, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // description_opt ::= 
            {
                String RESULT = null;
                 
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("description_opt",13, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // description_opt ::= sentence 
            {
                String RESULT = null;
                String a = CUP$Grm$stack.peek().<String> value();
                 RESULT = a; 
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("description_opt",13, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // sentence ::= STRING_LITERAL 
            {
                String RESULT = null;
                String a = CUP$Grm$stack.peek().<String> value();
                
			RESULT = a;
		
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("sentence",16, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // sentence ::= sentence PLUS STRING_LITERAL 
            {
                String RESULT = null;
                String a = CUP$Grm$stack.elementAt(CUP$Grm$top-2).<String> value();
                String b = CUP$Grm$stack.peek().<String> value();
                
            RESULT = a + b; 
        
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("sentence",16, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // failure_set_opt ::= 
            {
                List<ExpectedFailure> RESULT = null;
                 List<ExpectedFailure> l = new ArrayList<>();
               RESULT = l;
            
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("failure_set_opt",14, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // failure_set_opt ::= failure_set 
            {
                List<ExpectedFailure> RESULT = null;
                List<ExpectedFailure> a = CUP$Grm$stack.peek().<List<ExpectedFailure>> value();
                 RESULT = a; 
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("failure_set_opt",14, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // failure_set ::= failure 
            {
                List<ExpectedFailure> RESULT = null;
                ExpectedFailure a = CUP$Grm$stack.peek().<ExpectedFailure> value();
                 List<ExpectedFailure> l = new ArrayList<>();
               l.add(a);
               RESULT = l;
            
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("failure_set",15, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // failure_set ::= failure_set COMMA failure 
            {
                List<ExpectedFailure> RESULT = null;
                List<ExpectedFailure> a = CUP$Grm$stack.elementAt(CUP$Grm$top-2).<List<ExpectedFailure>> value();
                ExpectedFailure b = CUP$Grm$stack.peek().<ExpectedFailure> value();
                 a.add(b); RESULT = a; 
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("failure_set",15, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // failure ::= LPAREN IDENT RPAREN 
            {
                ExpectedFailure RESULT = null;
                String a = CUP$Grm$stack.elementAt(CUP$Grm$top-1).<String> value();
                 
              RESULT = new ExpectedFailure(Grm.findErrorKind(a));
             
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("failure",17, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // failure ::= LPAREN RPAREN 
            {
                ExpectedFailure RESULT = null;
                 
              RESULT = new AnyExpectedFailure();
             
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("failure",17, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // failure ::= LPAREN IDENT COMMA STRING_LITERAL RPAREN 
            {
                ExpectedFailure RESULT = null;
                String a = CUP$Grm$stack.elementAt(CUP$Grm$top-3).<String> value();
                String b = CUP$Grm$stack.elementAt(CUP$Grm$top-1).<String> value();
                 
              RESULT = new ExpectedFailure(Grm.findErrorKind(a), b);
             
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("failure",17, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // failure ::= LPAREN STRING_LITERAL RPAREN 
            {
                ExpectedFailure RESULT = null;
                String b = CUP$Grm$stack.elementAt(CUP$Grm$top-1).<String> value();
                 
              RESULT = new ExpectedFailure(b);
             
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("failure",17, RESULT);
            }
            return CUP$Grm$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$Grm$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$Grm$do_action(
            int                        CUP$Grm$act_num,
            java_cup.runtime.lr_parser CUP$Grm$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$Grm$stack,
            int                        CUP$Grm$top)
            throws java.lang.Exception {
            return CUP$Grm$do_action_part00000000(
                           CUP$Grm$act_num,
                           CUP$Grm$parser,
                           CUP$Grm$stack,
                           CUP$Grm$top);
    }
}

}
