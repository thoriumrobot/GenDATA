
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package java_cup;

import java_cup.runtime.*;
import java.util.Hashtable;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings("all")
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\004\000\002\062\002\000\002\002" +
    "\013\000\002\002\007\000\002\063\002\000\002\003\006" +
    "\000\002\003\003\000\002\004\004\000\002\004\003\000" +
    "\002\064\002\000\002\017\006\000\002\045\003\000\002" +
    "\045\005\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\006\002\000\002\006\004" +
    "\000\002\005\006\000\002\012\006\000\002\012\007\000" +
    "\002\061\002\000\002\061\005\000\002\061\005\000\002" +
    "\060\003\000\002\060\005\000\002\021\006\000\002\022" +
    "\006\000\002\013\004\000\002\013\003\000\002\023\005" +
    "\000\002\023\004\000\002\023\005\000\002\023\004\000" +
    "\002\065\002\000\002\023\006\000\002\066\002\000\002" +
    "\023\006\000\002\067\002\000\002\043\005\000\002\070" +
    "\002\000\002\044\005\000\002\025\005\000\002\025\003" +
    "\000\002\026\005\000\002\026\003\000\002\037\003\000" +
    "\002\037\003\000\002\042\004\000\002\042\003\000\002" +
    "\071\002\000\002\040\007\000\002\072\002\000\002\040" +
    "\007\000\002\073\002\000\002\040\007\000\002\041\005" +
    "\000\002\041\003\000\002\052\003\000\002\053\003\000" +
    "\002\074\002\000\002\014\007\000\002\014\003\000\002" +
    "\015\004\000\002\015\003\000\002\075\002\000\002\027" +
    "\007\000\002\076\002\000\002\027\005\000\002\034\005" +
    "\000\002\034\003\000\002\035\005\000\002\035\003\000" +
    "\002\030\004\000\002\030\003\000\002\031\004\000\002" +
    "\031\003\000\002\051\004\000\002\051\003\000\002\016" +
    "\005\000\002\077\002\000\002\016\007\000\002\016\003" +
    "\000\002\055\003\000\002\055\005\000\002\056\003\000" +
    "\002\056\003\000\002\057\003\000\002\057\005\000\002" +
    "\057\005\000\002\020\005\000\002\020\003\000\002\024" +
    "\003\000\002\024\005\000\002\032\003\000\002\033\003" +
    "\000\002\046\003\000\002\046\003\000\002\047\003\000" +
    "\002\047\003\000\002\050\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\011\004\000\002\011" +
    "\003\000\002\010\002\000\002\010\003\000\002\036\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\030\003\005\004\000\005\000\007\000\010" +
    "\000\011\000\012\000\013\000\014\000\035\000\044\000" +
    "\001\002\000\004\002\306\001\002\000\010\011\104\012" +
    "\076\035\103\001\002\000\026\004\011\005\uff87\007\uff87" +
    "\010\uff87\011\uff87\012\uff87\013\uff87\014\uff87\035\uff87\044" +
    "\uff87\001\002\000\024\005\uff87\007\uff87\010\uff87\011\uff87" +
    "\012\uff87\013\uff87\014\uff87\035\uff87\044\uff87\001\002\000" +
    "\024\005\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb" +
    "\014\ufffb\035\ufffb\044\ufffb\001\002\000\042\003\030\006" +
    "\015\007\031\010\026\011\023\012\016\013\012\014\033" +
    "\015\017\016\032\026\014\027\024\030\022\031\013\035" +
    "\025\045\020\001\002\000\030\003\uff94\017\uff94\020\uff94" +
    "\022\uff94\025\uff94\032\uff94\033\uff94\036\uff94\037\uff94\045" +
    "\uff94\046\uff94\001\002\000\030\003\uff8d\017\uff8d\020\uff8d" +
    "\022\uff8d\025\uff8d\032\uff8d\033\uff8d\036\uff8d\037\uff8d\045" +
    "\uff8d\046\uff8d\001\002\000\030\003\uff90\017\uff90\020\uff90" +
    "\022\uff90\025\uff90\032\uff90\033\uff90\036\uff90\037\uff90\045" +
    "\uff90\046\uff90\001\002\000\030\003\uff9a\017\uff9a\020\uff9a" +
    "\022\uff9a\025\uff9a\032\uff9a\033\uff9a\036\uff9a\037\uff9a\045" +
    "\uff9a\046\uff9a\001\002\000\030\003\uff96\017\uff96\020\uff96" +
    "\022\uff96\025\uff96\032\uff96\033\uff96\036\uff96\037\uff96\045" +
    "\uff96\046\uff96\001\002\000\030\003\uff92\017\uff92\020\uff92" +
    "\022\uff92\025\uff92\032\uff92\033\uff92\036\uff92\037\uff92\045" +
    "\uff92\046\uff92\001\002\000\030\003\uff9b\017\uff9b\020\uff9b" +
    "\022\uff9b\025\uff9b\032\uff9b\033\uff9b\036\uff9b\037\uff9b\045" +
    "\uff9b\046\uff9b\001\002\000\010\017\ufffd\022\036\037\uffb0" +
    "\001\002\000\030\003\uff8e\017\uff8e\020\uff8e\022\uff8e\025" +
    "\uff8e\032\uff8e\033\uff8e\036\uff8e\037\uff8e\045\uff8e\046\uff8e" +
    "\001\002\000\030\003\uff97\017\uff97\020\uff97\022\uff97\025" +
    "\uff97\032\uff97\033\uff97\036\uff97\037\uff97\045\uff97\046\uff97" +
    "\001\002\000\030\003\uff8f\017\uff8f\020\uff8f\022\uff8f\025" +
    "\uff8f\032\uff8f\033\uff8f\036\uff8f\037\uff8f\045\uff8f\046\uff8f" +
    "\001\002\000\030\003\uff95\017\uff95\020\uff95\022\uff95\025" +
    "\uff95\032\uff95\033\uff95\036\uff95\037\uff95\045\uff95\046\uff95" +
    "\001\002\000\030\003\uff98\017\uff98\020\uff98\022\uff98\025" +
    "\uff98\032\uff98\033\uff98\036\uff98\037\uff98\045\uff98\046\uff98" +
    "\001\002\000\020\017\uffae\020\uffae\022\uffae\033\uffae\036" +
    "\uffae\037\uffae\045\uffae\001\002\000\030\003\uff8c\017\uff8c" +
    "\020\uff8c\022\uff8c\025\uff8c\032\uff8c\033\uff8c\036\uff8c\037" +
    "\uff8c\045\uff8c\046\uff8c\001\002\000\030\003\uff99\017\uff99" +
    "\020\uff99\022\uff99\025\uff99\032\uff99\033\uff99\036\uff99\037" +
    "\uff99\045\uff99\046\uff99\001\002\000\030\003\uff91\017\uff91" +
    "\020\uff91\022\uff91\025\uff91\032\uff91\033\uff91\036\uff91\037" +
    "\uff91\045\uff91\046\uff91\001\002\000\030\003\uff93\017\uff93" +
    "\020\uff93\022\uff93\025\uff93\032\uff93\033\uff93\036\uff93\037" +
    "\uff93\045\uff93\046\uff93\001\002\000\004\017\060\001\002" +
    "\000\004\037\040\001\002\000\042\003\030\006\015\007" +
    "\031\010\026\011\023\012\016\013\012\014\033\015\017" +
    "\016\032\026\014\027\024\030\022\031\013\035\025\045" +
    "\020\001\002\000\020\017\uffb1\020\uffb1\022\uffb1\033\uffb1" +
    "\036\uffb1\037\uffb1\045\uffb1\001\002\000\044\003\030\006" +
    "\015\007\031\010\026\011\023\012\016\013\012\014\033" +
    "\015\017\016\032\026\014\027\024\030\022\031\013\035" +
    "\025\040\041\045\020\001\002\000\012\020\uffa9\036\uffa9" +
    "\041\054\042\055\001\002\000\006\020\uffaa\036\uffaa\001" +
    "\002\000\016\020\uffa4\022\036\033\uffa4\036\uffa4\037\uffb0" +
    "\045\uffa4\001\002\000\006\020\051\036\052\001\002\000" +
    "\010\020\uffab\033\047\036\uffab\001\002\000\006\020\uffad" +
    "\036\uffad\001\002\000\004\034\050\001\002\000\012\020" +
    "\uffa3\033\uffa3\036\uffa3\045\uffa3\001\002\000\044\003\030" +
    "\006\015\007\031\010\026\011\023\012\016\013\012\014" +
    "\033\015\017\016\032\026\014\027\024\030\022\031\013" +
    "\035\025\040\041\045\020\001\002\000\020\017\uffaf\020" +
    "\uffaf\022\uffaf\033\uffaf\036\uffaf\037\uffaf\045\uffaf\001\002" +
    "\000\006\020\uffac\036\uffac\001\002\000\042\003\030\006" +
    "\015\007\031\010\026\011\023\012\016\013\012\014\033" +
    "\015\017\016\032\026\014\027\024\030\022\031\013\035" +
    "\025\045\020\001\002\000\042\003\030\006\015\007\031" +
    "\010\026\011\023\012\016\013\012\014\033\015\017\016" +
    "\032\026\014\027\024\030\022\031\013\035\025\045\020" +
    "\001\002\000\010\020\uffa8\033\047\036\uffa8\001\002\000" +
    "\010\020\uffa7\033\047\036\uffa7\001\002\000\024\005\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\035" +
    "\ufffc\044\ufffc\001\002\000\024\005\064\007\uff87\010\uff87" +
    "\011\uff87\012\uff87\013\uff87\014\uff87\035\uff87\044\067\001" +
    "\002\000\024\005\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\013\ufff9\014\ufff9\035\ufff9\044\ufff9\001\002\000\024\005" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa" +
    "\035\ufffa\044\ufffa\001\002\000\042\003\030\006\015\007" +
    "\031\010\026\011\023\012\016\013\012\014\033\015\017" +
    "\016\032\026\014\027\024\030\022\031\013\035\025\045" +
    "\020\001\002\000\020\007\ufff0\010\ufff0\011\ufff0\012\ufff0" +
    "\013\ufff0\014\ufff0\035\ufff0\001\002\000\020\007\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\035\ufff6\001\002" +
    "\000\004\045\070\001\002\000\004\017\071\001\002\000" +
    "\020\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\035\ufff5\001\002\000\020\007\073\010\074\011\104\012" +
    "\076\013\107\014\110\035\103\001\002\000\004\006\271" +
    "\001\002\000\006\006\253\045\254\001\002\000\020\007" +
    "\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\035\uffef" +
    "\001\002\000\004\011\252\001\002\000\020\007\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\035\ufff3\001\002" +
    "\000\042\003\240\006\015\007\031\010\026\011\023\012" +
    "\016\013\012\014\033\015\017\016\032\026\014\027\024" +
    "\030\022\031\013\035\025\045\234\001\002\000\020\007" +
    "\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\035\ufff1" +
    "\001\002\000\020\003\uffe3\011\uffe3\012\uffe3\016\uffe3\026" +
    "\uffe3\035\uffe3\045\uffe3\001\002\000\042\003\uff8a\006\uff8a" +
    "\007\uff8a\010\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a\015" +
    "\uff8a\016\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\035\uff8a" +
    "\045\uff8a\001\002\000\042\003\223\006\015\007\031\010" +
    "\026\011\023\012\016\013\012\014\033\015\017\016\032" +
    "\026\014\027\024\030\022\031\013\035\025\045\220\001" +
    "\002\000\020\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\035\ufff4\001\002\000\020\003\uff87\011\104\012" +
    "\076\016\uff87\026\123\035\103\045\uff87\001\002\000\004" +
    "\015\116\001\002\000\004\015\112\001\002\000\020\007" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\035\ufff2" +
    "\001\002\000\004\046\113\001\002\000\022\007\uff89\010" +
    "\uff89\011\uff89\012\uff89\013\uff89\014\uff89\017\115\035\uff89" +
    "\001\002\000\020\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\035\uffe5\001\002\000\020\007\uff88\010\uff88" +
    "\011\uff88\012\uff88\013\uff88\014\uff88\035\uff88\001\002\000" +
    "\004\046\117\001\002\000\022\007\uff89\010\uff89\011\uff89" +
    "\012\uff89\013\uff89\014\uff89\017\115\035\uff89\001\002\000" +
    "\020\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\035\uffe6\001\002\000\010\003\uff87\016\155\045\uff87\001" +
    "\002\000\012\003\uffcf\016\uffcf\026\uffcf\045\uffcf\001\002" +
    "\000\010\027\130\030\131\031\132\001\002\000\020\003" +
    "\uffe4\011\uffe4\012\uffe4\016\uffe4\026\uffe4\035\uffe4\045\uffe4" +
    "\001\002\000\010\003\uffd1\016\uffd1\045\uffd1\001\002\000" +
    "\012\003\uffd2\016\uffd2\026\123\045\uffd2\001\002\000\012" +
    "\003\uffd0\016\uffd0\026\uffd0\045\uffd0\001\002\000\006\003" +
    "\uffce\045\uffce\001\002\000\006\003\uffcc\045\uffcc\001\002" +
    "\000\006\003\uffca\045\uffca\001\002\000\006\003\135\045" +
    "\134\001\002\000\022\003\uff9e\017\uff9e\020\uff9e\023\uff9e" +
    "\025\uff9e\032\uff9e\045\uff9e\046\uff9e\001\002\000\022\003" +
    "\uff9d\017\uff9d\020\uff9d\023\uff9d\025\uff9d\032\uff9d\045\uff9d" +
    "\046\uff9d\001\002\000\010\017\uffc5\020\uffc5\025\uffc5\001" +
    "\002\000\006\017\uffc6\020\uffc6\001\002\000\006\017\uffc7" +
    "\020\uffc7\001\002\000\006\017\143\020\142\001\002\000" +
    "\006\003\135\045\134\001\002\000\012\003\uffc9\016\uffc9" +
    "\026\uffc9\045\uffc9\001\002\000\006\017\uffc8\020\uffc8\001" +
    "\002\000\006\003\135\045\134\001\002\000\006\017\147" +
    "\020\142\001\002\000\012\003\uffcb\016\uffcb\026\uffcb\045" +
    "\uffcb\001\002\000\006\003\135\045\134\001\002\000\006" +
    "\017\152\020\142\001\002\000\012\003\uffcd\016\uffcd\026" +
    "\uffcd\045\uffcd\001\002\000\006\003\164\045\157\001\002" +
    "\000\006\003\uffc2\045\uffc2\001\002\000\004\015\156\001" +
    "\002\000\006\003\160\045\157\001\002\000\006\017\uffa0" +
    "\024\uffa0\001\002\000\004\017\uff9f\001\002\000\004\017" +
    "\uffc4\001\002\000\004\017\163\001\002\000\006\003\uffc3" +
    "\045\uffc3\001\002\000\006\017\uffbd\024\uff9f\001\002\000" +
    "\004\024\uffbf\001\002\000\010\002\uffff\003\164\045\157" +
    "\001\002\000\010\002\uffc0\003\uffc0\045\uffc0\001\002\000" +
    "\010\002\uffc1\003\uffc1\045\uffc1\001\002\000\004\024\172" +
    "\001\002\000\016\003\uff87\017\uff87\025\uff87\032\uff87\045" +
    "\uff87\046\uff87\001\002\000\006\017\212\025\211\001\002" +
    "\000\016\003\uffb6\017\uffb6\025\uffb6\032\uffb6\045\uffb6\046" +
    "\uffb6\001\002\000\006\017\uffba\025\uffba\001\002\000\016" +
    "\003\135\017\uffb8\025\uffb8\032\201\045\134\046\177\001" +
    "\002\000\016\003\uffb4\017\uffb4\025\uffb4\032\uffb4\045\uffb4" +
    "\046\uffb4\001\002\000\020\003\uff87\017\uff87\023\204\025" +
    "\uff87\032\uff87\045\uff87\046\uff87\001\002\000\006\003\135" +
    "\045\134\001\002\000\016\003\uffb7\017\uffb7\025\uffb7\032" +
    "\uffb7\045\uffb7\046\uffb7\001\002\000\006\017\uffb9\025\uffb9" +
    "\001\002\000\042\003\030\006\015\007\031\010\026\011" +
    "\023\012\016\013\012\014\033\015\017\016\032\026\014" +
    "\027\024\030\022\031\013\035\025\045\020\001\002\000" +
    "\016\003\uffb2\017\uffb2\025\uffb2\032\uffb2\045\uffb2\046\uffb2" +
    "\001\002\000\016\003\uffb5\017\uffb5\025\uffb5\032\uffb5\045" +
    "\uffb5\046\uffb5\001\002\000\016\003\uffb3\017\uffb3\025\uffb3" +
    "\032\uffb3\045\uffb3\046\uffb3\001\002\000\016\003\uff9c\017" +
    "\uff9c\025\uff9c\032\uff9c\045\uff9c\046\uff9c\001\002\000\016" +
    "\003\uff87\017\uff87\025\uff87\032\uff87\045\uff87\046\uff87\001" +
    "\002\000\010\002\uffbe\003\uffbe\045\uffbe\001\002\000\006" +
    "\017\uffbb\025\uffbb\001\002\000\004\017\215\001\002\000" +
    "\010\002\uffbc\003\uffbc\045\uffbc\001\002\000\006\017\uffd5" +
    "\020\uffd5\001\002\000\020\003\uffe1\011\uffe1\012\uffe1\016" +
    "\uffe1\026\uffe1\035\uffe1\045\uffe1\001\002\000\016\017\uffa2" +
    "\020\uffa2\022\uff9b\033\uff9b\037\uff9b\045\uff9b\001\002\000" +
    "\006\017\uffda\020\230\001\002\000\006\033\047\045\226" +
    "\001\002\000\014\017\uffde\022\uff8c\033\uff8c\037\uff8c\045" +
    "\uff8c\001\002\000\004\017\225\001\002\000\020\003\uffdd" +
    "\011\uffdd\012\uffdd\016\uffdd\026\uffdd\035\uffdd\045\uffdd\001" +
    "\002\000\006\017\uffa2\020\uffa2\001\002\000\020\003\uffe2" +
    "\011\uffe2\012\uffe2\016\uffe2\026\uffe2\035\uffe2\045\uffe2\001" +
    "\002\000\004\045\226\001\002\000\004\017\232\001\002" +
    "\000\020\003\uffd9\011\uffd9\012\uffd9\016\uffd9\026\uffd9\035" +
    "\uffd9\045\uffd9\001\002\000\006\017\uffd6\020\uffd6\001\002" +
    "\000\016\017\uffa1\020\uffa1\022\uff9b\033\uff9b\037\uff9b\045" +
    "\uff9b\001\002\000\006\017\uffd3\020\uffd3\001\002\000\006" +
    "\017\uffd8\020\246\001\002\000\006\033\047\045\245\001" +
    "\002\000\014\017\uffdc\022\uff8c\033\uff8c\037\uff8c\045\uff8c" +
    "\001\002\000\020\003\uffdf\011\uffdf\012\uffdf\016\uffdf\026" +
    "\uffdf\035\uffdf\045\uffdf\001\002\000\004\017\243\001\002" +
    "\000\020\003\uffdb\011\uffdb\012\uffdb\016\uffdb\026\uffdb\035" +
    "\uffdb\045\uffdb\001\002\000\020\003\uffe0\011\uffe0\012\uffe0" +
    "\016\uffe0\026\uffe0\035\uffe0\045\uffe0\001\002\000\006\017" +
    "\uffa1\020\uffa1\001\002\000\004\045\245\001\002\000\004" +
    "\017\250\001\002\000\020\003\uffd7\011\uffd7\012\uffd7\016" +
    "\uffd7\026\uffd7\035\uffd7\045\uffd7\001\002\000\006\017\uffd4" +
    "\020\uffd4\001\002\000\042\003\uff8b\006\uff8b\007\uff8b\010" +
    "\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b" +
    "\026\uff8b\027\uff8b\030\uff8b\031\uff8b\035\uff8b\045\uff8b\001" +
    "\002\000\004\046\267\001\002\000\010\042\uffeb\043\uffeb" +
    "\046\uffeb\001\002\000\010\042\257\043\260\046\256\001" +
    "\002\000\022\007\uff89\010\uff89\011\uff89\012\uff89\013\uff89" +
    "\014\uff89\017\115\035\uff89\001\002\000\004\045\261\001" +
    "\002\000\004\045\261\001\002\000\012\022\uffe8\042\uffe8" +
    "\043\uffe8\046\uffe8\001\002\000\012\022\263\042\uffe9\043" +
    "\uffe9\046\uffe9\001\002\000\004\045\264\001\002\000\012" +
    "\022\uffe7\042\uffe7\043\uffe7\046\uffe7\001\002\000\012\022" +
    "\263\042\uffea\043\uffea\046\uffea\001\002\000\020\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\035\uffec\001" +
    "\002\000\022\007\uff89\010\uff89\011\uff89\012\uff89\013\uff89" +
    "\014\uff89\017\115\035\uff89\001\002\000\020\007\uffed\010" +
    "\uffed\011\uffed\012\uffed\013\uffed\014\uffed\035\uffed\001\002" +
    "\000\004\046\272\001\002\000\022\007\uff89\010\uff89\011" +
    "\uff89\012\uff89\013\uff89\014\uff89\017\115\035\uff89\001\002" +
    "\000\020\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014" +
    "\uffee\035\uffee\001\002\000\004\017\ufff8\001\002\000\010" +
    "\017\uffa5\022\276\037\uffb0\001\002\000\044\003\030\006" +
    "\015\007\031\010\026\011\023\012\016\013\012\014\033" +
    "\015\017\016\032\021\277\026\014\027\024\030\022\031" +
    "\013\035\025\045\020\001\002\000\004\017\uffa6\001\002" +
    "\000\004\017\301\001\002\000\024\005\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\035\ufff7\044\ufff7" +
    "\001\002\000\020\003\uff87\011\104\012\076\016\uff87\026" +
    "\123\035\103\045\uff87\001\002\000\010\003\uff87\016\155" +
    "\045\uff87\001\002\000\006\003\164\045\157\001\002\000" +
    "\010\002\ufffe\003\164\045\157\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\006\002\003\062\005\001\001\000\002\001" +
    "\001\000\010\011\077\013\301\023\101\001\001\000\006" +
    "\003\006\036\007\001\001\000\006\004\060\036\061\001" +
    "\001\000\002\001\001\000\006\016\020\054\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\063\033\077\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\054\036\001\001\000" +
    "\002\001\001\000\016\016\042\024\044\054\026\055\043" +
    "\056\045\057\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\077\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\016\042\024\044\054\026\056\052\057\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\042\024\056\054\026\001\001\000\010\016\042\024\055" +
    "\054\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\062\036\065\045\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\274\020" +
    "\273\054\026\001\001\000\004\006\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\104\007\074\011\077\012\076\013\105" +
    "\021\110\022\100\023\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\016\042\024\236\026\235\033\234\044" +
    "\240\054\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\016\042\024\221\025\220\032" +
    "\215\043\216\054\026\001\001\000\002\001\001\000\016" +
    "\011\077\023\123\036\124\037\120\040\121\042\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\117" +
    "\001\001\000\002\001\001\000\006\014\152\036\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\126\001\001\000\002\001" +
    "\001\000\004\071\147\001\001\000\004\072\144\001\001" +
    "\000\004\073\132\001\001\000\012\041\140\047\135\052" +
    "\137\053\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\047\135\052\143\053\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\041\145\047" +
    "\135\052\137\053\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\041\150\047\135\052\137\053\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\165" +
    "\027\166\046\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\074\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\076\213\001\001\000\004\075\170" +
    "\001\001\000\006\027\167\046\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\030\175" +
    "\034\172\035\174\036\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\201\047\177" +
    "\001\001\000\002\001\001\000\006\036\204\051\205\001" +
    "\001\000\006\047\135\053\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\050\206\054\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\175\035\212\036\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\067\230\001\001\000\010\025\220\032\215" +
    "\043\226\001\001\000\004\065\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\070\246\001\001\000\010\026\235\033\234\044" +
    "\243\001\001\000\004\066\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\250\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\254\001\001\000\002\001\001" +
    "\000\004\010\265\001\001\000\004\060\264\001\001\000" +
    "\004\060\261\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\267\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\272\001\001\000\002\001" +
    "\001\000\004\064\277\001\001\000\004\077\034\001\001" +
    "\000\004\054\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\011\077\023\123\036\124" +
    "\037\302\040\121\042\125\001\001\000\006\014\303\036" +
    "\153\001\001\000\010\015\304\027\166\046\164\001\001" +
    "\000\006\027\167\046\164\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    ComplexSymbolFactory f = new ComplexSymbolFactory();
    symbolFactory = f;
    lexer = new Lexer(f); 

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
    return lexer.next_token(); 

    }


 /* override error routines */
  protected Lexer lexer;
  public boolean debugSymbols;
  public void setDebugSymbols(boolean debugSymbols){
    this.debugSymbols = debugSymbols;
  }
  public void report_fatal_error(
    String   message,
    Object   info)
    {
      done_parsing();
      if (info instanceof Symbol) ErrorManager.getManager().emit_fatal(message+ "\nCan't recover from previous error(s), giving up.",(Symbol)info);
      else ErrorManager.getManager().emit_fatal(message + "\nCan't recover from previous error(s), giving up.",cur_token);
      System.exit(1);
    }

    public void report_error(String message, Object info)
    {
      if (info instanceof Symbol)
         ErrorManager.getManager().emit_error(message,(Symbol)info);
      else
         ErrorManager.getManager().emit_error(message,cur_token);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings("all")
class CUP$parser$actions {


  /** helper routine to clone a new production part adding a given label */
  protected production_part add_lab(production_part part, String lab)
    throws internal_error
    {
      /* if there is no label, or this is an action, just return the original */
      if (lab == null || part.is_action()) return part;

      /* otherwise build a new one with the given label attached */
      return new symbol_part(((symbol_part)part).the_symbol(),lab);
    }

  /** max size of right hand side we will support */
  protected final int MAX_RHS = 200;

  /** array for accumulating right hand side parts */
  protected production_part[] rhs_parts = new production_part[MAX_RHS];

  /** where we are currently in building a right hand side */
  protected int rhs_pos = 0;

  /** start a new right hand side */
  protected void new_rhs() {rhs_pos = 0; }

  /** add a new right hand side part */
  protected void add_rhs_part(production_part part) throws java.lang.Exception
    {
      if (rhs_pos >= MAX_RHS)
	throw new Exception("Internal Error: Productions limited to " + 
			     MAX_RHS + " symbols and actions"); 

      rhs_parts[rhs_pos] = part;
      rhs_pos++;
    }

  /** string to build up multiple part names */
  protected String multipart_name = new String();
  protected Stack multipart_names = new Stack();
  /** append a new name segment to the accumulated multipart name */

//  TUM CHANGES
//   protected void append_multipart(String name)
//     {
//       String dot = "";
// 
//       /* if we aren't just starting out, put on a dot */
//       if (multipart_name.length() != 0)  dot = ".";
// 
//       multipart_name = multipart_name.concat(dot + name);
//     }
// TUM CHANGES

  /** table of declared symbols -- contains production parts indexed by name */
  protected Hashtable symbols = new Hashtable();

  /** table of just non terminals -- contains non_terminals indexed by name */
  protected Hashtable non_terms = new Hashtable();

  /** declared start non_terminal */
  protected non_terminal start_nt = null;

  /** left hand side non terminal of the current production */
  protected non_terminal lhs_nt;

  /** Current precedence number */
  int _cur_prec = 0;

  /** Current precedence side */
  int _cur_side = assoc.no_prec;

  /** update the precedences we are declaring */
  protected void update_precedence(int p) {
    _cur_side = p;
    _cur_prec++;
  }
  /** add relevant data to terminals */ 
  protected void add_precedence(String term) {
    if (term == null) {
      System.err.println("Unable to add precedence to nonexistent terminal");
    } else {
      symbol_part sp = (symbol_part)symbols.get(term);
      if (sp == null) {
	System.err.println("Could find terminal " + term + " while declaring precedence");
      } else {
	java_cup.symbol sym = sp.the_symbol();
	if (sym instanceof terminal) 
	  ((terminal)sym).set_precedence(_cur_side, _cur_prec);
	else System.err.println("Precedence declaration: Can't find terminal " + term);
      }
    }
  }
  
  private int cur_debug_id = 0;
  public int get_new_debug_id() {
    return cur_debug_id++;
  }
   
  public String attach_debug_symbol(int id, String code) {
  if (!parser.debugSymbols)
    return code;
  return "//@@CUPDBG" + id + "\n" + code;
  }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= spec EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;

          /* declare "error" as a terminal */
          symbols.put("error", new symbol_part(terminal.error));

          /* declare start non terminal */
          non_terms.put("$START", non_terminal.START_nt);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",48, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // spec ::= NT$0 package_spec import_list class_name code_parts symbol_list precedence_list start_spec production_list 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("spec",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // spec ::= error symbol_list precedence_list start_spec production_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("spec",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;

	  /* save the package name */
	  emit.package_name = multipart_name;

	  /* reset the accumulated multipart name */
	  multipart_name = new String();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",49, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // package_spec ::= PACKAGE multipart_id NT$1 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("package_spec",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // package_spec ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("package_spec",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // import_list ::= import_list import_spec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_list",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // import_list ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_list",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              Object RESULT =null;
 
	  /* save this import on the imports list */
	  emit.import_list.push(multipart_name);

	  /* reset the accumulated multipart name */
	  multipart_name = new String();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",50, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // import_spec ::= IMPORT import_id NT$2 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_spec",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // class_name ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_name",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // class_name ::= CLASS ID SEMI 
            {
              Object RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
     emit.parser_class_name = id;
     emit.symbol_const_class_name = id + "Sym";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_name",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // code_part ::= action_code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // code_part ::= parser_code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // code_part ::= init_code 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // code_part ::= scan_code 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // code_parts ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_parts",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // code_parts ::= code_parts code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_parts",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // action_code_part ::= ACTION CODE CODE_STRING opt_semi 
            {
              Object RESULT =null;
		String user_code = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	  if (emit.action_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant action code (skipping)");
	  else /* save the user included code string */
      emit.action_code = attach_debug_symbol(get_new_debug_id(),user_code);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_code_part",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parser_code_part ::= PARSER CODE CODE_STRING opt_semi 
            {
              Object RESULT =null;
		String user_code = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	  if (emit.parser_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant parser code (skipping)");
	  else /* save the user included code string */
      emit.parser_code = attach_debug_symbol(get_new_debug_id(),user_code);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parser_code_part",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parser_code_part ::= PARSER ID extendsimpls CODE_STRING opt_semi 
            {
              Object RESULT =null;
		String classname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String user_code = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	  if (emit.parser_code!=null) {
	    ErrorManager.getManager().emit_warning("Redundant parser code (skipping)");
	  } else {
	    emit.parser_code = user_code;
	    emit.parser_class_name = classname;
	    emit.extendsimpls = e;
	  }
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parser_code_part",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // extendsimpls ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extendsimpls",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // extendsimpls ::= extendsimpls EXTENDS qualified_identifier 
            {
              String RESULT =null;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String qid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e + " extends " + qid; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extendsimpls",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // extendsimpls ::= extendsimpls IMPLEMENTS qualified_identifier 
            {
              String RESULT =null;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String qid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e + " implements " + qid; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extendsimpls",47, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // qualified_identifier ::= ID 
            {
              String RESULT =null;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	    RESULT = x;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("qualified_identifier",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // qualified_identifier ::= qualified_identifier DOT ID 
            {
              String RESULT =null;
		String qid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	    RESULT = qid + "." + x;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("qualified_identifier",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // init_code ::= INIT WITH CODE_STRING opt_semi 
            {
              Object RESULT =null;
		String user_code = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
	  if (emit.init_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant init code (skipping)");
	  else /* save the user code */
      emit.init_code = attach_debug_symbol(get_new_debug_id(),user_code);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_code",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // scan_code ::= SCAN WITH CODE_STRING opt_semi 
            {
              Object RESULT =null;
		String user_code = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
	  if (emit.scan_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant scan code (skipping)");
	  else /* save the user code */
      emit.scan_code = attach_debug_symbol(get_new_debug_id(),user_code);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scan_code",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // symbol_list ::= symbol_list symbol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbol_list",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // symbol_list ::= symbol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbol_list",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // symbol ::= TERMINAL type_id declares_term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbol",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // symbol ::= TERMINAL declares_term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbol",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // symbol ::= non_terminal type_id declares_non_term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbol",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // symbol ::= non_terminal declares_non_term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbol",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$3 ::= 
            {
              Object RESULT =null;

	  /* reset the accumulated multipart name */
	  multipart_name = new String();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",51, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // symbol ::= TERMINAL error NT$3 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbol",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$4 ::= 
            {
              Object RESULT =null;

	  /* reset the accumulated multipart name */
	  multipart_name = new String();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",52, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // symbol ::= non_terminal error NT$4 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbol",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$5 ::= 
            {
              Object RESULT =null;
 
	  /* reset the accumulated multipart name */
	  multipart_name = new String();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",53, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declares_term ::= term_name_list NT$5 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declares_term",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$6 ::= 
            {
              Object RESULT =null;
 
	  /* reset the accumulated multipart name */
	  multipart_name = new String();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",54, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declares_non_term ::= non_term_name_list NT$6 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declares_non_term",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // term_name_list ::= term_name_list COMMA new_term_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_name_list",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // term_name_list ::= new_term_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_name_list",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // non_term_name_list ::= non_term_name_list COMMA new_non_term_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_term_name_list",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // non_term_name_list ::= new_non_term_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_term_name_list",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // precedence_list ::= precedence_l 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("precedence_list",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // precedence_list ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("precedence_list",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // precedence_l ::= precedence_l preced 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("precedence_l",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // precedence_l ::= preced 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("precedence_l",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$7 ::= 
            {
              Object RESULT =null;

	  update_precedence(assoc.left);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",55, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // preced ::= PRECEDENCE LEFT NT$7 terminal_list SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("preced",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$8 ::= 
            {
              Object RESULT =null;

	  update_precedence(assoc.right);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",56, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // preced ::= PRECEDENCE RIGHT NT$8 terminal_list SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("preced",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$9 ::= 
            {
              Object RESULT =null;

	  update_precedence(assoc.nonassoc);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",57, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // preced ::= PRECEDENCE NONASSOC NT$9 terminal_list SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("preced",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // terminal_list ::= terminal_list COMMA terminal_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_list",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // terminal_list ::= terminal_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_list",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // terminal_id ::= term_id 
            {
              String RESULT =null;
		String sym = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
	  add_precedence(sym);
	  RESULT = sym;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_id",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // term_id ::= symbol_id 
            {
              String RESULT =null;
		String sym = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	  /* check that the symbol_id is a terminal */
	  if (symbols.get(sym) == null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("Terminal \"" + sym + 
			   "\" has not been declared");
	    }
          RESULT = sym;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_id",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$10 ::= 
            {
              Object RESULT =null;
		String start_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
	  /* verify that the name has been declared as a non terminal */
	  non_terminal nt = (non_terminal)non_terms.get(start_name);
	  if (nt == null)
	    {
	    ErrorManager.getManager().emit_error( "Start non terminal \"" + start_name + 
	  		         "\" has not been declared");
	    }
          else
	    {
	      /* remember the non-terminal for later */
	      start_nt = nt;

	      /* build a special start production */
	      new_rhs();
	      add_rhs_part(add_lab(new symbol_part(start_nt), "start_val"));
	      add_rhs_part(new symbol_part(terminal.EOF));
	      if (!emit._xmlactions) add_rhs_part(new action_part("RESULT = start_val;"));
	      emit.start_production = 
		     new production(non_terminal.START_nt, rhs_parts, rhs_pos);
	      new_rhs();
	    }
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",58, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // start_spec ::= START WITH nt_id NT$10 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String start_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_spec",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // start_spec ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_spec",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // production_list ::= production_list production 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("production_list",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // production_list ::= production 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("production_list",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$11 ::= 
            {
              Object RESULT =null;
		String lhs_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

	  /* lookup the lhs nt */
	  lhs_nt = (non_terminal)non_terms.get(lhs_id);

          /* if it wasn't declared, emit a message */
	  if (lhs_nt == null)
	    {
	      if (ErrorManager.getManager().getErrorCount() == 0)
	      ErrorManager.getManager().emit_warning("LHS non terminal \"" + lhs_id + 
			       "\" has not been declared");
	    }

	  /* reset the rhs accumulation */
	  new_rhs();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",59, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // production ::= nt_id NT$11 COLON_COLON_EQUALS rhs_list SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String lhs_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("production",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$12 ::= 
            {
              Object RESULT =null;
 ErrorManager.getManager().emit_error("Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",60, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // production ::= error NT$12 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("production",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // rhs_list ::= rhs_list BAR rhs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rhs_list",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // rhs_list ::= rhs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rhs_list",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // rhs ::= prod_part_list PERCENT_PREC term_id 
            {
              Object RESULT =null;
		String term_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	  java_cup.symbol sym = null;
	  if (lhs_nt != null) 
	    {
	      /* Find the precedence symbol */
	      if (term_name == null) {
		System.err.println("No terminal for contextual precedence");
		sym = null;
	      } else {
		sym = ((symbol_part)symbols.get(term_name)).the_symbol();
	      }
	      /* build the production */
	      production p;
	      if ((sym!=null) && (sym instanceof terminal)) {
		p = new production(lhs_nt, rhs_parts, rhs_pos,
				   ((terminal)sym).precedence_num(),
				   ((terminal)sym).precedence_side());
		((symbol_part)symbols.get(term_name)).the_symbol().note_use();
	      } else {
		System.err.println("Invalid terminal " + term_name + 
				   " for contextual precedence assignment");
		p = new production(lhs_nt, rhs_parts, rhs_pos);
	      }

	      /* if we have no start non-terminal declared and this is 
		 the first production, make its lhs nt the start_nt 
		 and build a special start production for it. */
              if (start_nt == null)
		{
		  start_nt = lhs_nt;

	          /* build a special start production */
	          new_rhs();
	          add_rhs_part(add_lab(new symbol_part(start_nt),"start_val"));
	          add_rhs_part(new symbol_part(terminal.EOF));
		  if (!emit._xmlactions) add_rhs_part(new action_part("RESULT = start_val;"));
		  if ((sym!=null) && (sym instanceof terminal)) {
		    emit.start_production = 
		      new production(non_terminal.START_nt, rhs_parts, 
				     rhs_pos, ((terminal)sym).precedence_num(),
				     ((terminal)sym).precedence_side());
		  } else {
		    emit.start_production = 
		      new production(non_terminal.START_nt, rhs_parts, rhs_pos);
		  }
	          new_rhs();
		}
	    }

	  /* reset the rhs accumulation in any case */
	  new_rhs();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rhs",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // rhs ::= prod_part_list 
            {
              Object RESULT =null;
		 
	  if (lhs_nt != null) 
	    {
	      /* build the production */
	      production p = new production(lhs_nt, rhs_parts, rhs_pos);

	      /* if we have no start non-terminal declared and this is 
		 the first production, make its lhs nt the start_nt 
		 and build a special start production for it. */
              if (start_nt == null)
		{
		  start_nt = lhs_nt;

	          /* build a special start production */
	          new_rhs();
	          add_rhs_part(add_lab(new symbol_part(start_nt),"start_val"));
	          add_rhs_part(new symbol_part(terminal.EOF));
		  if (!emit._xmlactions) add_rhs_part(new action_part("RESULT = start_val;"));
	          emit.start_production = 
		     new production(non_terminal.START_nt, rhs_parts, rhs_pos);

	          new_rhs();
		}
	    }
	  
	  /* reset the rhs accumulation in any case */
	  new_rhs();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rhs",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // prod_part_list ::= prod_part_list prod_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prod_part_list",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // prod_part_list ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prod_part_list",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // prod_part ::= symbol_id opt_label 
            {
              Object RESULT =null;
		String symid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String labid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	  /* try to look up the id */
	  production_part symb = (production_part)symbols.get(symid);

	  /* if that fails, symbol is undeclared */
	  if (symb == null)
	    {
	      if (ErrorManager.getManager().getErrorCount() == 0)
	        ErrorManager.getManager().emit_error("java_cup.runtime.Symbol \"" + symid + 
			       "\" has not been declared");
	    }
	  else
	    {
	      /* add a labeled production part */
	      add_rhs_part(add_lab(symb, labid));
	    }
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prod_part",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // prod_part ::= CODE_STRING 
            {
              Object RESULT =null;
		String code_str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	  /* add a new production part */
    add_rhs_part(new action_part(attach_debug_symbol(get_new_debug_id(),code_str)));
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prod_part",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // opt_label ::= COLON label_id 
            {
              String RESULT =null;
		String labid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = labid; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_label",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // opt_label ::= empty 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_label",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // multipart_id ::= multipart_id DOT robust_id 
            {
              Object RESULT =null;
		String another_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 multipart_name = multipart_name.concat("."+another_id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multipart_id",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$13 ::= 
            {
              Object RESULT =null;
 multipart_names.push(multipart_name); multipart_name="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",61, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // multipart_id ::= multipart_id NT$13 LT typearglist GT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String types = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 multipart_name =
         ((String)multipart_names.pop()).concat("<"+types+">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multipart_id",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // multipart_id ::= robust_id 
            {
              Object RESULT =null;
		String an_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 multipart_name = multipart_name.concat(an_id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multipart_id",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // typearglist ::= typearguement 
            {
              String RESULT =null;
		String arg = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = arg; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typearglist",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // typearglist ::= typearglist COMMA typearguement 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String arg = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = list + "," + arg; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typearglist",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // typearguement ::= type_id 
            {
              String RESULT =null;
		 RESULT = multipart_name; multipart_name = new String(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typearguement",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // typearguement ::= wildcard 
            {
              String RESULT =null;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typearguement",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // wildcard ::= QUESTION 
            {
              String RESULT =null;
		 RESULT = " ? "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wildcard",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // wildcard ::= QUESTION EXTENDS type_id 
            {
              String RESULT =null;
		 RESULT = " ? extends "+multipart_name; multipart_name = new
         String(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wildcard",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // wildcard ::= QUESTION SUPER type_id 
            {
              String RESULT =null;
		 RESULT = " ? super "+multipart_name; multipart_name = new
         String(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wildcard",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // import_id ::= multipart_id DOT STAR 
            {
              Object RESULT =null;
		 multipart_name = multipart_name.concat(".*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_id",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // import_id ::= multipart_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_id",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // type_id ::= multipart_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_id",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // type_id ::= type_id LBRACK RBRACK 
            {
              Object RESULT =null;
		 multipart_name = multipart_name.concat("[]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_id",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // new_term_id ::= ID 
            {
              Object RESULT =null;
		String term_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	  /* see if this terminal has been declared before */
	  if (symbols.get(term_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("java_cup.runtime.Symbol \"" + term_id + 
			   "\" has already been declared");
	    }
	  else
	    {
	      /* if no type declared, declare one */
	      if (multipart_name.equals("")) {
		multipart_name = "Object";
	      }
	      /* build a production_part and put it in the table */ 
	      symbols.put(term_id, 
	        new symbol_part(new terminal(term_id, multipart_name)));
	    }
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_term_id",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // new_non_term_id ::= ID 
            {
              Object RESULT =null;
		String non_term_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	  /* see if this non terminal has been declared before */
	  if (symbols.get(non_term_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error( "java_cup.runtime.Symbol \"" + non_term_id + 
			                      "\" has already been declared");
	    }
	  else
	    {
	      if (multipart_name.equals("")) {
                   multipart_name ="Object";
	      }
	      /* build the non terminal object */
              non_terminal this_nt = 
		new non_terminal(non_term_id, multipart_name);

	      /* put it in the non_terms table */
	      non_terms.put(non_term_id, this_nt);

	      /* build a production_part and put it in the symbols table */ 
	      symbols.put(non_term_id, new symbol_part(this_nt));
	    }
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_non_term_id",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // nt_id ::= ID 
            {
              String RESULT =null;
		String the_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = the_id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_id",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // nt_id ::= error 
            {
              String RESULT =null;
		
		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_id",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // symbol_id ::= ID 
            {
              String RESULT =null;
		String the_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = the_id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbol_id",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // symbol_id ::= error 
            {
              String RESULT =null;
		
		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbol_id",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // label_id ::= robust_id 
            {
              String RESULT =null;
		String the_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = the_id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("label_id",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // robust_id ::= ID 
            {
              String RESULT =null;
		String the_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = the_id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // robust_id ::= CODE 
            {
              String RESULT =null;
		 RESULT = "code"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // robust_id ::= ACTION 
            {
              String RESULT =null;
		 RESULT = "action"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // robust_id ::= PARSER 
            {
              String RESULT =null;
		 RESULT = "parser"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // robust_id ::= TERMINAL 
            {
              String RESULT =null;
		 RESULT = "terminal"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // robust_id ::= NON 
            {
              String RESULT =null;
		 RESULT = "non"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // robust_id ::= NONTERMINAL 
            {
              String RESULT =null;
		 RESULT = "nonterminal"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // robust_id ::= INIT 
            {
              String RESULT =null;
		 RESULT = "init"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // robust_id ::= SCAN 
            {
              String RESULT =null;
		 RESULT = "scan"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // robust_id ::= WITH 
            {
              String RESULT =null;
		 RESULT = "with"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // robust_id ::= START 
            {
              String RESULT =null;
		 RESULT = "start"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // robust_id ::= PRECEDENCE 
            {
              String RESULT =null;
		 RESULT = "precedence"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // robust_id ::= LEFT 
            {
              String RESULT =null;
		 RESULT = "left"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // robust_id ::= RIGHT 
            {
              String RESULT =null;
		 RESULT = "right"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // robust_id ::= NONASSOC 
            {
              String RESULT =null;
		 RESULT = "nonassoc"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // robust_id ::= error 
            {
              String RESULT =null;
		
		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // non_terminal ::= NON TERMINAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_terminal",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // non_terminal ::= NONTERMINAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_terminal",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // opt_semi ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_semi",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // opt_semi ::= SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_semi",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // empty ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("empty",28, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
