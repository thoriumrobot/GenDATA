
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package efg.config.parse;

import java.util.ArrayList;
import java.util.List;
import efg.config.ast.Config;
import efg.config.ast.FactoryMapping;
import efg.config.ast.FactoryName;
import efg.config.ast.Name;
import efg.config.ast.Node;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.lr_parser;
import java_cup.runtime.Symbol;
import polyglot.lex.Identifier;
import polyglot.lex.Token;
import polyglot.util.ErrorInfo;
import polyglot.util.ErrorQueue;
import polyglot.util.Pair;
import polyglot.util.Position;

/** CUP v0.11b 20150326 generated parser.
  */
public class Grm
 extends lr_parser {


  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\004\005\000\002\005\002\000\002\005\013" +
    "\000\002\006\005\000\002\007\003\000\002\007\003\000" +
    "\002\010\003\000\002\010\005\000\002\011\002\000\002" +
    "\011\004\000\002\012\004\000\002\012\006\000\002\012" +
    "\006\000\002\012\010\000\002\013\002\000\002\013\003" +
    "\000\002\013\005\000\002\014\003\000\002\014\005" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\004\161\004\001\002\000\006\016\020\161" +
    "\014\001\002\000\004\002\057\001\002\000\004\002\000" +
    "\001\002\000\006\031\ufffd\054\010\001\002\000\004\046" +
    "\047\001\002\000\004\031\012\001\002\000\006\016\020" +
    "\161\014\001\002\000\010\002\ufff6\016\020\161\014\001" +
    "\002\000\020\017\ufff9\020\ufff9\022\ufff9\023\ufff9\024\ufff9" +
    "\046\ufff9\162\ufff9\001\002\000\012\017\ufff8\020\ufff8\023" +
    "\ufff8\046\ufff8\001\002\000\012\017\025\020\024\023\026" +
    "\046\023\001\002\000\010\002\ufff6\016\020\161\014\001" +
    "\002\000\020\017\ufffa\020\ufffa\022\ufffa\023\ufffa\024\ufffa" +
    "\046\ufffa\162\ufffa\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\ufff5\001\002\000\006\016\020\161\014\001\002" +
    "\000\010\002\ufff4\016\ufff4\161\ufff4\001\002\000\006\016" +
    "\020\161\014\001\002\000\010\016\020\024\ufff0\161\014" +
    "\001\002\000\010\022\uffed\024\uffed\162\035\001\002\000" +
    "\006\022\033\024\uffef\001\002\000\004\024\032\001\002" +
    "\000\010\002\ufff2\016\ufff2\161\ufff2\001\002\000\010\016" +
    "\020\024\ufff0\161\014\001\002\000\004\024\uffee\001\002" +
    "\000\006\016\020\161\014\001\002\000\006\022\uffec\024" +
    "\uffec\001\002\000\012\017\ufff7\020\ufff7\023\ufff7\046\ufff7" +
    "\001\002\000\010\017\025\020\041\023\042\001\002\000" +
    "\010\002\ufff3\016\ufff3\161\ufff3\001\002\000\010\016\020" +
    "\024\ufff0\161\014\001\002\000\004\024\044\001\002\000" +
    "\010\002\ufff1\016\ufff1\161\ufff1\001\002\000\006\017\025" +
    "\020\046\001\002\000\010\002\ufffb\016\ufffb\161\ufffb\001" +
    "\002\000\006\016\020\161\014\001\002\000\006\017\025" +
    "\020\051\001\002\000\004\037\052\001\002\000\004\045" +
    "\053\001\002\000\004\046\054\001\002\000\006\016\020" +
    "\161\014\001\002\000\006\017\025\020\056\001\002\000" +
    "\004\031\ufffc\001\002\000\004\002\001\001\002\000\004" +
    "\020\061\001\002\000\006\031\ufffe\054\ufffe\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\010\002\004\003\005\004\006\001\001\000" +
    "\004\007\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\010\001\001\000\002\001\001\000\004\006" +
    "\012\001\001\000\006\007\014\010\044\001\001\000\012" +
    "\007\014\010\015\011\020\012\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\014" +
    "\010\015\011\021\012\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\014\010\037" +
    "\001\001\000\002\001\001\000\004\007\036\001\001\000" +
    "\010\007\026\013\030\014\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\026\013\033\014\027\001\001\000\002\001\001" +
    "\000\004\007\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\026" +
    "\013\042\014\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\014" +
    "\010\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\014\010\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Grm$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  @Override
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return nextSymbol(); 
    }


    public final Lexer lexer;
    public final ErrorQueue eq;

    public Grm(Lexer l, ErrorQueue q) {
        super(new ComplexSymbolFactory());
        this.lexer = l;
        this.eq = q;
    }

    /**
     * Override the default CUP routine.
     */
    @Override
    public void syntax_error (java_cup.runtime.Symbol current) {
        Position p = ((Token) current.value).getPosition();
        report_error ("Syntax error: unexpected " + current.value + ".", p);
    }

    /**
     * Override the default CUP routine.
     */
    @Override
    public void report_error (String message, Object info) {
        if (info instanceof Position)
            eq.enqueue (ErrorInfo.SYNTAX_ERROR, message, (Position) info);
        else
            eq.enqueue (ErrorInfo.SYNTAX_ERROR, message);
    }

    public Symbol nextSymbol() throws java.io.IOException {
        Token t = lexer.nextToken();
        return new Symbol(t.symbol(), t);
    }

    public Position pos(Token t) {
        return t == null ? null : t.getPosition();
    }

    public Position pos(Node n) {
        return n == null ? null : n.pos;
    }

    public Position pos(Object first, Object last) {
        Position fpos = pos(first);
        Position epos = pos(last);

        if (fpos != null && epos != null) {
            return new Position(fpos, epos);
        }

        return fpos;
    }

    protected Position pos(Object o) {
        if (o instanceof Node) {
            return pos((Node) o);
        }
        else if (o instanceof Token) {
            return pos((Token) o);
        } else {
            return null;
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {
    private final Grm parser;

    /** Constructor */
    CUP$Grm$actions(Grm parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 21. */
    public final java_cup.runtime.Symbol CUP$Grm$do_action_part00000000(
            int                        CUP$Grm$act_num,
            java_cup.runtime.lr_parser CUP$Grm$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$Grm$stack,
            int                        CUP$Grm$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Grm$result;

        /* select the action based on the action number */
        switch (CUP$Grm$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= goal EOF 
            {
                Object RESULT = null;
                Config start_val = CUP$Grm$stack.elementAt(CUP$Grm$top-1).<Config> value();
                RESULT = start_val;
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
            /* ACCEPT */
            CUP$Grm$parser.done_parsing();
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // goal ::= conf_file 
            {
                Config RESULT = null;
                Config a = CUP$Grm$stack.peek().<Config> value();
                
            if (!parser.eq.hasErrors()) RESULT = a;
        
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("goal",0, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // conf_file ::= language_declaration extends_declaration_opt package_declaration factory_mappings 
            {
                Config RESULT = null;
                Name a = CUP$Grm$stack.elementAt(CUP$Grm$top-3).<Name> value();
                Pair<Name,Name> b = CUP$Grm$stack.elementAt(CUP$Grm$top-2).<Pair<Name,Name>> value();
                Name c = CUP$Grm$stack.elementAt(CUP$Grm$top-1).<Name> value();
                List<FactoryMapping> d = CUP$Grm$stack.peek().<List<FactoryMapping>> value();
                
            RESULT = new Config(a, b, c, d);
        
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("conf_file",1, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // language_declaration ::= LANGUAGE identifier SEMICOLON 
            {
                Name RESULT = null;
                Name a = CUP$Grm$stack.elementAt(CUP$Grm$top-1).<Name> value();
                
            RESULT = a;
        
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("language_declaration",2, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // extends_declaration_opt ::= 
            {
                Pair<Name,Name> RESULT = null;

                CUP$Grm$result = parser.getSymbolFactory().newSymbol("extends_declaration_opt",3, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // extends_declaration_opt ::= INTERFACE EXTENDS name SEMICOLON ABSTRACT CLASS EXTENDS name SEMICOLON 
            {
                Pair<Name,Name> RESULT = null;
                Name a = CUP$Grm$stack.elementAt(CUP$Grm$top-6).<Name> value();
                Name b = CUP$Grm$stack.elementAt(CUP$Grm$top-1).<Name> value();
                
            RESULT = new Pair<>(a, b);
        
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("extends_declaration_opt",3, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // package_declaration ::= PACKAGE name SEMICOLON 
            {
                Name RESULT = null;
                Name a = CUP$Grm$stack.elementAt(CUP$Grm$top-1).<Name> value();
                
            RESULT = a;
        
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("package_declaration",4, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // identifier ::= IDENTIFIER 
            {
                Name RESULT = null;
                Identifier a = CUP$Grm$stack.peek().<Identifier> value();
                
            RESULT = new Name(a);
        
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("identifier",5, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // identifier ::= LANGUAGE 
            {
                Name RESULT = null;
                Token a = CUP$Grm$stack.peek().<Token> value();
                
            RESULT = new Name(parser.pos(a), "language");
        
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("identifier",5, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // name ::= identifier 
            {
                Name RESULT = null;
                Name a = CUP$Grm$stack.peek().<Name> value();
                
            RESULT = a;
        
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("name",6, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // name ::= name DOT identifier 
            {
                Name RESULT = null;
                Name a = CUP$Grm$stack.elementAt(CUP$Grm$top-2).<Name> value();
                Name b = CUP$Grm$stack.peek().<Name> value();
                
            RESULT = new Name(parser.pos(a, b), a.name + "." + b.name);
        
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("name",6, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // factory_mappings ::= 
            {
                List<FactoryMapping> RESULT = null;
                
            RESULT = new ArrayList<>();
        
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("factory_mappings",7, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // factory_mappings ::= factory_mapping factory_mappings 
            {
                List<FactoryMapping> RESULT = null;
                FactoryMapping a = CUP$Grm$stack.elementAt(CUP$Grm$top-1).<FactoryMapping> value();
                List<FactoryMapping> b = CUP$Grm$stack.peek().<List<FactoryMapping>> value();
                
            b.add(a);
            RESULT = b;
        
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("factory_mappings",7, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // factory_mapping ::= name SEMICOLON 
            {
                FactoryMapping RESULT = null;
                Name a = CUP$Grm$stack.elementAt(CUP$Grm$top-1).<Name> value();
                
            RESULT = new FactoryMapping(parser.pos(a), a);
        
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("factory_mapping",8, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // factory_mapping ::= name EXTENDS name SEMICOLON 
            {
                FactoryMapping RESULT = null;
                Name a = CUP$Grm$stack.elementAt(CUP$Grm$top-3).<Name> value();
                Name b = CUP$Grm$stack.elementAt(CUP$Grm$top-1).<Name> value();
                
            RESULT = new FactoryMapping(parser.pos(a), a, b);
        
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("factory_mapping",8, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // factory_mapping ::= name LBRACE factory_names RBRACE 
            {
                FactoryMapping RESULT = null;
                Name a = CUP$Grm$stack.elementAt(CUP$Grm$top-3).<Name> value();
                List<FactoryName> b = CUP$Grm$stack.elementAt(CUP$Grm$top-1).<List<FactoryName>> value();
                
            RESULT = new FactoryMapping(parser.pos(a, b), a, b);
        
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("factory_mapping",8, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // factory_mapping ::= name EXTENDS name LBRACE factory_names RBRACE 
            {
                FactoryMapping RESULT = null;
                Name a = CUP$Grm$stack.elementAt(CUP$Grm$top-5).<Name> value();
                Name b = CUP$Grm$stack.elementAt(CUP$Grm$top-3).<Name> value();
                List<FactoryName> c = CUP$Grm$stack.elementAt(CUP$Grm$top-1).<List<FactoryName>> value();
                
            RESULT = new FactoryMapping(parser.pos(a, b), a, b, c);
        
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("factory_mapping",8, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // factory_names ::= 
            {
                List<FactoryName> RESULT = null;
                
            RESULT = new ArrayList<>();
        
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("factory_names",9, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // factory_names ::= factory_name 
            {
                List<FactoryName> RESULT = null;
                FactoryName a = CUP$Grm$stack.peek().<FactoryName> value();
                
            RESULT = new ArrayList<>();
            RESULT.add(a);
        
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("factory_names",9, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // factory_names ::= factory_name COMMA factory_names 
            {
                List<FactoryName> RESULT = null;
                FactoryName a = CUP$Grm$stack.elementAt(CUP$Grm$top-2).<FactoryName> value();
                List<FactoryName> b = CUP$Grm$stack.peek().<List<FactoryName>> value();
                
            b.add(a);
            RESULT = b;
        
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("factory_names",9, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // factory_name ::= identifier 
            {
                FactoryName RESULT = null;
                Name a = CUP$Grm$stack.peek().<Name> value();
                
            RESULT = new FactoryName(parser.pos(a), a);
        
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("factory_name",10, RESULT);
            }
            return CUP$Grm$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // factory_name ::= identifier ARROW identifier 
            {
                FactoryName RESULT = null;
                Name a = CUP$Grm$stack.elementAt(CUP$Grm$top-2).<Name> value();
                Name b = CUP$Grm$stack.peek().<Name> value();
                
            RESULT = new FactoryName(parser.pos(a, b), a, b);
        
                CUP$Grm$result = parser.getSymbolFactory().newSymbol("factory_name",10, RESULT);
            }
            return CUP$Grm$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$Grm$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$Grm$do_action(
            int                        CUP$Grm$act_num,
            java_cup.runtime.lr_parser CUP$Grm$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$Grm$stack,
            int                        CUP$Grm$top)
            throws java.lang.Exception {
            return CUP$Grm$do_action_part00000000(
                           CUP$Grm$act_num,
                           CUP$Grm$parser,
                           CUP$Grm$stack,
                           CUP$Grm$top);
    }
}

}
