{
  "annotation_type": "@Positive",
  "total_examples": 50,
  "positive_examples": 25,
  "negative_examples": 25,
  "balance_ratio": 0.5,
  "examples": [
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/__cfwr_aux157.json",
      "method_name": "__cfwr_aux157",
      "line_number": null,
      "node_type": "",
      "node_label": "Entry",
      "features": [
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Entry | Next: Exit..."
    },
    {
      "node_id": 10,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ArrayCreationChecks/ArrayCreationChecks.json",
      "method_name": "ArrayCreationChecks",
      "line_number": 11,
      "node_type": "",
      "node_label": "int[] newArray = new int[x + y];",
      "features": [
        32.0,
        11.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: int[] newArray = new int[x + y]; | Line: 11 | Next: @IndexFor(\"newArray\")..."
    },
    {
      "node_id": 17,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/RandomTest/test.json",
      "method_name": "test",
      "line_number": 34,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=8)], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)), name=a)], modifiers=set(), type=BasicType(dimensions=[None], name=int))",
      "features": [
        423.0,
        34.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=8)], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)), name=a)], modifiers=set(), type=BasicType(dimensions=[None], name=int)) | Line: 34 | Prev: LocalVariableDeclaration(annot... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 10,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/UBLiteralFlow/UBLiteralFlow.json",
      "method_name": "UBLiteralFlow",
      "line_number": 11,
      "node_type": "",
      "node_label": "private static int lineStartIndex(String s, int start) {",
      "features": [
        56.0,
        11.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: private static int lineStartIndex(String s, int start) { | Line: 11 | Prev: @IndexOrLow(\"#1\")... | Next: for (int __cfwr_i5 = 0..."
    },
    {
      "node_id": 10,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Errors/test.json",
      "method_name": "test",
      "line_number": 25,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=n1p, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), name=a)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        382.0,
        25.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=n1p, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), name=a)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 25 | Prev: LocalVariableDeclaration(annot... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 12,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 13,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        13.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 13 | Prev: return null;... | Next: } catch (Exception __cfwr_e60)..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/__cfwr_aux157.json",
      "method_name": "__cfwr_aux157",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: Return(Literal(postfix_operato..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ExampleUsage/obviously_unsafe_loop.json",
      "method_name": "obviously_unsafe_loop",
      "line_number": 17,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5)], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)), name=arr)], modifiers=set(), type=BasicType(dimensions=[None], name=int))",
      "features": [
        425.0,
        17.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5)], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)), name=arr)], modifiers=set(), type=BasicType(dimensions=[None], name=int)) | Line: 17 | Prev: Break... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: For(BinaryOperation(operandl=M..."
    },
    {
      "node_id": 10,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetExample/OffsetExample.json",
      "method_name": "OffsetExample",
      "line_number": 11,
      "node_type": "",
      "node_label": "void test(@IndexFor(\"#3\") int start, @IndexOrHigh(\"#3\") int end, int[] a) {",
      "features": [
        75.0,
        11.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: void test(@IndexFor(\"#3\") int start, @IndexOrHigh(\"#3\") int end, int[] a) { | Line: 11 | Next: if ((-65.74 << (-1..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 11,
      "node_type": "",
      "node_label": "For(BinaryOperation(operandl=MemberReference(member=__cfwr_i54, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6), operator=<))",
      "features": [
        246.0,
        11.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: For(BinaryOperation(operandl=MemberReference(member=__cfwr_i54, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6), operator=<)) | Line: 11 | Prev: For(BinaryOperation(operandl=M... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 10,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/NegativeArray/negativeArray.json",
      "method_name": "negativeArray",
      "line_number": 31,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=len, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)), name=arr)], modifiers=set(), type=BasicType(dimensions=[None], name=int))",
      "features": [
        432.0,
        31.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=len, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)), name=arr)], modifiers=set(), type=BasicType(dimensions=[None], name=int)) | Line: 31 | Prev: Catch(__cfwr_e84)..."
    },
    {
      "node_id": 42,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/UBLiteralFlow/UBLiteralFlow.json",
      "method_name": "UBLiteralFlow",
      "line_number": 43,
      "node_type": "",
      "node_label": "int newlinePos = s.indexOf(\"\\n\", start - 1);",
      "features": [
        44.0,
        43.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: int newlinePos = s.indexOf(\"\\n\", start - 1); | Line: 43 | Prev: }... | Next: int afterNewline = (newlinePos..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Errors/test.json",
      "method_name": "test",
      "line_number": 16,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5)], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)), name=arr)], modifiers=set(), type=BasicType(dimensions=[None], name=int))",
      "features": [
        425.0,
        16.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5)], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)), name=arr)], modifiers=set(), type=BasicType(dimensions=[None], name=int)) | Line: 16 | Prev: Update(MemberReference(member=... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 6,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        6.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Line: 6 | Prev: import org.checkerframework.ch... | Next: public class BitSetLowerBound ..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 4,
      "node_type": "",
      "node_label": "import java.util.BitSet;",
      "features": [
        24.0,
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: import java.util.BitSet; | Line: 4 | Prev: */... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 9,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Index167/Index167.json",
      "method_name": "Index167",
      "line_number": 10,
      "node_type": "",
      "node_label": "static void fn1(int[] arr, @IndexFor(\"#1\") int i) {",
      "features": [
        51.0,
        10.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: static void fn1(int[] arr, @IndexFor(\"#1\") int i) { | Line: 10 | Next: if (true || fa..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ArrayConstructionPositiveLength/ArrayConstructionPositiveLength.json",
      "method_name": "ArrayConstructionPositiveLength",
      "line_number": 6,
      "node_type": "",
      "node_label": "public void makeArray(@Positive int max_values) {",
      "features": [
        49.0,
        6.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: public void makeArray(@Positive int max_values) { | Line: 6 | Next: String @MinLen(1) [] a = new S..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 1,
      "node_type": "",
      "node_label": "/*",
      "features": [
        2.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: /* | Line: 1 | Next: * CFWR augmentation: inserted ..."
    },
    {
      "node_id": 11,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanDec/LessThanDec.json",
      "method_name": "LessThanDec",
      "line_number": 12,
      "node_type": "",
      "node_label": "private static int lastIndexOf(short[] array, short target, @IndexOrHigh(\"#1\") int start, @IndexOrHigh(\"#1\") int end) {",
      "features": [
        119.0,
        12.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: private static int lastIndexOf(short[] array, short target, @IndexOrHigh(\"#1\") int start, @IndexOrHigh(\"#1\") int end) { | Line: 12 | Prev: @LessThan(\"#4\")... | Next: return false;..."
    },
    {
      "node_id": 9,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 10,
      "node_type": "",
      "node_label": "try {",
      "features": [
        5.0,
        10.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: try { | Line: 10 | Prev: private void m(BitSet b) {... | Next: for (int __cfwr_i89 = 0; __cfw..."
    },
    {
      "node_id": 8,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/MinMaxIndex/MinMaxIndex.json",
      "method_name": "MinMaxIndex",
      "line_number": 9,
      "node_type": "",
      "node_label": "void indexForOrHigh(String str, @IndexFor(\"#1\") int i1, @IndexOrHigh(\"#1\") int i2) {",
      "features": [
        84.0,
        9.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: void indexForOrHigh(String str, @IndexFor(\"#1\") int i1, @IndexOrHigh(\"#1\") int i2) { | Line: 9 | Next: try {..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 11,
      "node_type": "",
      "node_label": "Update(MemberReference(member=__cfwr_i54, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[]))",
      "features": [
        115.0,
        11.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Update(MemberReference(member=__cfwr_i54, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])) | Line: 11 | Prev: LocalVariableDeclaration(annot... | Next: Update(MemberReference(member=..."
    },
    {
      "node_id": 15,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 16,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        16.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 16 | Prev: // ignore..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 8,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        8.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Line: 8 | Prev: public class BitSetLowerBound ... | Next: private void m(BitSet b) {..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 10,
      "node_type": "",
      "node_label": "For(BinaryOperation(operandl=MemberReference(member=__cfwr_i87, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), operator=<))",
      "features": [
        246.0,
        10.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: For(BinaryOperation(operandl=MemberReference(member=__cfwr_i87, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), operator=<)) | Line: 10 | Prev: Exit... | Next: For(BinaryOperation(operandl=M..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": null,
      "node_type": "",
      "node_label": "Entry",
      "features": [
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Entry | Next: Exit..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ArrayIntro/ArrayIntro.json",
      "method_name": "ArrayIntro",
      "line_number": 6,
      "node_type": "",
      "node_label": "public class ArrayIntro {",
      "features": [
        25.0,
        6.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: public class ArrayIntro { | Line: 6"
    },
    {
      "node_id": 12,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringIndexOf/StringIndexOf.json",
      "method_name": "StringIndexOf",
      "line_number": 13,
      "node_type": "",
      "node_label": "int i = l.indexOf(\"constant\");",
      "features": [
        30.0,
        13.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: int i = l.indexOf(\"constant\"); | Line: 13 | Next: if (i != -1) {..."
    },
    {
      "node_id": 8,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 9,
      "node_type": "",
      "node_label": "private void m(BitSet b) {",
      "features": [
        26.0,
        9.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: private void m(BitSet b) { | Line: 9 | Next: try {..."
    },
    {
      "node_id": 13,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 14,
      "node_type": "",
      "node_label": "} catch (Exception __cfwr_e60) {",
      "features": [
        32.0,
        14.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } catch (Exception __cfwr_e60) { | Line: 14 | Prev: }... | Next: // ignore..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 2,
      "node_type": "",
      "node_label": "* CFWR augmentation: inserted irrelevant code for data augmentation.",
      "features": [
        68.0,
        2.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: * CFWR augmentation: inserted irrelevant code for data augmentation. | Line: 2 | Prev: /*... | Next: */..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 12,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_item38)], modifiers=set(), type=BasicType(dimensions=[], name=byte))",
      "features": [
        274.0,
        12.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_item38)], modifiers=set(), type=BasicType(dimensions=[], name=byte)) | Line: 12 | Prev: For(BinaryOperation(operandl=M... | Next: Update(MemberReference(member=..."
    },
    {
      "node_id": 11,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 12,
      "node_type": "",
      "node_label": "return null;",
      "features": [
        12.0,
        12.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: return null; | Line: 12 | Prev: for (int __cfwr_i89 = 0; __cfw... | Next: }..."
    },
    {
      "node_id": 44,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/UBLiteralFlow/UBLiteralFlow.json",
      "method_name": "UBLiteralFlow",
      "line_number": 45,
      "node_type": "",
      "node_label": "int returnPos1 = s.indexOf(\"\\r\\n\", start - 2);",
      "features": [
        46.0,
        45.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: int returnPos1 = s.indexOf(\"\\r\\n\", start - 2); | Line: 45 | Prev: int afterNewline = (newlinePos... | Next: int returnPos2 = s.indexOf(\"\\r..."
    },
    {
      "node_id": 16,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 17,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        17.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Line: 17 | Prev: }... | Next: b.set(b.nextClearBit(0));..."
    },
    {
      "node_id": 14,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 15,
      "node_type": "",
      "node_label": "// ignore",
      "features": [
        9.0,
        15.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: // ignore | Line: 15 | Prev: } catch (Exception __cfwr_e60)... | Next: }..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/PrimitiveWrappers/PrimitiveWrappers.json",
      "method_name": "PrimitiveWrappers",
      "line_number": 8,
      "node_type": "",
      "node_label": "void array_creation(@NonNegative Integer i, @NonNegative int j) {",
      "features": [
        65.0,
        8.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: void array_creation(@NonNegative Integer i, @NonNegative int j) { | Line: 8 | Next: if (false && (2.99 >> -304)) {..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/__cfwr_aux157.json",
      "method_name": "__cfwr_aux157",
      "line_number": 30,
      "node_type": "",
      "node_label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=672L))",
      "features": [
        100.0,
        30.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=672L)) | Line: 30 | Prev: Exit..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 3,
      "node_type": "",
      "node_label": "*/",
      "features": [
        2.0,
        3.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: */ | Line: 3 | Prev: * CFWR augmentation: inserted ... | Next: import java.util.BitSet;..."
    },
    {
      "node_id": 11,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Errors/test.json",
      "method_name": "test",
      "line_number": 26,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=u, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), name=b)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        380.0,
        26.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=u, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), name=b)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 26 | Prev: LocalVariableDeclaration(annot... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 10,
      "node_type": "",
      "node_label": "Update(MemberReference(member=__cfwr_i87, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[]))",
      "features": [
        115.0,
        10.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Update(MemberReference(member=__cfwr_i87, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])) | Line: 10 | Prev: Update(MemberReference(member=... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 12,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Errors/test.json",
      "method_name": "test",
      "line_number": 27,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=nn, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), name=c)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        381.0,
        27.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=nn, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), name=c)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 27 | Prev: LocalVariableDeclaration(annot... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 11,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LTLengthOfPostcondition/LTLengthOfPostcondition.json",
      "method_name": "LTLengthOfPostcondition",
      "line_number": 12,
      "node_type": "",
      "node_label": "public void useTryShiftIndex(@NonNegative int x) {",
      "features": [
        50.0,
        12.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: public void useTryShiftIndex(@NonNegative int x) { | Line: 12 | Next: short __cfwr_obj87 = nu..."
    },
    {
      "node_id": 45,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/UBLiteralFlow/UBLiteralFlow.json",
      "method_name": "UBLiteralFlow",
      "line_number": 46,
      "node_type": "",
      "node_label": "int returnPos2 = s.indexOf(\"\\r\", start - 1);",
      "features": [
        44.0,
        46.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: int returnPos2 = s.indexOf(\"\\r\", start - 1); | Line: 46 | Prev: int returnPos1 = s.indexOf(\"\\r... | Next: int afterReturn1 = (returnPos1..."
    },
    {
      "node_id": 8,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Index118/Index118.json",
      "method_name": "Index118",
      "line_number": 9,
      "node_type": "",
      "node_label": "public static void bar(@NonNegative int i, String @ArrayLen(4) [] args) {",
      "features": [
        73.0,
        9.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: public static void bar(@NonNegative int i, String @ArrayLen(4) [] args) { | Line: 9 | Next: Integer __cfwr_obj34 = null;..."
    },
    {
      "node_id": 11,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Index176/test.json",
      "method_name": "test",
      "line_number": 28,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\";\")], member=indexOf, postfix_operators=[], prefix_operators=[], qualifier=arglist, selectors=[], type_arguments=None), name=semi_pos)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        410.0,
        28.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\";\")], member=indexOf, postfix_operators=[], prefix_operators=[], qualifier=arglist, selectors=[], type_arguments=None), name=semi_pos)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 28 | Prev: Catch(__cfwr_e49)... | Next: If(BinaryOperation(operandl=Me..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/test.json",
      "method_name": "test",
      "line_number": 22,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"array\"), name=IndexOrHigh)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=index, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        538.0,
        22.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"array\"), name=IndexOrHigh)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=index, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+), name=y)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 22 | Prev: Assignment(expressionl=MemberR... | Next: Assignment(expressionl=MemberR..."
    },
    {
      "node_id": 13,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Errors/test.json",
      "method_name": "test",
      "line_number": 28,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=p, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), name=d)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        380.0,
        28.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.6,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=p, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), name=d)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 28 | Prev: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 7,
      "node_type": "",
      "node_label": "public class BitSetLowerBound {",
      "features": [
        31.0,
        7.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: public class BitSetLowerBound { | Line: 7"
    }
  ]
}