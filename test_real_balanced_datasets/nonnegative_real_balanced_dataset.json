{
  "annotation_type": "@NonNegative",
  "total_examples": 50,
  "positive_examples": 25,
  "negative_examples": 25,
  "balance_ratio": 0.5,
  "examples": [
    {
      "node_id": 19,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 20,
      "node_type": "",
      "node_label": "@GTENegativeOne",
      "features": [
        15.0,
        20.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: @GTENegativeOne | Line: 20 | Prev: b.clear(b.nextSetBit(0));... | Next: int i = b.nextSetBit(0);..."
    },
    {
      "node_id": 18,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 19,
      "node_type": "",
      "node_label": "b.clear(b.nextSetBit(0));",
      "features": [
        25.0,
        19.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: b.clear(b.nextSetBit(0)); | Line: 19 | Prev: b.set(b.nextClearBit(0));... | Next: @GTENegativeOne..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic/Polymorphic.json",
      "method_name": "Polymorphic",
      "line_number": 5,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.LTEqLengthOf;",
      "features": [
        60.0,
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.LTEqLengthOf; | Line: 5 | Prev: import org.checkerframework.ch... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/UBLiteralFlow/UBLiteralFlow.json",
      "method_name": "UBLiteralFlow",
      "line_number": 6,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.LTLengthOf;",
      "features": [
        58.0,
        6.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.LTLengthOf; | Line: 6 | Prev: import org.checkerframework.ch..."
    },
    {
      "node_id": 11,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 25,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), operator=-), name=f)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        559.0,
        25.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), operator=-), name=f)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 25 | Prev: LocalVariableDeclaration(annot... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 11,
      "node_type": "",
      "node_label": "For(BinaryOperation(operandl=MemberReference(member=__cfwr_i54, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6), operator=<))",
      "features": [
        246.0,
        11.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: For(BinaryOperation(operandl=MemberReference(member=__cfwr_i54, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6), operator=<)) | Line: 11 | Prev: For(BinaryOperation(operandl=M... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 10,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LengthOfArrayMinusOne/test.json",
      "method_name": "test",
      "line_number": 20,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=arr, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-))]), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        526.0,
        20.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 1.0,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=arr, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-))]), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 20 | Prev: Update(MemberReference(member=... | Next: If(BinaryOperation(operandl=Me..."
    },
    {
      "node_id": 10,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/test.json",
      "method_name": "test",
      "line_number": 27,
      "node_type": "",
      "node_label": "Assignment(expressionl=MemberReference(member=index, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[]))",
      "features": [
        242.0,
        27.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 1.0,
      "code_context": "Label: Assignment(expressionl=MemberReference(member=index, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[])) | Line: 27 | Prev: If(BinaryOperation(operandl=Me..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 17,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-), name=c)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        559.0,
        17.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-), name=c)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 17 | Prev: Update(MemberReference(member=... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 7,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.LTLengthOf;",
      "features": [
        58.0,
        7.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.LTLengthOf; | Line: 7 | Prev: import org.checkerframework.ch... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 10,
      "node_type": "",
      "node_label": "For(BinaryOperation(operandl=MemberReference(member=__cfwr_i87, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), operator=<))",
      "features": [
        246.0,
        10.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: For(BinaryOperation(operandl=MemberReference(member=__cfwr_i87, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), operator=<)) | Line: 10 | Prev: Exit... | Next: For(BinaryOperation(operandl=M..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/RefineLTE/RefineLTE.json",
      "method_name": "RefineLTE",
      "line_number": 4,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.LTEqLengthOf;",
      "features": [
        60.0,
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.LTEqLengthOf; | Line: 4 | Prev: */... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 13,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 14,
      "node_type": "",
      "node_label": "} catch (Exception __cfwr_e60) {",
      "features": [
        32.0,
        14.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } catch (Exception __cfwr_e60) { | Line: 14 | Prev: }... | Next: // ignore..."
    },
    {
      "node_id": 9,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/test.json",
      "method_name": "test",
      "line_number": 24,
      "node_type": "",
      "node_label": "If(BinaryOperation(operandl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[]), operator=<))",
      "features": [
        251.0,
        24.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: If(BinaryOperation(operandl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=array, selectors=[]), operator=<)) | Line: 24 | Prev: Assignment(expressionl=MemberR... | Next: Assignment(expressionl=MemberR..."
    },
    {
      "node_id": 8,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 19,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTEqLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-), name=c1)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        562.0,
        19.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTEqLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-), name=c1)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 19 | Prev: LocalVariableDeclaration(annot... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 23,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 24,
      "node_type": "",
      "node_label": "if ((78L % -8) && false) {",
      "features": [
        26.0,
        24.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: if ((78L % -8) && false) { | Line: 24 | Next: Object __cfwr_temp24 = null;..."
    },
    {
      "node_id": 27,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 28,
      "node_type": "",
      "node_label": "@GTENegativeOne",
      "features": [
        15.0,
        28.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: @GTENegativeOne | Line: 28 | Prev: int j = b.previousClearBit(-1)... | Next: int k = b.previousSetBit(-1);..."
    },
    {
      "node_id": 9,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 21,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=-), name=d)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        559.0,
        21.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=-), name=d)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 21 | Prev: LocalVariableDeclaration(annot... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/__cfwr_aux157.json",
      "method_name": "__cfwr_aux157",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: Return(Literal(postfix_operato..."
    },
    {
      "node_id": 10,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 11,
      "node_type": "",
      "node_label": "for (int __cfwr_i89 = 0; __cfwr_i89 < 8; __cfwr_i89++) {",
      "features": [
        56.0,
        11.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: for (int __cfwr_i89 = 0; __cfwr_i89 < 8; __cfwr_i89++) { | Line: 11 | Prev: try {... | Next: return null;..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 12,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_item38)], modifiers=set(), type=BasicType(dimensions=[], name=byte))",
      "features": [
        274.0,
        12.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_item38)], modifiers=set(), type=BasicType(dimensions=[], name=byte)) | Line: 12 | Prev: For(BinaryOperation(operandl=M... | Next: Update(MemberReference(member=..."
    },
    {
      "node_id": 12,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/method3.json",
      "method_name": "method3",
      "line_number": 36,
      "node_type": "",
      "node_label": "Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=vDown, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ArrayCreator(dimensions=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=size, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)))",
      "features": [
        570.0,
        36.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=vDown, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ArrayCreator(dimensions=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=size, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int))) | Line: 36 | Prev: Assignment(expressionl=This(po... | Next: Assignment(expressionl=MemberR..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 10,
      "node_type": "",
      "node_label": "Update(MemberReference(member=__cfwr_i87, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[]))",
      "features": [
        115.0,
        10.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Update(MemberReference(member=__cfwr_i87, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])) | Line: 10 | Prev: Update(MemberReference(member=... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 11,
      "node_type": "",
      "node_label": "Update(MemberReference(member=__cfwr_i54, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[]))",
      "features": [
        115.0,
        11.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Update(MemberReference(member=__cfwr_i54, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])) | Line: 11 | Prev: LocalVariableDeclaration(annot... | Next: Update(MemberReference(member=..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": null,
      "node_type": "",
      "node_label": "Exit",
      "features": [
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Exit | Prev: Entry... | Next: For(BinaryOperation(operandl=M..."
    },
    {
      "node_id": 28,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 29,
      "node_type": "",
      "node_label": "int k = b.previousSetBit(-1);",
      "features": [
        29.0,
        29.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: int k = b.previousSetBit(-1); | Line: 29 | Prev: @GTENegativeOne... | Next: }..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/RefineLTE/RefineLTE.json",
      "method_name": "RefineLTE",
      "line_number": 5,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.LTLengthOf;",
      "features": [
        58.0,
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.LTLengthOf; | Line: 5 | Prev: import org.checkerframework.ch..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/__cfwr_aux157.json",
      "method_name": "__cfwr_aux157",
      "line_number": 30,
      "node_type": "",
      "node_label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=672L))",
      "features": [
        100.0,
        30.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=672L)) | Line: 30 | Prev: Exit..."
    },
    {
      "node_id": 12,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 27,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTEqLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), name=j)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        418.0,
        27.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTEqLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), name=j)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 27 | Prev: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 1,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 2,
      "node_type": "",
      "node_label": "* CFWR augmentation: inserted irrelevant code for data augmentation.",
      "features": [
        68.0,
        2.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: * CFWR augmentation: inserted irrelevant code for data augmentation. | Line: 2 | Prev: /*... | Next: */..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Index167/Index167.json",
      "method_name": "Index167",
      "line_number": 5,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.LTOMLengthOf;",
      "features": [
        60.0,
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.LTOMLengthOf; | Line: 5 | Prev: import org.checkerframework.ch... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 26,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 27,
      "node_type": "",
      "node_label": "int j = b.previousClearBit(-1);",
      "features": [
        31.0,
        27.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: int j = b.previousClearBit(-1); | Line: 27 | Prev: }... | Next: @GTENegativeOne..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LTLengthOfPostcondition/LTLengthOfPostcondition.json",
      "method_name": "LTLengthOfPostcondition",
      "line_number": 6,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.EnsuresLTLengthOfIf;",
      "features": [
        67.0,
        6.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.EnsuresLTLengthOfIf; | Line: 6 | Prev: import org.checkerframework.ch... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 20,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 21,
      "node_type": "",
      "node_label": "int i = b.nextSetBit(0);",
      "features": [
        24.0,
        21.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: int i = b.nextSetBit(0); | Line: 21 | Prev: @GTENegativeOne... | Next: @GTENegativeOne..."
    },
    {
      "node_id": 24,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 25,
      "node_type": "",
      "node_label": "Object __cfwr_temp24 = null;",
      "features": [
        28.0,
        25.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Object __cfwr_temp24 = null; | Line: 25 | Prev: if ((78L % -8) && false) {... | Next: }..."
    },
    {
      "node_id": 21,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 22,
      "node_type": "",
      "node_label": "@GTENegativeOne",
      "features": [
        15.0,
        22.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: @GTENegativeOne | Line: 22 | Prev: int i = b.nextSetBit(0);..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic/Polymorphic.json",
      "method_name": "Polymorphic",
      "line_number": 6,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.LTLengthOf;",
      "features": [
        58.0,
        6.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.LTLengthOf; | Line: 6 | Prev: import org.checkerframework.ch... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 12,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LengthOfArrayMinusOne/test.json",
      "method_name": "test",
      "line_number": 22,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=arr, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-))]), name=j)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        526.0,
        22.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 1.0,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=arr, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-))]), name=j)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 22 | Prev: If(BinaryOperation(operandl=Me..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Issue2494/Issue2494.json",
      "method_name": "Issue2494",
      "line_number": 5,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.LTLengthOf;",
      "features": [
        58.0,
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.LTLengthOf; | Line: 5 | Prev: import org.checkerframework.ch... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/UBPoly/UBPoly.json",
      "method_name": "UBPoly",
      "line_number": 4,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.LTLengthOf;",
      "features": [
        58.0,
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.LTLengthOf; | Line: 4 | Prev: */... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 8,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 9,
      "node_type": "",
      "node_label": "private void m(BitSet b) {",
      "features": [
        26.0,
        9.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: private void m(BitSet b) { | Line: 9 | Next: try {..."
    },
    {
      "node_id": 17,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 18,
      "node_type": "",
      "node_label": "int @SameLen(\"s\") [] array = new int[s.length()];",
      "features": [
        49.0,
        18.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: int @SameLen(\"s\") [] array = new int[s.length()]; | Line: 18 | Next: int @SameLen(\"s\") [] array1 = ..."
    },
    {
      "node_id": 14,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 15,
      "node_type": "",
      "node_label": "// ignore",
      "features": [
        9.0,
        15.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: // ignore | Line: 15 | Prev: } catch (Exception __cfwr_e60)... | Next: }..."
    },
    {
      "node_id": 17,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 18,
      "node_type": "",
      "node_label": "b.set(b.nextClearBit(0));",
      "features": [
        25.0,
        18.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: b.set(b.nextClearBit(0)); | Line: 18 | Next: b.clear(b.nextSetBit(0));..."
    },
    {
      "node_id": 10,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 23,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), operator=-), name=e)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        559.0,
        23.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=ElementArrayValue(values=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"arr\")]), name=LTLengthOf)], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), operator=-), name=e)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 23 | Prev: LocalVariableDeclaration(annot... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 7,
      "node_type": "",
      "node_label": "public class BitSetLowerBound {",
      "features": [
        31.0,
        7.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: public class BitSetLowerBound { | Line: 7"
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LTLengthOfPostcondition/LTLengthOfPostcondition.json",
      "method_name": "LTLengthOfPostcondition",
      "line_number": 5,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.EnsuresLTLengthOf;",
      "features": [
        65.0,
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.EnsuresLTLengthOf; | Line: 5 | Prev: import java.util.Arrays;... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 18,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 19,
      "node_type": "",
      "node_label": "int @SameLen(\"s\") [] array1 = new int[s.length() + 1];",
      "features": [
        54.0,
        19.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: int @SameLen(\"s\") [] array1 = new int[s.length() + 1]; | Line: 19 | Prev: int @SameLen(\"s\") [] array = n... | Next: }..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LTLengthOfPostcondition/LTLengthOfPostcondition.json",
      "method_name": "LTLengthOfPostcondition",
      "line_number": 7,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.LTEqLengthOf;",
      "features": [
        60.0,
        7.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.LTEqLengthOf; | Line: 7 | Prev: import org.checkerframework.ch... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 4,
      "node_type": "",
      "node_label": "import java.util.BitSet;",
      "features": [
        24.0,
        4.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: import java.util.BitSet; | Line: 4 | Prev: */... | Next: import org.checkerframework.ch..."
    }
  ]
}