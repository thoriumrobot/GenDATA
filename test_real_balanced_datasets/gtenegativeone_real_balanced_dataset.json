{
  "annotation_type": "@GTENegativeOne",
  "total_examples": 50,
  "positive_examples": 25,
  "negative_examples": 25,
  "balance_ratio": 0.5,
  "examples": [
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/SizeVsLength/getArray.json",
      "method_name": "getArray",
      "line_number": 12,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_temp61)], modifiers=set(), type=BasicType(dimensions=[], name=short))",
      "features": [
        275.0,
        12.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_temp61)], modifiers=set(), type=BasicType(dimensions=[], name=short)) | Line: 12 | Prev: While(Literal(postfix_operator... | Next: Return(Literal(postfix_operato..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_util219.json",
      "method_name": "__cfwr_util219",
      "line_number": 40,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=>>), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=^), name=__cfwr_var35)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        556.0,
        40.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=>>), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=^), name=__cfwr_var35)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 40 | Prev: Exit... | Next: For(BinaryOperation(operandl=M..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanValue/foo.json",
      "method_name": "foo",
      "line_number": 16,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='1'), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='n'), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=53.29), operator=|), operator=*), name=__cfwr_val91)], modifiers=set(), type=BasicType(dimensions=[], name=short))",
      "features": [
        555.0,
        16.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='1'), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='n'), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=53.29), operator=|), operator=*), name=__cfwr_val91)], modifiers=set(), type=BasicType(dimensions=[], name=short)) | Line: 16 | Prev: Exit... | Next: Throw(ClassCreator(arguments=[..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/__cfwr_temp661.json",
      "method_name": "__cfwr_temp661",
      "line_number": 48,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_var21)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Boolean, sub_type=None))",
      "features": [
        311.0,
        48.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_var21)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Boolean, sub_type=None)) | Line: 48 | Prev: Catch(__cfwr_e36)... | Next: If(BinaryOperation(operandl=Li..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_compute793.json",
      "method_name": "__cfwr_compute793",
      "line_number": 32,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_val81)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Boolean, sub_type=None))",
      "features": [
        311.0,
        32.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_val81)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Boolean, sub_type=None)) | Line: 32 | Prev: While(Literal(postfix_operator... | Next: Break..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_util219.json",
      "method_name": "__cfwr_util219",
      "line_number": 43,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='5'), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7.50f), operator=&), name=__cfwr_var2)], modifiers=set(), type=BasicType(dimensions=[], name=double))",
      "features": [
        415.0,
        43.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='5'), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7.50f), operator=&), name=__cfwr_var2)], modifiers=set(), type=BasicType(dimensions=[], name=double)) | Line: 43 | Prev: While(Literal(postfix_operator... | Next: Break..."
    },
    {
      "node_id": 24,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 25,
      "node_type": "",
      "node_label": "Object __cfwr_temp24 = null;",
      "features": [
        28.0,
        25.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: Object __cfwr_temp24 = null; | Line: 25 | Prev: if ((78L % -8) && false) {... | Next: }..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 6,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        6.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Line: 6 | Prev: import org.checkerframework.ch... | Next: public class BitSetLowerBound ..."
    },
    {
      "node_id": 14,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ReflectArray/ReflectArray.json",
      "method_name": "ReflectArray",
      "line_number": 15,
      "node_type": "",
      "node_label": "long __cfwr_temp633(Boolean __cfwr_p0, long __cfwr_p1, Integer __cfwr_p2) {",
      "features": [
        75.0,
        15.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: long __cfwr_temp633(Boolean __cfwr_p0, long __cfwr_p1, Integer __cfwr_p2) { | Line: 15 | Prev: }... | Next: if (true && true) {..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Errors/test.json",
      "method_name": "test",
      "line_number": 20,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[Annotation(element=None, name=LowerBoundUnknown)], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=10), name=u)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "features": [
        310.0,
        20.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 1.0,
      "code_context": "Label: LocalVariableDeclaration(annotations=[Annotation(element=None, name=LowerBoundUnknown)], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=10), name=u)], modifiers=set(), type=BasicType(dimensions=[], name=int)) | Line: 20 | Prev: LocalVariableDeclaration(annot... | Next: LocalVariableDeclaration(annot..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": null,
      "node_type": "",
      "node_label": "Entry",
      "features": [
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Entry | Next: Exit..."
    },
    {
      "node_id": 53,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/StringLength/StringLength.json",
      "method_name": "StringLength",
      "line_number": 54,
      "node_type": "",
      "node_label": "String __cfwr_temp30 = \"test57\";",
      "features": [
        32.0,
        54.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: String __cfwr_temp30 = \"test57\"; | Line: 54 | Prev: try {... | Next: } catch (Exception __cfwr_e59)..."
    },
    {
      "node_id": 22,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 23,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        23.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Line: 23 | Prev: @GTENegativeOne... | Next: if ((78L % -8) && false) {..."
    },
    {
      "node_id": 32,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 33,
      "node_type": "",
      "node_label": "try {",
      "features": [
        5.0,
        33.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: try { | Line: 33 | Prev: if (true || (false << 87.40)) ... | Next: for (int __cfwr_i65 = 0; __cfw..."
    },
    {
      "node_id": 29,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 30,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        30.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 30 | Prev: int k = b.previousSetBit(-1);... | Next: private Double __cfwr_process3..."
    },
    {
      "node_id": 9,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 10,
      "node_type": "",
      "node_label": "try {",
      "features": [
        5.0,
        10.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: try { | Line: 10 | Prev: private void m(BitSet b) {... | Next: for (int __cfwr_i89 = 0; __cfw..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/RefineSubtrahend/__cfwr_calc848.json",
      "method_name": "__cfwr_calc848",
      "line_number": 29,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_item65)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Character, sub_type=None))",
      "features": [
        314.0,
        29.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_item65)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Character, sub_type=None)) | Line: 29 | Prev: Exit... | Next: Return(BinaryOperation(operand..."
    },
    {
      "node_id": 38,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 39,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        39.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 39 | Prev: // ignore... | Next: }..."
    },
    {
      "node_id": 45,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 46,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        46.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 46 | Prev: // ignore... | Next: break; // Prevent infinite loo..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/test.json",
      "method_name": "test",
      "line_number": 12,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_item38)], modifiers=set(), type=BasicType(dimensions=[], name=byte))",
      "features": [
        274.0,
        12.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_item38)], modifiers=set(), type=BasicType(dimensions=[], name=byte)) | Line: 12 | Prev: For(BinaryOperation(operandl=M... | Next: Update(MemberReference(member=..."
    },
    {
      "node_id": 42,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 43,
      "node_type": "",
      "node_label": "return true;",
      "features": [
        12.0,
        43.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: return true; | Line: 43 | Prev: try {... | Next: } catch (Exception __cfwr_e34)..."
    },
    {
      "node_id": 2,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 3,
      "node_type": "",
      "node_label": "*/",
      "features": [
        2.0,
        3.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: */ | Line: 3 | Prev: * CFWR augmentation: inserted ... | Next: import java.util.BitSet;..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic/Polymorphic.json",
      "method_name": "Polymorphic",
      "line_number": 8,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.PolyLowerBound;",
      "features": [
        62.0,
        8.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.PolyLowerBound; | Line: 8 | Prev: import org.checkerframework.ch... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 6,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 7,
      "node_type": "",
      "node_label": "public class BitSetLowerBound {",
      "features": [
        31.0,
        7.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: public class BitSetLowerBound { | Line: 7"
    },
    {
      "node_id": 33,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/PrimitiveWrappers/PrimitiveWrappers.json",
      "method_name": "PrimitiveWrappers",
      "line_number": 34,
      "node_type": "",
      "node_label": "String __cfwr_result23 = \"test82\";",
      "features": [
        34.0,
        34.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: String __cfwr_result23 = \"test82\"; | Line: 34 | Prev: if (true || (-202L << 'M')) {... | Next: }..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/UBPoly/UBPoly.json",
      "method_name": "UBPoly",
      "line_number": 6,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.PolyUpperBound;",
      "features": [
        62.0,
        6.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.PolyUpperBound; | Line: 6 | Prev: import org.checkerframework.ch..."
    },
    {
      "node_id": 47,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 48,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        48.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 48 | Prev: break; // Prevent infinite loo... | Next: return null;..."
    },
    {
      "node_id": 11,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 12,
      "node_type": "",
      "node_label": "return null;",
      "features": [
        12.0,
        12.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: return null; | Line: 12 | Prev: for (int __cfwr_i89 = 0; __cfw... | Next: }..."
    },
    {
      "node_id": 9,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/Polymorphic/Polymorphic.json",
      "method_name": "Polymorphic",
      "line_number": 10,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.PolyUpperBound;",
      "features": [
        62.0,
        10.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.8,
      "code_context": "Label: import org.checkerframework.checker.index.qual.PolyUpperBound; | Line: 10 | Prev: import org.checkerframework.ch... | Next: import org.checkerframework.ch..."
    },
    {
      "node_id": 5,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/__cfwr_aux198.json",
      "method_name": "__cfwr_aux198",
      "line_number": 60,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_entry27)], modifiers=set(), type=BasicType(dimensions=[], name=short))",
      "features": [
        276.0,
        60.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_entry27)], modifiers=set(), type=BasicType(dimensions=[], name=short)) | Line: 60 | Prev: While(BinaryOperation(operandl... | Next: Break..."
    },
    {
      "node_id": 3,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/LessThanValue/__cfwr_func65.json",
      "method_name": "__cfwr_func65",
      "line_number": 60,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=23.06), name=__cfwr_item90)], modifiers=set(), type=BasicType(dimensions=[], name=double))",
      "features": [
        280.0,
        60.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=23.06), name=__cfwr_item90)], modifiers=set(), type=BasicType(dimensions=[], name=double)) | Line: 60 | Prev: If(BinaryOperation(operandl=Li... | Next: Return(Literal(postfix_operato..."
    },
    {
      "node_id": 35,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 36,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        36.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 36 | Prev: return -29.39f;... | Next: } catch (Exception __cfwr_e8) ..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 1,
      "node_type": "",
      "node_label": "/*",
      "features": [
        2.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: /* | Line: 1 | Next: * CFWR augmentation: inserted ..."
    },
    {
      "node_id": 25,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 26,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        26.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 26 | Prev: Object __cfwr_temp24 = null;... | Next: int j = b.previousClearBit(-1)..."
    },
    {
      "node_id": 12,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 13,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        13.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 13 | Prev: return null;... | Next: } catch (Exception __cfwr_e60)..."
    },
    {
      "node_id": 15,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 16,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        16.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 16 | Prev: // ignore..."
    },
    {
      "node_id": 11,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/__cfwr_temp661.json",
      "method_name": "__cfwr_temp661",
      "line_number": 57,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_node35)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))",
      "features": [
        312.0,
        57.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_node35)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None)) | Line: 57 | Prev: While(BinaryOperation(operandl... | Next: Break..."
    },
    {
      "node_id": 8,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/OffsetsAndConstants/__cfwr_aux198.json",
      "method_name": "__cfwr_aux198",
      "line_number": 66,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=39.92f), name=__cfwr_val19)], modifiers=set(), type=BasicType(dimensions=[], name=float))",
      "features": [
        276.0,
        66.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=39.92f), name=__cfwr_val19)], modifiers=set(), type=BasicType(dimensions=[], name=float)) | Line: 66 | Prev: Update(MemberReference(member=... | Next: If(BinaryOperation(operandl=Li..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/method3.json",
      "method_name": "method3",
      "line_number": 17,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), name=__cfwr_item28)], modifiers=set(), type=BasicType(dimensions=[], name=boolean))",
      "features": [
        278.0,
        17.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), name=__cfwr_item28)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)) | Line: 17 | Prev: While(Literal(postfix_operator... | Next: Break..."
    },
    {
      "node_id": 23,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/GreaterThanOrEqualTransfer/GreaterThanOrEqualTransfer.json",
      "method_name": "GreaterThanOrEqualTransfer",
      "line_number": 24,
      "node_type": "",
      "node_label": "Object __cfwr_temp98 = null;",
      "features": [
        28.0,
        24.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: Object __cfwr_temp98 = null; | Line: 24 | Prev: private Integer __cfwr_compute... | Next: if (true && ((-424L + 705L) * ..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 5,
      "node_type": "",
      "node_label": "import org.checkerframework.checker.index.qual.GTENegativeOne;",
      "features": [
        62.0,
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: import org.checkerframework.checker.index.qual.GTENegativeOne; | Line: 5 | Prev: import java.util.BitSet;..."
    },
    {
      "node_id": 39,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 40,
      "node_type": "",
      "node_label": "}",
      "features": [
        1.0,
        40.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: } | Line: 40 | Prev: }... | Next: while (true) {..."
    },
    {
      "node_id": 0,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IntroSub/__cfwr_aux157.json",
      "method_name": "__cfwr_aux157",
      "line_number": null,
      "node_type": "",
      "node_label": "Entry",
      "features": [
        5.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: Entry | Next: Exit..."
    },
    {
      "node_id": 7,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 8,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        8.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Line: 8 | Prev: public class BitSetLowerBound ... | Next: private void m(BitSet b) {..."
    },
    {
      "node_id": 34,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 35,
      "node_type": "",
      "node_label": "return -29.39f;",
      "features": [
        15.0,
        35.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: return -29.39f; | Line: 35 | Prev: for (int __cfwr_i65 = 0; __cfw... | Next: }..."
    },
    {
      "node_id": 48,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 49,
      "node_type": "",
      "node_label": "return null;",
      "features": [
        12.0,
        49.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: return null; | Line: 49 | Prev: }... | Next: }..."
    },
    {
      "node_id": 9,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/IndexOrLowTests/__cfwr_util219.json",
      "method_name": "__cfwr_util219",
      "line_number": 49,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"temp21\"), name=__cfwr_data87)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))",
      "features": [
        315.0,
        49.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"temp21\"), name=__cfwr_data87)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)) | Line: 49 | Prev: For(BinaryOperation(operandl=M... | Next: Update(MemberReference(member=..."
    },
    {
      "node_id": 41,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 42,
      "node_type": "",
      "node_label": "try {",
      "features": [
        5.0,
        42.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Label: try { | Line: 42 | Prev: while (true) {... | Next: return true;..."
    },
    {
      "node_id": 16,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/BitSetLowerBound/BitSetLowerBound.json",
      "method_name": "BitSetLowerBound",
      "line_number": 17,
      "node_type": "",
      "node_label": "",
      "features": [
        0.0,
        17.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": false,
      "confidence": 0.5,
      "code_context": "Line: 17 | Prev: }... | Next: b.set(b.nextClearBit(0));..."
    },
    {
      "node_id": 4,
      "file_path": "/home/ubuntu/GenDATA/cfg_output_specimin/ErrorMessageCheck/__cfwr_temp661.json",
      "method_name": "__cfwr_temp661",
      "line_number": 42,
      "node_type": "",
      "node_label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_data82)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Character, sub_type=None))",
      "features": [
        314.0,
        42.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "is_positive": true,
      "confidence": 0.7,
      "code_context": "Label: LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_data82)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Character, sub_type=None)) | Line: 42 | Prev: If(BinaryOperation(operandl=Li... | Next: Catch(__cfwr_e36)..."
    }
  ]
}