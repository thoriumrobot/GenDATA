{
  "method_name": "lineStartIndex2",
  "java_file": null,
  "nodes": [
    {
      "id": 0,
      "label": "Entry",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 1,
      "label": "Exit",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 2,
      "label": "If(BinaryOperation(operandl=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=s, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator===))",
      "line": 9,
      "node_type": "control"
    },
    {
      "id": 3,
      "label": "Return(Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=1))",
      "line": 26,
      "node_type": "control"
    },
    {
      "id": 4,
      "label": "If(BinaryOperation(operandl=MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator===))",
      "line": 12,
      "node_type": "control"
    },
    {
      "id": 5,
      "label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0))",
      "line": 13,
      "node_type": "control"
    },
    {
      "id": 6,
      "label": "If(BinaryOperation(operandl=MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=s, selectors=[], type_arguments=None), operator=>))",
      "line": 15,
      "node_type": "control"
    },
    {
      "id": 7,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"\\n\"), BinaryOperation(operandl=MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)], member=indexOf, postfix_operators=[], prefix_operators=[], qualifier=s, selectors=[], type_arguments=None), name=newlinePos)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "line": 18,
      "node_type": "control"
    },
    {
      "id": 8,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=TernaryExpression(condition=BinaryOperation(operandl=MemberReference(member=newlinePos, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=1), operator===), if_false=BinaryOperation(operandl=MemberReference(member=newlinePos, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+), if_true=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[])), name=afterNewline)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "line": 19,
      "node_type": "control"
    },
    {
      "id": 9,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"\\r\\n\"), BinaryOperation(operandl=MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=-)], member=indexOf, postfix_operators=[], prefix_operators=[], qualifier=s, selectors=[], type_arguments=None), name=returnPos1)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "line": 20,
      "node_type": "control"
    },
    {
      "id": 10,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"\\r\"), BinaryOperation(operandl=MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)], member=indexOf, postfix_operators=[], prefix_operators=[], qualifier=s, selectors=[], type_arguments=None), name=returnPos2)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "line": 21,
      "node_type": "control"
    },
    {
      "id": 11,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=TernaryExpression(condition=BinaryOperation(operandl=MemberReference(member=returnPos1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=1), operator===), if_false=BinaryOperation(operandl=MemberReference(member=returnPos1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=+), if_true=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[])), name=afterReturn1)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "line": 22,
      "node_type": "control"
    },
    {
      "id": 12,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=TernaryExpression(condition=BinaryOperation(operandl=MemberReference(member=returnPos2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=1), operator===), if_false=BinaryOperation(operandl=MemberReference(member=returnPos2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+), if_true=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[])), name=afterReturn2)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "line": 23,
      "node_type": "control"
    },
    {
      "id": 13,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=afterNewline, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[MemberReference(member=afterReturn1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=afterReturn2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=min, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None)], member=min, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), name=lineStart)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "line": 24,
      "node_type": "control"
    },
    {
      "id": 14,
      "label": "If(BinaryOperation(operandl=MemberReference(member=lineStart, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=s, selectors=[], type_arguments=None), operator=>=))",
      "line": 25,
      "node_type": "control"
    },
    {
      "id": 15,
      "label": "Return(MemberReference(member=lineStart, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))",
      "line": 28,
      "node_type": "control"
    }
  ],
  "edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 2,
      "target": 4
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 4,
      "target": 6
    },
    {
      "source": 6,
      "target": 3
    },
    {
      "source": 6,
      "target": 7
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 7,
      "target": 8,
      "variable": "newlinePos"
    },
    {
      "source": 8,
      "target": 9
    },
    {
      "source": 8,
      "target": 13,
      "variable": "afterNewline"
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 9,
      "target": 11,
      "variable": "returnPos1"
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 10,
      "target": 12,
      "variable": "returnPos2"
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 11,
      "target": 13,
      "variable": "afterReturn1"
    },
    {
      "source": 12,
      "target": 13
    },
    {
      "source": 12,
      "target": 13,
      "variable": "afterReturn2"
    },
    {
      "source": 13,
      "target": 14
    },
    {
      "source": 13,
      "target": 14,
      "variable": "lineStart"
    },
    {
      "source": 13,
      "target": 15,
      "variable": "lineStart"
    },
    {
      "source": 14,
      "target": 3
    },
    {
      "source": 14,
      "target": 15
    }
  ],
  "control_edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 2,
      "target": 4
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 4,
      "target": 6
    },
    {
      "source": 6,
      "target": 3
    },
    {
      "source": 6,
      "target": 7
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 8,
      "target": 9
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 12,
      "target": 13
    },
    {
      "source": 13,
      "target": 14
    },
    {
      "source": 14,
      "target": 3
    },
    {
      "source": 14,
      "target": 15
    }
  ],
  "dataflow_edges": [
    {
      "source": 7,
      "target": 8,
      "variable": "newlinePos"
    },
    {
      "source": 8,
      "target": 13,
      "variable": "afterNewline"
    },
    {
      "source": 9,
      "target": 11,
      "variable": "returnPos1"
    },
    {
      "source": 10,
      "target": 12,
      "variable": "returnPos2"
    },
    {
      "source": 11,
      "target": 13,
      "variable": "afterReturn1"
    },
    {
      "source": 12,
      "target": 13,
      "variable": "afterReturn2"
    },
    {
      "source": 13,
      "target": 14,
      "variable": "lineStart"
    },
    {
      "source": 13,
      "target": 15,
      "variable": "lineStart"
    }
  ]
}