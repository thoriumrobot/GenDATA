{
  "method_name": "hexDecode",
  "java_file": null,
  "nodes": [
    {
      "id": 0,
      "label": "Entry",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 1,
      "label": "Exit",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 2,
      "label": "Try",
      "line": 88,
      "node_type": "control"
    },
    {
      "id": 3,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=s, selectors=[], type_arguments=None), name=len)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "line": 89,
      "node_type": "control"
    },
    {
      "id": 4,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[BinaryOperation(operandl=MemberReference(member=len, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=/)], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=byte)), name=r)], modifiers=set(), type=BasicType(dimensions=[None], name=byte))",
      "line": 90,
      "node_type": "control"
    },
    {
      "id": 5,
      "label": "For(BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=r, selectors=[]), operator=<))",
      "line": 91,
      "node_type": "control"
    },
    {
      "id": 6,
      "label": "LocalVariableDeclaration(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"index\"), name=SuppressWarnings)], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=*)], member=charAt, postfix_operators=[], prefix_operators=[], qualifier=s, selectors=[], type_arguments=None), name=digit1), VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=*), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)], member=charAt, postfix_operators=[], prefix_operators=[], qualifier=s, selectors=[], type_arguments=None), name=digit2)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "line": 93,
      "node_type": "control"
    },
    {
      "id": 7,
      "label": "If(BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=digit1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='0'), operator=>=), operandr=BinaryOperation(operandl=MemberReference(member=digit1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='9'), operator=<=), operator=&&))",
      "line": 94,
      "node_type": "control"
    },
    {
      "id": 8,
      "label": "Assignment(expressionl=MemberReference(member=digit1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=-=, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='0'))",
      "line": 95,
      "node_type": "control"
    },
    {
      "id": 9,
      "label": "If(BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=digit1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='a'), operator=>=), operandr=BinaryOperation(operandl=MemberReference(member=digit1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='f'), operator=<=), operator=&&))",
      "line": 96,
      "node_type": "control"
    },
    {
      "id": 10,
      "label": "Assignment(expressionl=MemberReference(member=digit1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=-=, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='a'), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), operator=-))",
      "line": 97,
      "node_type": "control"
    },
    {
      "id": 11,
      "label": "If(BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=digit2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='0'), operator=>=), operandr=BinaryOperation(operandl=MemberReference(member=digit2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='9'), operator=<=), operator=&&))",
      "line": 99,
      "node_type": "control"
    },
    {
      "id": 12,
      "label": "Assignment(expressionl=MemberReference(member=digit2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=-=, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='0'))",
      "line": 100,
      "node_type": "control"
    },
    {
      "id": 13,
      "label": "If(BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=digit2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='a'), operator=>=), operandr=BinaryOperation(operandl=MemberReference(member=digit2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='f'), operator=<=), operator=&&))",
      "line": 101,
      "node_type": "control"
    },
    {
      "id": 14,
      "label": "Assignment(expressionl=MemberReference(member=digit2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=-=, value=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='a'), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), operator=-))",
      "line": 102,
      "node_type": "control"
    },
    {
      "id": 15,
      "label": "Assignment(expressionl=MemberReference(member=r, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=Cast(expression=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=digit1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), operator=<<), operandr=MemberReference(member=digit2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), type=BasicType(dimensions=[], name=byte)))",
      "line": 104,
      "node_type": "control"
    },
    {
      "id": 16,
      "label": "Update(MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[]))",
      "line": 91,
      "node_type": "control"
    },
    {
      "id": 17,
      "label": "Return(MemberReference(member=r, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))",
      "line": 106,
      "node_type": "control"
    },
    {
      "id": 18,
      "label": "Catch(e)",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 19,
      "label": "Throw(ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"hexDecode(): invalid input\")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=IllegalArgumentException, sub_type=None)))",
      "line": 108,
      "node_type": "control"
    }
  ],
  "edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 2,
      "target": 18
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 5,
      "target": 17
    },
    {
      "source": 6,
      "target": 7
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 7,
      "target": 9
    },
    {
      "source": 8,
      "target": 11
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 9,
      "target": 11
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 11,
      "target": 13
    },
    {
      "source": 11,
      "target": 13
    },
    {
      "source": 11,
      "target": 13
    },
    {
      "source": 12,
      "target": 15
    },
    {
      "source": 12,
      "target": 15
    },
    {
      "source": 12,
      "target": 15
    },
    {
      "source": 13,
      "target": 14
    },
    {
      "source": 13,
      "target": 14
    },
    {
      "source": 13,
      "target": 14
    },
    {
      "source": 13,
      "target": 15
    },
    {
      "source": 13,
      "target": 15
    },
    {
      "source": 13,
      "target": 15
    },
    {
      "source": 14,
      "target": 15
    },
    {
      "source": 14,
      "target": 15
    },
    {
      "source": 14,
      "target": 15
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 17,
      "variable": "r"
    },
    {
      "source": 16,
      "target": 5
    },
    {
      "source": 18,
      "target": 19
    }
  ],
  "control_edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 2,
      "target": 18
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 5,
      "target": 17
    },
    {
      "source": 6,
      "target": 7
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 7,
      "target": 9
    },
    {
      "source": 8,
      "target": 11
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 9,
      "target": 11
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 11,
      "target": 13
    },
    {
      "source": 11,
      "target": 13
    },
    {
      "source": 11,
      "target": 13
    },
    {
      "source": 12,
      "target": 15
    },
    {
      "source": 12,
      "target": 15
    },
    {
      "source": 12,
      "target": 15
    },
    {
      "source": 13,
      "target": 14
    },
    {
      "source": 13,
      "target": 14
    },
    {
      "source": 13,
      "target": 14
    },
    {
      "source": 13,
      "target": 15
    },
    {
      "source": 13,
      "target": 15
    },
    {
      "source": 13,
      "target": 15
    },
    {
      "source": 14,
      "target": 15
    },
    {
      "source": 14,
      "target": 15
    },
    {
      "source": 14,
      "target": 15
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 16,
      "target": 5
    },
    {
      "source": 18,
      "target": 19
    }
  ],
  "dataflow_edges": [
    {
      "source": 15,
      "target": 17,
      "variable": "r"
    }
  ]
}