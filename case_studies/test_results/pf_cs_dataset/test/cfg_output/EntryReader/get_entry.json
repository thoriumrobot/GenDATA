{
  "method_name": "get_entry",
  "java_file": null,
  "nodes": [
    {
      "id": 0,
      "label": "Entry",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 1,
      "label": "Exit",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 2,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=readLine, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=line)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))",
      "line": 621,
      "node_type": "control"
    },
    {
      "id": 3,
      "label": "While(BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[], member=trim, postfix_operators=[], prefix_operators=[], qualifier=line, selectors=[MethodInvocation(arguments=[], member=length, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator===), operator=&&))",
      "line": 622,
      "node_type": "control"
    },
    {
      "id": 4,
      "label": "Assignment(expressionl=MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[], member=readLine, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None))",
      "line": 687,
      "node_type": "control"
    },
    {
      "id": 5,
      "label": "If(BinaryOperation(operandl=MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===))",
      "line": 664,
      "node_type": "control"
    },
    {
      "id": 6,
      "label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null))",
      "line": 626,
      "node_type": "control"
    },
    {
      "id": 7,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10000)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=StringBuilder, sub_type=None)), name=body)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=StringBuilder, sub_type=None))",
      "line": 629,
      "node_type": "control"
    },
    {
      "id": 8,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=entry)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Entry, sub_type=None))",
      "line": 630,
      "node_type": "control"
    },
    {
      "id": 9,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getFileName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=filename)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))",
      "line": 631,
      "node_type": "control"
    },
    {
      "id": 10,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getLineNumber, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=line_number)], modifiers=set(), type=BasicType(dimensions=[], name=long))",
      "line": 632,
      "node_type": "control"
    },
    {
      "id": 11,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=entry_match)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Matcher, sub_type=None))",
      "line": 635,
      "node_type": "control"
    },
    {
      "id": 12,
      "label": "If(BinaryOperation(operandl=MemberReference(member=entry_start_re, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=))",
      "line": 636,
      "node_type": "control"
    },
    {
      "id": 13,
      "label": "Assignment(expressionl=MemberReference(member=entry_match, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=matcher, postfix_operators=[], prefix_operators=[], qualifier=entry_start_re, selectors=[], type_arguments=None))",
      "line": 667,
      "node_type": "control"
    },
    {
      "id": 14,
      "label": "If(BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=entry_match, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), operandr=MethodInvocation(arguments=[], member=find, postfix_operators=[], prefix_operators=[], qualifier=entry_match, selectors=[], type_arguments=None), operator=&&))",
      "line": 639,
      "node_type": "control"
    },
    {
      "id": 15,
      "label": "Unknown(AssertStatement)",
      "line": 641,
      "node_type": "control"
    },
    {
      "id": 16,
      "label": "If(BinaryOperation(operandl=MethodInvocation(arguments=[], member=groupCount, postfix_operators=[], prefix_operators=[], qualifier=entry_match, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=>))",
      "line": 645,
      "node_type": "control"
    },
    {
      "id": 17,
      "label": "LocalVariableDeclaration(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"nullness\"), name=SuppressWarnings)], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)], member=group, postfix_operators=[], prefix_operators=[], qualifier=entry_match, selectors=[], type_arguments=None), name=match_group_1)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))",
      "line": 648,
      "node_type": "control"
    },
    {
      "id": 18,
      "label": "Assignment(expressionl=MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[MemberReference(member=match_group_1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=replaceFirst, postfix_operators=[], prefix_operators=[], qualifier=entry_match, selectors=[], type_arguments=None))",
      "line": 649,
      "node_type": "control"
    },
    {
      "id": 19,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), name=description)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))",
      "line": 681,
      "node_type": "control"
    },
    {
      "id": 20,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=matcher, postfix_operators=[], prefix_operators=[], qualifier=entry_stop_re, selectors=[], type_arguments=None), name=end_entry_match)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Matcher, sub_type=None))",
      "line": 656,
      "node_type": "control"
    },
    {
      "id": 21,
      "label": "While(BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), operandr=MethodInvocation(arguments=[], member=find, postfix_operators=[], prefix_operators=['!'], qualifier=entry_match, selectors=[], type_arguments=None), operator=&&), operandr=MethodInvocation(arguments=[], member=find, postfix_operators=[], prefix_operators=['!'], qualifier=end_entry_match, selectors=[], type_arguments=None), operator=&&), operandr=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getFileName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)], member=equals, postfix_operators=[], prefix_operators=[], qualifier=filename, selectors=[], type_arguments=None), operator=&&))",
      "line": 657,
      "node_type": "control"
    },
    {
      "id": 22,
      "label": "MethodInvocation(arguments=[MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=append, postfix_operators=[], prefix_operators=[], qualifier=body, selectors=[], type_arguments=None)",
      "line": 685,
      "node_type": "control"
    },
    {
      "id": 23,
      "label": "MethodInvocation(arguments=[MemberReference(member=lineSep, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=append, postfix_operators=[], prefix_operators=[], qualifier=body, selectors=[], type_arguments=None)",
      "line": 686,
      "node_type": "control"
    },
    {
      "id": 24,
      "label": "Break",
      "line": 665,
      "node_type": "control"
    },
    {
      "id": 25,
      "label": "Assignment(expressionl=MemberReference(member=end_entry_match, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=matcher, postfix_operators=[], prefix_operators=[], qualifier=entry_stop_re, selectors=[], type_arguments=None))",
      "line": 668,
      "node_type": "control"
    },
    {
      "id": 26,
      "label": "If(BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)], member=find, postfix_operators=[], prefix_operators=[], qualifier=entry_match, selectors=[], type_arguments=None), operandr=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getFileName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)], member=equals, postfix_operators=[], prefix_operators=['!'], qualifier=filename, selectors=[], type_arguments=None), operator=||), operator=&&))",
      "line": 673,
      "node_type": "control"
    },
    {
      "id": 27,
      "label": "MethodInvocation(arguments=[MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=putback, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)",
      "line": 693,
      "node_type": "control"
    },
    {
      "id": 28,
      "label": "Assignment(expressionl=MemberReference(member=entry, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=ClassCreator(arguments=[MemberReference(member=description, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=toString, postfix_operators=[], prefix_operators=[], qualifier=body, selectors=[], type_arguments=None), MemberReference(member=filename, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=line_number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Entry, sub_type=None)))",
      "line": 677,
      "node_type": "control"
    },
    {
      "id": 29,
      "label": "While(BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[], member=trim, postfix_operators=[], prefix_operators=[], qualifier=line, selectors=[MethodInvocation(arguments=[], member=length, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=!=), operator=&&), operandr=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getFileName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)], member=equals, postfix_operators=[], prefix_operators=[], qualifier=filename, selectors=[], type_arguments=None), operator=&&))",
      "line": 684,
      "node_type": "control"
    },
    {
      "id": 30,
      "label": "If(BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), operandr=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getFileName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)], member=equals, postfix_operators=[], prefix_operators=['!'], qualifier=filename, selectors=[], type_arguments=None), operator=&&))",
      "line": 692,
      "node_type": "control"
    },
    {
      "id": 31,
      "label": "Assignment(expressionl=MemberReference(member=entry, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=ClassCreator(arguments=[MemberReference(member=description, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=toString, postfix_operators=[], prefix_operators=[], qualifier=body, selectors=[], type_arguments=None), MemberReference(member=filename, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=line_number, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Entry, sub_type=None)))",
      "line": 696,
      "node_type": "control"
    },
    {
      "id": 32,
      "label": "Return(MemberReference(member=entry, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))",
      "line": 699,
      "node_type": "control"
    }
  ],
  "edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 3,
      "target": 5
    },
    {
      "source": 4,
      "target": 3
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 4,
      "target": 29
    },
    {
      "source": 4,
      "target": 29
    },
    {
      "source": 4,
      "target": 30,
      "variable": "line"
    },
    {
      "source": 4,
      "target": 30,
      "variable": "line"
    },
    {
      "source": 4,
      "target": 27,
      "variable": "line"
    },
    {
      "source": 4,
      "target": 27,
      "variable": "line"
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 5,
      "target": 7
    },
    {
      "source": 5,
      "target": 24
    },
    {
      "source": 5,
      "target": 24
    },
    {
      "source": 5,
      "target": 24
    },
    {
      "source": 5,
      "target": 24
    },
    {
      "source": 5,
      "target": 13
    },
    {
      "source": 5,
      "target": 13
    },
    {
      "source": 5,
      "target": 13
    },
    {
      "source": 5,
      "target": 13
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 8,
      "target": 9
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 12,
      "target": 13
    },
    {
      "source": 12,
      "target": 14
    },
    {
      "source": 13,
      "target": 14
    },
    {
      "source": 13,
      "target": 25
    },
    {
      "source": 13,
      "target": 25
    },
    {
      "source": 13,
      "target": 25
    },
    {
      "source": 13,
      "target": 25
    },
    {
      "source": 14,
      "target": 15
    },
    {
      "source": 14,
      "target": 15
    },
    {
      "source": 14,
      "target": 19
    },
    {
      "source": 14,
      "target": 19
    },
    {
      "source": 15,
      "target": 15
    },
    {
      "source": 15,
      "target": 15
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 16,
      "target": 17
    },
    {
      "source": 16,
      "target": 17
    },
    {
      "source": 16,
      "target": 19
    },
    {
      "source": 16,
      "target": 19
    },
    {
      "source": 17,
      "target": 18
    },
    {
      "source": 17,
      "target": 18
    },
    {
      "source": 17,
      "target": 18,
      "variable": "match_group_1"
    },
    {
      "source": 17,
      "target": 18,
      "variable": "match_group_1"
    },
    {
      "source": 18,
      "target": 19
    },
    {
      "source": 18,
      "target": 19
    },
    {
      "source": 19,
      "target": 20
    },
    {
      "source": 19,
      "target": 20
    },
    {
      "source": 19,
      "target": 20
    },
    {
      "source": 19,
      "target": 20
    },
    {
      "source": 19,
      "target": 29
    },
    {
      "source": 19,
      "target": 29
    },
    {
      "source": 20,
      "target": 21
    },
    {
      "source": 20,
      "target": 21
    },
    {
      "source": 20,
      "target": 21
    },
    {
      "source": 20,
      "target": 21
    },
    {
      "source": 21,
      "target": 22
    },
    {
      "source": 21,
      "target": 22
    },
    {
      "source": 21,
      "target": 22
    },
    {
      "source": 21,
      "target": 22
    },
    {
      "source": 21,
      "target": 26
    },
    {
      "source": 21,
      "target": 26
    },
    {
      "source": 21,
      "target": 26
    },
    {
      "source": 21,
      "target": 26
    },
    {
      "source": 22,
      "target": 23
    },
    {
      "source": 22,
      "target": 23
    },
    {
      "source": 22,
      "target": 23
    },
    {
      "source": 22,
      "target": 23
    },
    {
      "source": 22,
      "target": 23
    },
    {
      "source": 22,
      "target": 23
    },
    {
      "source": 23,
      "target": 4
    },
    {
      "source": 23,
      "target": 4
    },
    {
      "source": 23,
      "target": 4
    },
    {
      "source": 23,
      "target": 4
    },
    {
      "source": 23,
      "target": 4
    },
    {
      "source": 23,
      "target": 4
    },
    {
      "source": 25,
      "target": 21
    },
    {
      "source": 25,
      "target": 21
    },
    {
      "source": 25,
      "target": 21
    },
    {
      "source": 25,
      "target": 21
    },
    {
      "source": 26,
      "target": 27
    },
    {
      "source": 26,
      "target": 27
    },
    {
      "source": 26,
      "target": 27
    },
    {
      "source": 26,
      "target": 27
    },
    {
      "source": 26,
      "target": 28
    },
    {
      "source": 26,
      "target": 28
    },
    {
      "source": 26,
      "target": 28
    },
    {
      "source": 26,
      "target": 28
    },
    {
      "source": 27,
      "target": 28
    },
    {
      "source": 27,
      "target": 28
    },
    {
      "source": 27,
      "target": 28
    },
    {
      "source": 27,
      "target": 28
    },
    {
      "source": 27,
      "target": 31
    },
    {
      "source": 27,
      "target": 31
    },
    {
      "source": 28,
      "target": 32
    },
    {
      "source": 28,
      "target": 32
    },
    {
      "source": 28,
      "target": 32
    },
    {
      "source": 28,
      "target": 32
    },
    {
      "source": 28,
      "target": 32
    },
    {
      "source": 28,
      "target": 32
    },
    {
      "source": 28,
      "target": 32
    },
    {
      "source": 28,
      "target": 32
    },
    {
      "source": 29,
      "target": 22
    },
    {
      "source": 29,
      "target": 22
    },
    {
      "source": 29,
      "target": 30
    },
    {
      "source": 29,
      "target": 30
    },
    {
      "source": 30,
      "target": 27
    },
    {
      "source": 30,
      "target": 27
    },
    {
      "source": 30,
      "target": 31
    },
    {
      "source": 30,
      "target": 31
    },
    {
      "source": 31,
      "target": 32
    },
    {
      "source": 31,
      "target": 32
    },
    {
      "source": 31,
      "target": 32
    },
    {
      "source": 31,
      "target": 32
    },
    {
      "source": 31,
      "target": 32,
      "variable": "entry"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "entry"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "entry"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "entry"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "entry"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "entry"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "entry"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "entry"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "entry"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "entry"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "entry"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "entry"
    }
  ],
  "control_edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 3,
      "target": 5
    },
    {
      "source": 4,
      "target": 3
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 4,
      "target": 29
    },
    {
      "source": 4,
      "target": 29
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 5,
      "target": 7
    },
    {
      "source": 5,
      "target": 24
    },
    {
      "source": 5,
      "target": 24
    },
    {
      "source": 5,
      "target": 24
    },
    {
      "source": 5,
      "target": 24
    },
    {
      "source": 5,
      "target": 13
    },
    {
      "source": 5,
      "target": 13
    },
    {
      "source": 5,
      "target": 13
    },
    {
      "source": 5,
      "target": 13
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 8,
      "target": 9
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 12,
      "target": 13
    },
    {
      "source": 12,
      "target": 14
    },
    {
      "source": 13,
      "target": 14
    },
    {
      "source": 13,
      "target": 25
    },
    {
      "source": 13,
      "target": 25
    },
    {
      "source": 13,
      "target": 25
    },
    {
      "source": 13,
      "target": 25
    },
    {
      "source": 14,
      "target": 15
    },
    {
      "source": 14,
      "target": 15
    },
    {
      "source": 14,
      "target": 19
    },
    {
      "source": 14,
      "target": 19
    },
    {
      "source": 15,
      "target": 15
    },
    {
      "source": 15,
      "target": 15
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 16,
      "target": 17
    },
    {
      "source": 16,
      "target": 17
    },
    {
      "source": 16,
      "target": 19
    },
    {
      "source": 16,
      "target": 19
    },
    {
      "source": 17,
      "target": 18
    },
    {
      "source": 17,
      "target": 18
    },
    {
      "source": 18,
      "target": 19
    },
    {
      "source": 18,
      "target": 19
    },
    {
      "source": 19,
      "target": 20
    },
    {
      "source": 19,
      "target": 20
    },
    {
      "source": 19,
      "target": 20
    },
    {
      "source": 19,
      "target": 20
    },
    {
      "source": 19,
      "target": 29
    },
    {
      "source": 19,
      "target": 29
    },
    {
      "source": 20,
      "target": 21
    },
    {
      "source": 20,
      "target": 21
    },
    {
      "source": 20,
      "target": 21
    },
    {
      "source": 20,
      "target": 21
    },
    {
      "source": 21,
      "target": 22
    },
    {
      "source": 21,
      "target": 22
    },
    {
      "source": 21,
      "target": 22
    },
    {
      "source": 21,
      "target": 22
    },
    {
      "source": 21,
      "target": 26
    },
    {
      "source": 21,
      "target": 26
    },
    {
      "source": 21,
      "target": 26
    },
    {
      "source": 21,
      "target": 26
    },
    {
      "source": 22,
      "target": 23
    },
    {
      "source": 22,
      "target": 23
    },
    {
      "source": 22,
      "target": 23
    },
    {
      "source": 22,
      "target": 23
    },
    {
      "source": 22,
      "target": 23
    },
    {
      "source": 22,
      "target": 23
    },
    {
      "source": 23,
      "target": 4
    },
    {
      "source": 23,
      "target": 4
    },
    {
      "source": 23,
      "target": 4
    },
    {
      "source": 23,
      "target": 4
    },
    {
      "source": 23,
      "target": 4
    },
    {
      "source": 23,
      "target": 4
    },
    {
      "source": 25,
      "target": 21
    },
    {
      "source": 25,
      "target": 21
    },
    {
      "source": 25,
      "target": 21
    },
    {
      "source": 25,
      "target": 21
    },
    {
      "source": 26,
      "target": 27
    },
    {
      "source": 26,
      "target": 27
    },
    {
      "source": 26,
      "target": 27
    },
    {
      "source": 26,
      "target": 27
    },
    {
      "source": 26,
      "target": 28
    },
    {
      "source": 26,
      "target": 28
    },
    {
      "source": 26,
      "target": 28
    },
    {
      "source": 26,
      "target": 28
    },
    {
      "source": 27,
      "target": 28
    },
    {
      "source": 27,
      "target": 28
    },
    {
      "source": 27,
      "target": 28
    },
    {
      "source": 27,
      "target": 28
    },
    {
      "source": 27,
      "target": 31
    },
    {
      "source": 27,
      "target": 31
    },
    {
      "source": 28,
      "target": 32
    },
    {
      "source": 28,
      "target": 32
    },
    {
      "source": 28,
      "target": 32
    },
    {
      "source": 28,
      "target": 32
    },
    {
      "source": 28,
      "target": 32
    },
    {
      "source": 28,
      "target": 32
    },
    {
      "source": 28,
      "target": 32
    },
    {
      "source": 28,
      "target": 32
    },
    {
      "source": 29,
      "target": 22
    },
    {
      "source": 29,
      "target": 22
    },
    {
      "source": 29,
      "target": 30
    },
    {
      "source": 29,
      "target": 30
    },
    {
      "source": 30,
      "target": 27
    },
    {
      "source": 30,
      "target": 27
    },
    {
      "source": 30,
      "target": 31
    },
    {
      "source": 30,
      "target": 31
    },
    {
      "source": 31,
      "target": 32
    },
    {
      "source": 31,
      "target": 32
    },
    {
      "source": 31,
      "target": 32
    },
    {
      "source": 31,
      "target": 32
    }
  ],
  "dataflow_edges": [
    {
      "source": 4,
      "target": 30,
      "variable": "line"
    },
    {
      "source": 4,
      "target": 30,
      "variable": "line"
    },
    {
      "source": 4,
      "target": 27,
      "variable": "line"
    },
    {
      "source": 4,
      "target": 27,
      "variable": "line"
    },
    {
      "source": 17,
      "target": 18,
      "variable": "match_group_1"
    },
    {
      "source": 17,
      "target": 18,
      "variable": "match_group_1"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "entry"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "entry"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "entry"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "entry"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "entry"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "entry"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "entry"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "entry"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "entry"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "entry"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "entry"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "entry"
    }
  ]
}