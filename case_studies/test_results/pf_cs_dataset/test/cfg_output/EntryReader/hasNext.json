{
  "method_name": "hasNext",
  "java_file": null,
  "nodes": [
    {
      "id": 0,
      "label": "Entry",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 1,
      "label": "Exit",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 2,
      "label": "If(BinaryOperation(operandl=MemberReference(member=pushback_line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=))",
      "line": 564,
      "node_type": "control"
    },
    {
      "id": 3,
      "label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true))",
      "line": 580,
      "node_type": "control"
    },
    {
      "id": 4,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=line)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))",
      "line": 568,
      "node_type": "control"
    },
    {
      "id": 5,
      "label": "Try",
      "line": 569,
      "node_type": "control"
    },
    {
      "id": 6,
      "label": "Assignment(expressionl=MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[], member=readLine, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None))",
      "line": 570,
      "node_type": "control"
    },
    {
      "id": 7,
      "label": "Catch(e)",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 8,
      "label": "Throw(ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"unexpected IOException: \"), MemberReference(member=e, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Error, sub_type=None)))",
      "line": 572,
      "node_type": "control"
    },
    {
      "id": 9,
      "label": "If(BinaryOperation(operandl=MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===))",
      "line": 575,
      "node_type": "control"
    },
    {
      "id": 10,
      "label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false))",
      "line": 576,
      "node_type": "control"
    },
    {
      "id": 11,
      "label": "MethodInvocation(arguments=[MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=putback, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)",
      "line": 579,
      "node_type": "control"
    }
  ],
  "edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 2,
      "target": 4
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 5,
      "target": 7
    },
    {
      "source": 6,
      "target": 9
    },
    {
      "source": 6,
      "target": 9,
      "variable": "line"
    },
    {
      "source": 6,
      "target": 11,
      "variable": "line"
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 9,
      "target": 11
    },
    {
      "source": 11,
      "target": 3
    }
  ],
  "control_edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 2,
      "target": 4
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 5,
      "target": 7
    },
    {
      "source": 6,
      "target": 9
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 9,
      "target": 11
    },
    {
      "source": 11,
      "target": 3
    }
  ],
  "dataflow_edges": [
    {
      "source": 6,
      "target": 9,
      "variable": "line"
    },
    {
      "source": 6,
      "target": 11,
      "variable": "line"
    }
  ]
}