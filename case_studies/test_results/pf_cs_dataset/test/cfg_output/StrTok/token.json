{
  "method_name": "token",
  "java_file": null,
  "nodes": [
    {
      "id": 0,
      "label": "Entry",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 1,
      "label": "Exit",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 2,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=ttype, postfix_operators=[], prefix_operators=[], qualifier=stok, selectors=[]), name=ttype)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "line": 115,
      "node_type": "control"
    },
    {
      "id": 3,
      "label": "If(BinaryOperation(operandl=MemberReference(member=ttype, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=TT_EOF, postfix_operators=[], prefix_operators=[], qualifier=StreamTokenizer, selectors=[]), operator===))",
      "line": 118,
      "node_type": "control"
    },
    {
      "id": 4,
      "label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null))",
      "line": 119,
      "node_type": "control"
    },
    {
      "id": 5,
      "label": "If(BinaryOperation(operandl=MemberReference(member=ttype, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=TT_EOL, postfix_operators=[], prefix_operators=[], qualifier=StreamTokenizer, selectors=[]), operator===))",
      "line": 123,
      "node_type": "control"
    },
    {
      "id": 6,
      "label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"\"))",
      "line": 124,
      "node_type": "control"
    },
    {
      "id": 7,
      "label": "If(BinaryOperation(operandl=MemberReference(member=sval, postfix_operators=[], prefix_operators=[], qualifier=stok, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=))",
      "line": 129,
      "node_type": "control"
    },
    {
      "id": 8,
      "label": "If(BinaryOperation(operandl=MemberReference(member=ttype, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=>))",
      "line": 138,
      "node_type": "control"
    },
    {
      "id": 9,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=BinaryOperation(operandl=Cast(expression=MemberReference(member=ttype, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=BasicType(dimensions=[], name=char)), operandr=MemberReference(member=sval, postfix_operators=[], prefix_operators=[], qualifier=stok, selectors=[]), operator=+), operandr=Cast(expression=MemberReference(member=ttype, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=BasicType(dimensions=[], name=char)), operator=+), name=s)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))",
      "line": 131,
      "node_type": "control"
    },
    {
      "id": 10,
      "label": "Return(MethodInvocation(arguments=[], member=intern, postfix_operators=[], prefix_operators=[], qualifier=s, selectors=[], type_arguments=None))",
      "line": 140,
      "node_type": "control"
    },
    {
      "id": 11,
      "label": "Return(MethodInvocation(arguments=[], member=intern, postfix_operators=[], prefix_operators=[], qualifier=stok.sval, selectors=[], type_arguments=None))",
      "line": 134,
      "node_type": "control"
    },
    {
      "id": 12,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"\"), operandr=Cast(expression=MemberReference(member=ttype, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=BasicType(dimensions=[], name=char)), operator=+), name=s)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))",
      "line": 139,
      "node_type": "control"
    },
    {
      "id": 13,
      "label": "Throw(ClassCreator(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Unexpected return \"), operandr=MemberReference(member=ttype, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\" from StreamTokenizer\"), operator=+)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=RuntimeException, sub_type=None)))",
      "line": 143,
      "node_type": "control"
    }
  ],
  "edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 2,
      "target": 3,
      "variable": "ttype"
    },
    {
      "source": 2,
      "target": 5,
      "variable": "ttype"
    },
    {
      "source": 2,
      "target": 8,
      "variable": "ttype"
    },
    {
      "source": 2,
      "target": 8,
      "variable": "ttype"
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 3,
      "target": 5
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 5,
      "target": 7
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 8,
      "target": 9
    },
    {
      "source": 8,
      "target": 11
    },
    {
      "source": 8,
      "target": 12
    },
    {
      "source": 8,
      "target": 13
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 12,
      "target": 10
    }
  ],
  "control_edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 3,
      "target": 5
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 5,
      "target": 7
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 8,
      "target": 9
    },
    {
      "source": 8,
      "target": 11
    },
    {
      "source": 8,
      "target": 12
    },
    {
      "source": 8,
      "target": 13
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 12,
      "target": 10
    }
  ],
  "dataflow_edges": [
    {
      "source": 2,
      "target": 3,
      "variable": "ttype"
    },
    {
      "source": 2,
      "target": 5,
      "variable": "ttype"
    },
    {
      "source": 2,
      "target": 8,
      "variable": "ttype"
    },
    {
      "source": 2,
      "target": 8,
      "variable": "ttype"
    }
  ]
}