{
  "method_name": "equals",
  "java_file": null,
  "nodes": [
    {
      "id": 0,
      "label": "Entry",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 1,
      "label": "Exit",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 2,
      "label": "If(BinaryOperation(operandl=MemberReference(member=obj, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=ReferenceType(arguments=[TypeArgument(pattern_type=?, type=None), TypeArgument(pattern_type=?, type=None)], dimensions=[], name=WeakIdentityPair, sub_type=None), operator=instanceof))",
      "line": 92,
      "node_type": "control"
    },
    {
      "id": 3,
      "label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false))",
      "line": 109,
      "node_type": "control"
    },
    {
      "id": 4,
      "label": "LocalVariableDeclaration(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"unchecked\"), name=SuppressWarnings)], declarators=[VariableDeclarator(dimensions=[], initializer=Cast(expression=MemberReference(member=obj, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=T1, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=T2, sub_type=None))], dimensions=[], name=WeakIdentityPair, sub_type=None)), name=other)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=T1, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=T2, sub_type=None))], dimensions=[], name=WeakIdentityPair, sub_type=None))",
      "line": 97,
      "node_type": "control"
    },
    {
      "id": 5,
      "label": "If(BinaryOperation(operandl=MemberReference(member=hashCode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=hashCode, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[]), operator=!=))",
      "line": 99,
      "node_type": "control"
    },
    {
      "id": 6,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getA, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=a)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=T1, sub_type=None))",
      "line": 103,
      "node_type": "control"
    },
    {
      "id": 7,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getB, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=b)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=T2, sub_type=None))",
      "line": 104,
      "node_type": "control"
    },
    {
      "id": 8,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getA, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[], type_arguments=None), name=oa)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=T1, sub_type=None))",
      "line": 105,
      "node_type": "control"
    },
    {
      "id": 9,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getB, postfix_operators=[], prefix_operators=[], qualifier=other, selectors=[], type_arguments=None), name=ob)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=T2, sub_type=None))",
      "line": 106,
      "node_type": "control"
    },
    {
      "id": 10,
      "label": "If(BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), operandr=BinaryOperation(operandl=MemberReference(member=b, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), operator=||), operandr=BinaryOperation(operandl=MemberReference(member=oa, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), operator=||), operandr=BinaryOperation(operandl=MemberReference(member=ob, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), operator=||))",
      "line": 107,
      "node_type": "control"
    },
    {
      "id": 11,
      "label": "Return(BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=oa, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), operandr=BinaryOperation(operandl=MemberReference(member=b, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=ob, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), operator=&&))",
      "line": 111,
      "node_type": "control"
    }
  ],
  "edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 2,
      "target": 4
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 5,
      "target": 3
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 6,
      "target": 7
    },
    {
      "source": 6,
      "target": 10,
      "variable": "a"
    },
    {
      "source": 6,
      "target": 11,
      "variable": "a"
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 7,
      "target": 10,
      "variable": "b"
    },
    {
      "source": 7,
      "target": 11,
      "variable": "b"
    },
    {
      "source": 8,
      "target": 9
    },
    {
      "source": 8,
      "target": 10,
      "variable": "oa"
    },
    {
      "source": 8,
      "target": 11,
      "variable": "oa"
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 9,
      "target": 10,
      "variable": "ob"
    },
    {
      "source": 9,
      "target": 11,
      "variable": "ob"
    },
    {
      "source": 10,
      "target": 3
    },
    {
      "source": 10,
      "target": 11
    }
  ],
  "control_edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 2,
      "target": 4
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 5,
      "target": 3
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 6,
      "target": 7
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 8,
      "target": 9
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 10,
      "target": 3
    },
    {
      "source": 10,
      "target": 11
    }
  ],
  "dataflow_edges": [
    {
      "source": 6,
      "target": 10,
      "variable": "a"
    },
    {
      "source": 6,
      "target": 11,
      "variable": "a"
    },
    {
      "source": 7,
      "target": 10,
      "variable": "b"
    },
    {
      "source": 7,
      "target": 11,
      "variable": "b"
    },
    {
      "source": 8,
      "target": 10,
      "variable": "oa"
    },
    {
      "source": 8,
      "target": 11,
      "variable": "oa"
    },
    {
      "source": 9,
      "target": 10,
      "variable": "ob"
    },
    {
      "source": 9,
      "target": 11,
      "variable": "ob"
    }
  ]
}