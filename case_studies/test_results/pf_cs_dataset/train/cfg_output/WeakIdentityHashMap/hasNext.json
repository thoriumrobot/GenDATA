{
  "method_name": "hasNext",
  "java_file": null,
  "nodes": [
    {
      "id": 0,
      "label": "Entry",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 1,
      "label": "Exit",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 2,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=table, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), name=t)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=K, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=V, sub_type=None))], dimensions=[None], name=Entry, sub_type=None))",
      "line": 812,
      "node_type": "control"
    },
    {
      "id": 3,
      "label": "While(BinaryOperation(operandl=MemberReference(member=nextKey, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===))",
      "line": 814,
      "node_type": "control"
    },
    {
      "id": 4,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=entry, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), name=e)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=K, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=V, sub_type=None))], dimensions=[], name=Entry, sub_type=None))",
      "line": 815,
      "node_type": "control"
    },
    {
      "id": 5,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=index, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "line": 816,
      "node_type": "control"
    },
    {
      "id": 6,
      "label": "While(BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=e, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), operandr=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=>), operator=&&))",
      "line": 817,
      "node_type": "control"
    },
    {
      "id": 7,
      "label": "Assignment(expressionl=MemberReference(member=e, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=t, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=['--'], qualifier=, selectors=[]))]))",
      "line": 818,
      "node_type": "control"
    },
    {
      "id": 8,
      "label": "Assignment(expressionl=MemberReference(member=entry, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=e, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))",
      "line": 819,
      "node_type": "control"
    },
    {
      "id": 9,
      "label": "Assignment(expressionl=MemberReference(member=index, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))",
      "line": 820,
      "node_type": "control"
    },
    {
      "id": 10,
      "label": "If(BinaryOperation(operandl=MemberReference(member=e, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===))",
      "line": 821,
      "node_type": "control"
    },
    {
      "id": 11,
      "label": "Assignment(expressionl=MemberReference(member=currentKey, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null))",
      "line": 822,
      "node_type": "control"
    },
    {
      "id": 12,
      "label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false))",
      "line": 823,
      "node_type": "control"
    },
    {
      "id": 13,
      "label": "Assignment(expressionl=MemberReference(member=nextKey, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[], member=get, postfix_operators=[], prefix_operators=[], qualifier=e, selectors=[], type_arguments=None))",
      "line": 825,
      "node_type": "control"
    },
    {
      "id": 14,
      "label": "If(BinaryOperation(operandl=MemberReference(member=nextKey, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===))",
      "line": 826,
      "node_type": "control"
    },
    {
      "id": 15,
      "label": "Assignment(expressionl=MemberReference(member=entry, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=next, postfix_operators=[], prefix_operators=[], qualifier=entry, selectors=[]))",
      "line": 827,
      "node_type": "control"
    },
    {
      "id": 16,
      "label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true))",
      "line": 829,
      "node_type": "control"
    }
  ],
  "edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 2,
      "target": 7,
      "variable": "t"
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 3,
      "target": 16
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 5,
      "target": 6,
      "variable": "i"
    },
    {
      "source": 5,
      "target": 9,
      "variable": "i"
    },
    {
      "source": 6,
      "target": 7
    },
    {
      "source": 6,
      "target": 8
    },
    {
      "source": 7,
      "target": 6
    },
    {
      "source": 7,
      "target": 8,
      "variable": "e"
    },
    {
      "source": 7,
      "target": 10,
      "variable": "e"
    },
    {
      "source": 8,
      "target": 9
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 10,
      "target": 13
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 13,
      "target": 14
    },
    {
      "source": 13,
      "target": 14,
      "variable": "nextKey"
    },
    {
      "source": 14,
      "target": 15
    },
    {
      "source": 14,
      "target": 3
    },
    {
      "source": 15,
      "target": 3
    }
  ],
  "control_edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 3,
      "target": 16
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 6,
      "target": 7
    },
    {
      "source": 6,
      "target": 8
    },
    {
      "source": 7,
      "target": 6
    },
    {
      "source": 8,
      "target": 9
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 10,
      "target": 13
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 13,
      "target": 14
    },
    {
      "source": 14,
      "target": 15
    },
    {
      "source": 14,
      "target": 3
    },
    {
      "source": 15,
      "target": 3
    }
  ],
  "dataflow_edges": [
    {
      "source": 2,
      "target": 7,
      "variable": "t"
    },
    {
      "source": 5,
      "target": 6,
      "variable": "i"
    },
    {
      "source": 5,
      "target": 9,
      "variable": "i"
    },
    {
      "source": 7,
      "target": 8,
      "variable": "e"
    },
    {
      "source": 7,
      "target": 10,
      "variable": "e"
    },
    {
      "source": 13,
      "target": 14,
      "variable": "nextKey"
    }
  ]
}