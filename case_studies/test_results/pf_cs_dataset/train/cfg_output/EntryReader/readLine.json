{
  "method_name": "readLine",
  "java_file": null,
  "nodes": [
    {
      "id": 0,
      "label": "Entry",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 1,
      "label": "Exit",
      "line": null,
      "node_type": "control"
    },
    {
      "id": 2,
      "label": "If(BinaryOperation(operandl=MemberReference(member=pushback_line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=))",
      "line": 486,
      "node_type": "control"
    },
    {
      "id": 3,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=pushback_line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), name=line)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))",
      "line": 487,
      "node_type": "control"
    },
    {
      "id": 4,
      "label": "Assignment(expressionl=MemberReference(member=pushback_line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null))",
      "line": 488,
      "node_type": "control"
    },
    {
      "id": 5,
      "label": "Return(MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))",
      "line": 539,
      "node_type": "control"
    },
    {
      "id": 6,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=get_next_line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=line)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))",
      "line": 492,
      "node_type": "control"
    },
    {
      "id": 7,
      "label": "If(BinaryOperation(operandl=MemberReference(member=comment_re, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=))",
      "line": 493,
      "node_type": "control"
    },
    {
      "id": 8,
      "label": "While(BinaryOperation(operandl=MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=))",
      "line": 494,
      "node_type": "control"
    },
    {
      "id": 9,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=matcher, postfix_operators=[], prefix_operators=[], qualifier=comment_re, selectors=[], type_arguments=None), name=cmatch)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Matcher, sub_type=None))",
      "line": 495,
      "node_type": "control"
    },
    {
      "id": 10,
      "label": "If(MethodInvocation(arguments=[], member=find, postfix_operators=[], prefix_operators=[], qualifier=cmatch, selectors=[], type_arguments=None))",
      "line": 496,
      "node_type": "control"
    },
    {
      "id": 11,
      "label": "Assignment(expressionl=MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"\")], member=replaceFirst, postfix_operators=[], prefix_operators=[], qualifier=cmatch, selectors=[], type_arguments=None))",
      "line": 497,
      "node_type": "control"
    },
    {
      "id": 12,
      "label": "If(BinaryOperation(operandl=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=line, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=>))",
      "line": 498,
      "node_type": "control"
    },
    {
      "id": 13,
      "label": "Break",
      "line": 502,
      "node_type": "control"
    },
    {
      "id": 14,
      "label": "Assignment(expressionl=MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[], member=get_next_line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None))",
      "line": 504,
      "node_type": "control"
    },
    {
      "id": 15,
      "label": "If(BinaryOperation(operandl=MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===))",
      "line": 509,
      "node_type": "control"
    },
    {
      "id": 16,
      "label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null))",
      "line": 510,
      "node_type": "control"
    },
    {
      "id": 17,
      "label": "If(BinaryOperation(operandl=MemberReference(member=include_re, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=))",
      "line": 515,
      "node_type": "control"
    },
    {
      "id": 18,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=matcher, postfix_operators=[], prefix_operators=[], qualifier=include_re, selectors=[], type_arguments=None), name=m)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Matcher, sub_type=None))",
      "line": 516,
      "node_type": "control"
    },
    {
      "id": 19,
      "label": "If(MethodInvocation(arguments=[], member=matches, postfix_operators=[], prefix_operators=[], qualifier=m, selectors=[], type_arguments=None))",
      "line": 517,
      "node_type": "control"
    },
    {
      "id": 20,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)], member=group, postfix_operators=[], prefix_operators=[], qualifier=m, selectors=[], type_arguments=None), name=filename_string)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))",
      "line": 518,
      "node_type": "control"
    },
    {
      "id": 21,
      "label": "If(BinaryOperation(operandl=MemberReference(member=filename_string, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===))",
      "line": 519,
      "node_type": "control"
    },
    {
      "id": 22,
      "label": "Throw(ClassCreator(arguments=[MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"include_re (%s) does not capture group 1 in %s\"), MemberReference(member=include_re, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=format, postfix_operators=[], prefix_operators=[], qualifier=String, selectors=[], type_arguments=None)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Error, sub_type=None)))",
      "line": 520,
      "node_type": "control"
    },
    {
      "id": 23,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MethodInvocation(arguments=[MemberReference(member=filename_string, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=expandFilename, postfix_operators=[], prefix_operators=[], qualifier=UtilMDE, selectors=[], type_arguments=None)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=File, sub_type=None)), name=filename)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=File, sub_type=None))",
      "line": 523,
      "node_type": "control"
    },
    {
      "id": 24,
      "label": "If(MethodInvocation(arguments=[], member=isAbsolute, postfix_operators=[], prefix_operators=['!'], qualifier=filename, selectors=[], type_arguments=None))",
      "line": 525,
      "node_type": "control"
    },
    {
      "id": 25,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getFirst, postfix_operators=[], prefix_operators=[], qualifier=readers, selectors=[], type_arguments=None), name=reader)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=FlnReader, sub_type=None))",
      "line": 526,
      "node_type": "control"
    },
    {
      "id": 26,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=filename, postfix_operators=[], prefix_operators=[], qualifier=reader, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=File, sub_type=None)), name=current_filename)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=File, sub_type=None))",
      "line": 527,
      "node_type": "control"
    },
    {
      "id": 27,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getParentFile, postfix_operators=[], prefix_operators=[], qualifier=current_filename, selectors=[], type_arguments=None), name=current_parent)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=File, sub_type=None))",
      "line": 528,
      "node_type": "control"
    },
    {
      "id": 28,
      "label": "Assignment(expressionl=MemberReference(member=filename, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=ClassCreator(arguments=[MemberReference(member=current_parent, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=toString, postfix_operators=[], prefix_operators=[], qualifier=filename, selectors=[], type_arguments=None)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=File, sub_type=None)))",
      "line": 529,
      "node_type": "control"
    },
    {
      "id": 29,
      "label": "MethodInvocation(arguments=[ClassCreator(arguments=[MethodInvocation(arguments=[], member=getAbsolutePath, postfix_operators=[], prefix_operators=[], qualifier=filename, selectors=[], type_arguments=None)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=FlnReader, sub_type=None))], member=addFirst, postfix_operators=[], prefix_operators=[], qualifier=readers, selectors=[], type_arguments=None)",
      "line": 533,
      "node_type": "control"
    },
    {
      "id": 30,
      "label": "Return(MethodInvocation(arguments=[], member=readLine, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None))",
      "line": 534,
      "node_type": "control"
    }
  ],
  "edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 2,
      "target": 6
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 6,
      "target": 7
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 7,
      "target": 15
    },
    {
      "source": 8,
      "target": 9
    },
    {
      "source": 8,
      "target": 15
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 10,
      "target": 13
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 12,
      "target": 13
    },
    {
      "source": 12,
      "target": 14
    },
    {
      "source": 14,
      "target": 8
    },
    {
      "source": 14,
      "target": 15,
      "variable": "line"
    },
    {
      "source": 14,
      "target": 15,
      "variable": "line"
    },
    {
      "source": 14,
      "target": 18,
      "variable": "line"
    },
    {
      "source": 14,
      "target": 18,
      "variable": "line"
    },
    {
      "source": 14,
      "target": 5,
      "variable": "line"
    },
    {
      "source": 14,
      "target": 5,
      "variable": "line"
    },
    {
      "source": 14,
      "target": 5,
      "variable": "line"
    },
    {
      "source": 14,
      "target": 5,
      "variable": "line"
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 17
    },
    {
      "source": 15,
      "target": 17
    },
    {
      "source": 17,
      "target": 18
    },
    {
      "source": 17,
      "target": 18
    },
    {
      "source": 17,
      "target": 5
    },
    {
      "source": 17,
      "target": 5
    },
    {
      "source": 18,
      "target": 19
    },
    {
      "source": 18,
      "target": 19
    },
    {
      "source": 19,
      "target": 20
    },
    {
      "source": 19,
      "target": 20
    },
    {
      "source": 19,
      "target": 5
    },
    {
      "source": 19,
      "target": 5
    },
    {
      "source": 20,
      "target": 21
    },
    {
      "source": 20,
      "target": 21
    },
    {
      "source": 20,
      "target": 21,
      "variable": "filename_string"
    },
    {
      "source": 20,
      "target": 21,
      "variable": "filename_string"
    },
    {
      "source": 21,
      "target": 22
    },
    {
      "source": 21,
      "target": 22
    },
    {
      "source": 21,
      "target": 23
    },
    {
      "source": 21,
      "target": 23
    },
    {
      "source": 23,
      "target": 24
    },
    {
      "source": 23,
      "target": 24
    },
    {
      "source": 24,
      "target": 25
    },
    {
      "source": 24,
      "target": 25
    },
    {
      "source": 24,
      "target": 29
    },
    {
      "source": 24,
      "target": 29
    },
    {
      "source": 25,
      "target": 26
    },
    {
      "source": 25,
      "target": 26
    },
    {
      "source": 26,
      "target": 27
    },
    {
      "source": 26,
      "target": 27
    },
    {
      "source": 27,
      "target": 28
    },
    {
      "source": 27,
      "target": 28
    },
    {
      "source": 28,
      "target": 29
    },
    {
      "source": 28,
      "target": 29
    },
    {
      "source": 29,
      "target": 30
    },
    {
      "source": 29,
      "target": 30
    },
    {
      "source": 29,
      "target": 30
    },
    {
      "source": 29,
      "target": 30
    }
  ],
  "control_edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 2,
      "target": 6
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 6,
      "target": 7
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 7,
      "target": 15
    },
    {
      "source": 8,
      "target": 9
    },
    {
      "source": 8,
      "target": 15
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 10,
      "target": 13
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 12,
      "target": 13
    },
    {
      "source": 12,
      "target": 14
    },
    {
      "source": 14,
      "target": 8
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 17
    },
    {
      "source": 15,
      "target": 17
    },
    {
      "source": 17,
      "target": 18
    },
    {
      "source": 17,
      "target": 18
    },
    {
      "source": 17,
      "target": 5
    },
    {
      "source": 17,
      "target": 5
    },
    {
      "source": 18,
      "target": 19
    },
    {
      "source": 18,
      "target": 19
    },
    {
      "source": 19,
      "target": 20
    },
    {
      "source": 19,
      "target": 20
    },
    {
      "source": 19,
      "target": 5
    },
    {
      "source": 19,
      "target": 5
    },
    {
      "source": 20,
      "target": 21
    },
    {
      "source": 20,
      "target": 21
    },
    {
      "source": 21,
      "target": 22
    },
    {
      "source": 21,
      "target": 22
    },
    {
      "source": 21,
      "target": 23
    },
    {
      "source": 21,
      "target": 23
    },
    {
      "source": 23,
      "target": 24
    },
    {
      "source": 23,
      "target": 24
    },
    {
      "source": 24,
      "target": 25
    },
    {
      "source": 24,
      "target": 25
    },
    {
      "source": 24,
      "target": 29
    },
    {
      "source": 24,
      "target": 29
    },
    {
      "source": 25,
      "target": 26
    },
    {
      "source": 25,
      "target": 26
    },
    {
      "source": 26,
      "target": 27
    },
    {
      "source": 26,
      "target": 27
    },
    {
      "source": 27,
      "target": 28
    },
    {
      "source": 27,
      "target": 28
    },
    {
      "source": 28,
      "target": 29
    },
    {
      "source": 28,
      "target": 29
    },
    {
      "source": 29,
      "target": 30
    },
    {
      "source": 29,
      "target": 30
    },
    {
      "source": 29,
      "target": 30
    },
    {
      "source": 29,
      "target": 30
    }
  ],
  "dataflow_edges": [
    {
      "source": 14,
      "target": 15,
      "variable": "line"
    },
    {
      "source": 14,
      "target": 15,
      "variable": "line"
    },
    {
      "source": 14,
      "target": 18,
      "variable": "line"
    },
    {
      "source": 14,
      "target": 18,
      "variable": "line"
    },
    {
      "source": 14,
      "target": 5,
      "variable": "line"
    },
    {
      "source": 14,
      "target": 5,
      "variable": "line"
    },
    {
      "source": 14,
      "target": 5,
      "variable": "line"
    },
    {
      "source": 14,
      "target": 5,
      "variable": "line"
    },
    {
      "source": 20,
      "target": 21,
      "variable": "filename_string"
    },
    {
      "source": 20,
      "target": 21,
      "variable": "filename_string"
    }
  ]
}